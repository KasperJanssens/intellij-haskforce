/*
 * Copyright 2014 Cary M. Robbins
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * WARNING: BE CAREFUL WITH PERFORMANCE WHEN EDITING THIS FILE.
 *
 * Pinning might alter what the parser accepts.
 * Mental model: red cut in logic programming.
 *
 * The parser test suite itself with 40 small examples can literally take 500%
 * longer time.
 *
 * Useful patterns and anti-patterns:
 *
 * Good: private impdecls ::= impdecl [semi impdecls]
 *
 * Bad: private impdecls ::= impdecl semi impdecls
 *                        | impdecls

 * Good: funorpatdecl ::= (funlhs | pat) rhs
 *
 * Bad: funorpatdecl ::= funlhs rhs
  *                    | pat rhs
 */

/*
 * To generate sources from this file -
 *   Delete the gen/ directory.
 *   Use Command + Shift + G to generate parser in gen/ directory.
 *
 *   The lexer belonging to this parser is located in
 *   highlighting/_HaskellSyntaxHighlightingLexer.flex. See that file for
 *   instructions on how to generate it.
 *
 *   Be sure to add the gen/ directory to your sources.
 *   In Intellij, right-click the gen directory and choose Mark Directory As > Sources.
 */

{
  parserClass="com.haskforce.parser.HaskellParser"
  parserUtilClass="com.haskforce.psi.HaskellParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Haskell"
  psiImplClassSuffix="Impl"
  psiPackage="com.haskforce.psi"
  psiImplPackage="com.haskforce.psi.impl"

  elementTypeHolderClass="com.haskforce.psi.HaskellTypes"
  elementTypeClass="com.haskforce.psi.HaskellElementType"
  tokenTypeClass="com.haskforce.psi.HaskellTokenType"

  psiImplUtilClass="com.haskforce.psi.impl.HaskellPsiImplUtil"

  implements("varid|conid")="com.haskforce.psi.HaskellNamedElement"

  tokens=[
    lparen='('
    rparen=')'
    lunboxparen='(#'
    runboxparen='#)'
    pipe='|'
    comma=','
    semicolon=';'
    lthopen='[|'
    rthclose='|]'
    lbracket='['
    rbracket=']'
    backtick='`'
    lbrace='{'
    rbrace='}'
    opencom='{-'
    closecom='-}'
    openpragma='{-#'
    closepragma='#-}'
    doublequote='"'
    thquote="''"
    singlequote="'"
    exclamation='!'
    doublehash='##'
    hash='#'
    parensplice="$("
    idsplice="regexp:\$[a-z_][a-zA-Z_0-9']*"
    dollar='$'
    percent='%'
    ampersand='&'
    asterisk='*'
    plus='+'
    period='.'
    slash='/'
    lessthan='<'
    equals='='
    greaterthan='>'
    question='?'
    ampersat='@'
    backslash='\'
    caret='^'
    minus='-'
    underscore='_'
    tilde='~'
    colon=':'
    doubleperiod='..'
    doublecolon='::'
    leftarrow='<-'
    rightarrow='->'
    doublearrow='=>'
    nullCharacter='\&'
    classtoken='class'
    varidRegexp="regexp:[a-z_][a-zA-Z_0-9']*"
    conidRegexp="regexp:[A-Z][a-zA-Z_0-9']*"
    chartoken="regexp:'(\\.|[^'])'"
    integertoken="regexp:(0(o|O)[0-7]+|0(x|X)[0-9a-fA-F]+|[0-9]+)"
    floattoken="regexp:([0-9]+\.[0-9]+((e|E)(\+|\-)?[0-9]+)?|[0-9]+((e|E)(\+|\-)?[0-9]+))"
    comment='regexp:--([^\^\r\n][^\r\n]*|[\r\n])'
    commenttext='regexp:[^{}-]+'
    dashes='regexp:--(-)?'
    haddock='regexp:--\^[^\r\n]*'
    stringtoken='regexp:"(\\\s*\n\s*\\|\\"|[^"\n])*"'
    badstringtoken='regexp:"(\\\s*\n\s*|\\"|[^"\n])*'
    // Reserved IDs. Should be tokens for IntelliJ reasons. Gives us a nicer
    // PSI tree as side effect.
    DATA='data'
    DEFAULT='default'
    DERIVING='deriving'
    FOREIGN='foreign'
    INSTANCE='instance'
    MODULETOKEN='module'
    NEWTYPE='newtype'
    TYPE='type'
    WHERE='where'
    AS='as'
    IMPORT='import'
    INFIX='infix'
    INFIXL='infixl'
    INFIXR='infixr'
    QUALIFIED='qualified'
    HIDING='hiding'
    CASE='case'
    LCASETOK='\case'
    MDOTOK='mdo'
    DO='do'
    RECTOK='rec'
    ELSE='else'
    CPPELSE='#else'
    CPPENDIF='#endif'
    CPPIF='regexp:#if ([^\r\n]*)'
    IF='if'
    IN='in'
    LET='let'
    OF='of'
    THEN='then'
    EXPORTTOKEN='export'
    CONSYMTOK="Consym"
    VARSYMTOKPLUS="VarsymPlus"
    VARSYMTOK="Varsym"
    FORALLTOKEN='forall'
    WHITESPACESEMITOK="Synthetic semicolon"
    WHITESPACELBRACETOK="Synthetic leftbrace"
    WHITESPACERBRACETOK="Synthetic rightbrace"
  ]
}

// Haskell 2010 Report - http://www.haskell.org/onlinereport/haskell2010/haskellch2.html#x7-140002

module ::= (ppragma | cpp)* [moduledecl] body

moduledecl ::= "module" qconid [ppragma] [exports] "where" {pin=1}

exports ::= <<commaSeparate2 (cpp* export)>>
export ::= "module" qconid
        // Really (qtycon|qtycls) but they are both ::= qconid.
        | qtycon [ '(' (".." | cnames | qvars) ')']
        | qvar {pin(".*")=1}

body ::= (cpp | ppragma)* open [bodyaux] close {pin=2}

private bodyaux ::= impdecls [semi topdecls]
                  | [impdecls semi] topdecls

// Do not pin semi in impdecls, that parse-conflicts with the semi in bodyaux.
private impdecls ::= impdecl [semi impdecls] {pin=1}

private topdecls ::= topdecl [semi topdecls] {pin(".*")=1}

impdecl ::= "import" ["qualified"] qconid ["as" qconid] [impspec] [cpp] {pin(".*")=1}

private impspec ::= ["hiding"] '(' [<<sequence importt>>] ')' {pin(".*")=2}

// Workaround for https://github.com/JetBrains/Grammar-Kit/issues/32.
importt ::= var
          // Really (tycon|tycls), but they are both ::= conid.
          | tycon ['(' (".." | cnames | vars) ')']

private cnames ::= <<sequence cname>>
private cname ::= var | con

vars ::= <<sequence var>>

private topdecl ::= topdecl1 ppragma*

private topdecl1 ::= typedecl
                  | datadecl
                  | newtypedecl
                  | classdecl
                  | instancedecl
                  | defaultdecl
                  | foreigndecl
                  | derivingdecl
                  | decl
                  | infixexp // TH-extension.

typedecl ::= "type" typee '=' typee {pin=1}
// Both data declaration and gadt declaration. The syntactic difference between
// the two is between typee and [deriving].
datadecl ::= "data" ["instance"] [context "=>"] typee ['=' constrs| [kindsig] ["where" gadtconstrs]] [deriving] {pin=1}
newtypedecl ::= "newtype" [context "=>"] simpletype '=' newconstr [deriving] {pin=1}
classdecl ::= "class" ctype ["where" cdecls] {pin=1}
instancedecl ::= "instance" ctype ["where" idecls] {pin=1}
defaultdecl ::= "default" <<commaSeparate typee>> {pin=1}
foreigndecl ::= "foreign" fdecl {pin=1}
derivingdecl ::= "deriving" "instance" [ppragma] ctype {pin=1}

private cdecls ::= open [cdecls1] close {pin=1}

private cdecls1 ::= cdecl [semi cdecls1]

cdecl ::= atdecl
        | (funlhs | var) rhs
        | gendecl

private atdecl ::= "type" (typee [kindsig] | ctype '=' ctype)
                 | "data" ctype [kindsig]

private idecls ::= ppragma* open [idecls1] close {pin=2}

private idecls1 ::= idecl0 [semi idecls1]

private idecl0 ::= idecl ppragma*

idecl ::= ppragma+ idecl
        | itdecl
        | (funlhs | var) rhs

private itdecl ::= "type" ctype '=' ctype
                 | ("data" | "newtype") ctype ([kindsig] gadtconstrs | ['=' constrs]) [deriving]

gendecl ::= gendeclfst
          | fixity [integertoken] (<<sequence op>>) {pin(".*")=1}

// Type signatures. Useful for go to definition.
private gendeclfst ::= vars '::' ctype  {pin(".*")=2}

fixity ::= "infix" | "infixr" | "infixl" {pin(".*")=1}

// Type already taken so we get collisions in generated code.
typee ::= btype typeeaux {pin=1}

private typeeaux ::= (singlequote (qconop | varop) | qtyconop) typee
                   | [typeeopt]

private typeeopt ::= "->" typee {pin=1}

ctype ::= foralltype
        | contexttype
        | typee

private foralltype ::=  "forall" tv_bndr* '.' ctype {pin=1}
private contexttype ::= context '=>' ctype {pin=2}

private btype ::= atype [btype]

atype ::= [singlequote] ntgtycon ['##'|'#']
        | tyvar
        | '{' fielddecls '}'
        | '(#' <<sequence ctype>> '#)'
        | '(' ['?'] ctype "::" (kind | ctype)')'
        | [singlequote] ('(' [<<sequence ctype>>] ')' | '[' <<sequence ctype>> ']')
        | integertoken
        | pstringtoken

private ntgtycon ::=  '(#' commas '#)'
                   | '(' ('->' | commas) ')'
//                   | '[:' ':]'
                   | '[' ']'
//                   | '(' '~#' ')'
                   | oqtycon

private commas ::= ','+

context ::= btype ['~' btype]

private simpletype ::= tycon tyvar*

private gadtconstrs ::= open [gadtconstrs1] close

private gadtconstrs1 ::= gadtconstr semi gadtconstrs1
                       | gadtconstr

private gadtconstr ::= <<sequence con>> "::" ctype
                     | oqtycon '{' fielddecls '}' "::" ctype

private constrs ::= constr ('|' constr)*

constr ::= (btype | '!'atype) conop (btype | '!'atype)
         | con ('{' (fielddecl ',')* fielddecl '}' | ([ppragma] ['!'] atype)*)

newconstr ::= con (atype | '{' var '::' typee '}') {pin(".*")=1}

private fielddecls ::= fielddecl [',' fielddecls] {pin(".*")=1}

private fielddecl ::= vars "::" (typee | '!' atype) {pin=2}

private deriving ::= "deriving" (dclass|<<commaSeparate dclass>>) {pin=1}
private dclass ::= qtycls

private fdecl ::= (importdecl | exportdecl) var "::" ftype

private importdecl ::= "import" callconv [safety] impent {pin=1}
private exportdecl ::= "export" callconv [expent] {pin=1}

private callconv ::= "ccall" | "stdcall" | "cplusplus"
                   | "jvm" | "dotnet" // FIXME: Add system specific call conv.

// Listed in Section 8.5.1.
private impent ::= '\"' "wrapper" '\"'
                 | '\"' "dynamic" '\"'
                 | pstringtoken
private expent ::= pstringtoken // FIXME: '\"' [cid] '\"'

// private cid ::= "regexp:[a-zA-Z][a-zA-Z_0-9]*"

private ftype ::= fatype ["->" ftype]
                | "()"

private fatype ::= qtycon atype*

private safety ::= "unsafe" | "safe" | "interruptible"

private funlhs ::= (var |'(' funlhs ')') apat+
                 | pat varop pat

private wheredecls ::= "where" decls {pin=1}

rhs ::= ('=' exp | gdrhs+) [wheredecls] {pin(".*")=1}

private gdrhs ::= guards '=' exp {pin=2}

private guards ::= '|' guard (',' guard)* {pin(".*")=1}

guard ::= pat '<-' infixexp
        | "let" decls
        | infixexp

exp ::= ppragma* infixexp ["::" [context "=>"] typee]

private infixexp ::= '-'* lexp [qop infixexp]

private lexp ::= "\\case" altslist
               | '\' apat+ "->" exp
               | "let" decls "in" exp
               | "if" exp [semi] "then" exp [semi] "else" exp
               | "case" exp "of" altslist
               | "do" open stmts close
               | "mdo" open stmts close
               | "proc" aexp "->" exp
               | fexp

private fexp ::= aexp [fexp]

private aexp ::= recordlikelhs '{' (fbind ',')* fbind '}'
               | parensplice exp ')'
               | [singlequote] qvar
               | idsplice
               | thquote qcon
               | gcon
               | literal
               // TODO: Remove semi when lexer supports TH.
               | ('[|' | '[' exp '|' [semi]) exp [semi]'|]'
//               | "[||" exp '||]'
               | '[' ("t" '|' ctype | "p" '|' infixexp |  "d" '|' open topdecls close ) '|]'
               | '(#' '#)'
               | listlike
               | parenlike

private listlike ::=  '[' exp [listlike1] ']' {pin=1}

private listlike1 ::= ('|' (squal ',')* squal)+
                    | [',' exp] '..' [exp]
                    | (',' exp)+

private parenlike ::= '(' parenlike1 {pin=1}

private parenlike1 ::= exp [parenlikeoptseq] ')'
                     | parenlike2 ')'

private parenlikeoptseq ::= ',' (exp ',')* exp {pin=1}

private parenlike2 ::= infixexp qop
                     | qop infixexp

// Emulate the aexp part of "aexp '{' (fbind ',')* fbind '}'"
private recordlikelhs ::= qvar
                        | qcon
                        | gcon
                        | '(' recordlikeparen ')'

private recordlikeparen ::= exp
                          | infixexp qop
                          | qop infixexp

private altslist ::= open [alts] close {pin=1}

private alts ::= alt [semi alts] {pin(".*")=1}

alt ::= pat ('->' exp | gdpat) [wheredecls] {pin(".*")=1}

private gdpat ::= guards '->' exp [gdpat] {pin=2}

private squal ::= transformqual
                | qual

private transformqual ::= 'then' ('group' ['by' exp] 'using' exp | exp ['by' exp])

private qual ::= pat '<-' exp
              | "let" decls
              | exp

stmts ::= (stmt semi)* exp

private stmt ::= ["rec"] "let" decls
               | [pat '<-'] exp

private fbind ::= qvar '=' exp {pin=2}

pat ::= lpat (qconop pat | ["::" ctype])

private lpat ::= '-' (integertoken|floattoken)
               | gcon apat+
               | apat

private apat ::= literal
               | '_'
               | ('!'|'~') apat
               | var ('+' integertoken | ['@' apat])
               | qcon '{' [(fpat ',')* fpat] '}'
               | '(' pat ("->" pat | [',' (pat ',')* pat]) ')'
               // Second option is quasiquotes. See TemplateHaskell00002.hs.
               | '[' (pat (',' pat)* ']' |  exp '|' [semi] exp [semi]'|]')
               | gcon

private fpat ::= qvar ['=' pat]
               | ".."  {pin(".*")=1}

private gcon ::= '[' ']'
              | '(' [commas] ')'
              | qcon

private decls ::= open [decls1] close {pin=1}

private decls1 ::= decl [semi decls1]

private decl ::= funorpatdecl
               | ppragma
               | gendecl

funorpatdecl ::= (funlhs | pat) rhs

private kindsig ::= "::" kind {pin=1}

kind ::= bkind ['->' kind]

bkind ::= akind [bkind]

akind ::= '*'
        | '!'
        | '(' kind ')'
        | pkind
        | tyvar

private pkind ::= qtycon
                | '(' [kind ',' comma_kinds1] ')'
                | '[' kind [',' comma_kinds1] ']'

private comma_kinds1 ::= kind  [',' comma_kinds1]

private literal ::= (floattoken | integertoken) ['#'|'##']
                  | (chartoken | pstringtoken) ['#']

ppragma ::= openpragma PRAGMA+ closepragma {pin(".*")=3}

// private symbol ::= symbol1 | '=' | '|' | '#' |

// Stripped down version of symbol; real definition in comment above.
private symbol1 ::= '!' | '$' | '%' | '&' | '*' | '+' | '.' | '/' | '<' | '>' | '?' | '@'
         | '\' | '^' | '-' | '~' | ':'
varid ::= (varidRegexp | "as") {
        methods=[getName getNameIdentifier getReference setName getPresentation]
    }
conid ::= conidRegexp {
        methods=[getName getNameIdentifier getReference setName getPresentation]
    }

varsym ::= VARSYMTOK | symbol1
consym ::= CONSYMTOK

// Quick documentation of various syntactic categories.
//
// special ::= '(' | ')' | ',' | ';' | '[' | ']' | '{' | '}' | thquote | backtick
//
// private reservedExpr ::= 'case' | 'do' | 'else' | 'if' | 'in' | 'let' | 'of' | 'then'
// private reservedDecl ::= 'class' | 'data' | 'default' | 'deriving' | 'foreign' | 'instance'
//                        | 'newtype' | 'type' | 'where' | 'forall'
// private reservedMeta ::= 'export' | 'foreign' | 'import' | 'infix'
//                        | 'infixl' | 'infixr'
// private reservedVar ::= '_'
// private reservedid  ::= reservedExpr | reservedDecl | reservedMeta | reservedVar
// reservedop ::= '..' | '::' | '=' | '\' | '|' | '<-' | '->' | '@' | '~' | '=>'

tyvar ::= varid
tycon ::= conid
tycls ::= conid
modulePrefix ::= (conid '.')+

qvarid ::= [modulePrefix] varid
qconid ::= [modulePrefix] conid
qtycon ::= [modulePrefix] tycon
qtycls ::= [modulePrefix] tycls
qvarsym ::= [modulePrefix] varsym
qconsym ::= [modulePrefix] consym

private var ::= varid | '(' varsym ')'
qvars ::= <<sequence qvar>>
qvar ::= qvarid | '(' qvarsym ')'
con ::= conid | '(' consym ')'
qcon ::= qconid | '(' gconsym ')'
varop ::= varsym | '`' varid '`'
qvarop ::= qvarsym | '`' qvarid '`'
conop ::= consym | '`' conid '`'
qconop ::= gconsym | '`' qconid '`'
oqtycon ::= '(' ('~' | qtyconsym) ')'        // An "ordinary" qualified tycon;
          | qtycon                           // These can appear in export lists

qtyconop ::= qtyconsym | '`' qtycon '`'
qtyconsym ::= qconsym | qvarsym | tyconsym
tyconsym ::= consym | varsym | '*' | '-'
op ::= varop | conop
qop ::= qvarop | qconop
gconsym ::= ':' | qconsym

tv_bndr ::= '(' tyvar kindsig ')'
          | tyvar

pstringtoken ::= '"' STRINGTOKEN* '"'

// Misc cross-cutting stuff.

cpp ::= CPPIF | CPPELSE | CPPENDIF

private open ::= '{'
                | WHITESPACELBRACETOK {pin(".*")=1}

private close ::= '}'
                | WHITESPACERBRACETOK
                | <<stateHackMess>>

private semi ::= ';'
               | WHITESPACESEMITOK {pin(".*")=1}

// Meta-Helpers

// Comma-separate a list of the parameter.
private meta commaSeparate ::= '(' <<p>> (',' <<p>>)* ')' {pin(".*")=1}
// Comma-separate a list of the parameter with a trailing comma.
private meta commaSeparate2 ::= '(' <<p>> (',' (<<p>> | &')'))* ')' {pin(".*")=1}

private meta sequence ::= <<p>> (',' <<p>>)*  {pin(".*")=1}
