{
  parserClass="com.haskforce.cabal.CabalParser"
  implements="com.haskforce.cabal.psi.CabalCompositeElement"
  extends="com.haskforce.cabal.psi.impl.CabalCompositeElementImpl"
  elementTypeHolderClass="com.haskforce.cabal.psi.CabalTypes"
  elementTypeClass="com.haskforce.cabal.psi.CabalElementType"
  tokenTypeClass="com.haskforce.cabal.psi.CabalTokenType"
  psiClassPrefix="Cabal"
  psiImplClassSuffix="Impl"
  psiPackage="com.haskforce.cabal.psi"
  psiImplPackage="com.haskforce.cabal.psi.impl"
  tokens=[
    comma = ','
    colon= ':'
    dot = "."
    nameKey = "name"
    versionKey = "version"
    synopsisKey = "synopsis"
    authorKey = "author"
    maintainerKey = "maintainer"
    categoryKey = "category"
    buildTypeKey = "build-type"
    cabalVersionKey = "cabal-version"
    defaultLanguageKey = "default-language"
    extraSourceFilesKey = "extra-source-files"
    buildDependsKey = "build-depends"
    otherExtensionsKey = "other-extensions"
    otherModulesKey = "other-modules"
    exposedModulesKey = "exposed-modules"
    comment='regexp:--([^\^\r\n][^\r\n]*|[\r\n])'
    varidRegexp="regexp:[a-zA-Z_\-0-9']*"
    numberRegexp="regexp:[0-9]+"
    crlf='regexp:([\r\n])'
    WHITESPACELBRACETOK="Synthetic leftbrace"
    WHITESPACERBRACETOK="Synthetic rightbrace"
  ]
}




cabal ::= keyOrConfig*

conditional ::= "if"

library ::= "library" open key+ close

executable ::= "executable" varid open key+ close

flag ::= "flag" varid open key+ close

config ::= (library | executable | flag )

keyOrConfig ::= key | config

key ::= simplekey | complexkey

varid ::= varidRegexp

dependencyName ::= varidRegexp

simplekey ::= nameKey colon varid |
              synopsisKey colon varid |
              authorKey colon varid |
              maintainerKey colon varid |
              categoryKey colon varid |
              buildTypeKey colon varid |
              cabalVersionKey colon varid |
              defaultLanguageKey colon varid |
              versionKey colon version

complexkey ::= extraSourceFilesKey colon <<commaSeparate varid>> |
               otherExtensionsKey colon <<commaSeparate varid>> |
               buildDependsKey colon <<commaSeparate varid>> |
               exposedModulesKey colon <<commaSeparate  module >> |
               otherModulesKey colon <<commaSeparate  module >>

private meta commaSeparate ::= <<p>> (',' <<p>>)* {pin(".*")=1}

private meta dotSeparate ::= <<p>> ('.' <<p>>)* {pin(".*")=1}

module ::= <<dotSeparate varid>>

number ::= numberRegexp

version ::= <<dotSeparate number>>

versionConstraint ::= "==" | "<=" | ">=" | "<" | ">"

//start using [] as optional identifier for this
dependency ::= dependencyName | dependencyName versionConstraint version

private open ::= WHITESPACELBRACETOK

private close ::= WHITESPACERBRACETOK
