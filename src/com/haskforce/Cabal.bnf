{
  parserClass="com.haskforce.cabal.CabalParser"
  implements="com.haskforce.cabal.psi.CabalCompositeElement"
  extends="com.haskforce.cabal.psi.impl.CabalCompositeElementImpl"
  elementTypeHolderClass="com.haskforce.cabal.psi.CabalTypes"
  elementTypeClass="com.haskforce.cabal.psi.CabalElementType"
  tokenTypeClass="com.haskforce.cabal.psi.CabalTokenType"
  psiClassPrefix="Cabal"
  psiImplClassSuffix="Impl"
  psiPackage="com.haskforce.cabal.psi"
  psiImplPackage="com.haskforce.cabal.psi.impl"
  tokens=[
    comma = ','
    colon= ':'
    dot = "."
    slash ="/"
    at ="@"
    eq = "=="
    gt = ">"
    lt = "<"
    gtEq = ">="
    ltEq = "<="
    and = "&&"
    true = "true"
    false = "false"
    nameKey = "name"
    versionKey = "version"
    synopsisKey = "synopsis"
    licenseKey = "license"
    authorKey = "author"
    maintainerKey = "maintainer"
    categoryKey = "category"
    buildTypeKey = "build-type"
    licenseFileKey ="license-file"
    homepageKey ="homepage"
    buildableKey = "buildable"
    bugReportsKey ="bug-reports"
    packageKey ="package"
    typeKey = "type"
    testModuleKey = "test-module"
    licenseFilesKey ="license-files"
    stabilityKey ="stability"
    dataDirKey ="data-dir"
    copyrightKey ="copyright"
    authorKey ="author"
    dataFilesKey ="data-files"
    testedWithKey ="tested-with"
    maintainerKey ="maintainer"
    cabalVersionKey = "cabal-version"
    defaultLanguageKey = "default-language"
    extraSourceFilesKey = "extra-source-files"
    extraDocFilesKey = "extra-doc-files"
    extraTmpFilesKey = "extra-tmp-files"
    buildDependsKey = "build-depends"
    otherExtensionsKey = "other-extensions"
    otherModulesKey = "other-modules"
    exposedModulesKey = "exposed-modules"
    exposedKey = "exposed"
    hsSourceDirsKey = "hs-source-dirs"
    extensionsKey = "extensions"
    ghcOptionsKey = "ghc-options"
    ghcProfOptionsKey = "ghc-prof-options"
    ghcSharedOptionsKey = "ghc-shared-options"
    buildToolsKey = "build-tools"
    includesKey = "includes"
    mainIsKey = "main-is"
    installIncludesKey = "install-includes"
    includeDirsKey = "include-dirs"
    cSourcesKey = "c-sources"
    jsSourcesKey = "js-sources"
    extraLibrariesKey = "extra-libraries"
    extraGhciLibrariesKey = "extra-ghci-libraries"
    extraLibDirsKey = "extra-lib-dirs"
    ccOptionsKey = "cc-options"
    ldOptionsKey = "ld-options"
    pkgConfigDependsKey = "pkg-config-depends"
    frameworksKey = "frameworks"
    comment='regexp:--([^\^\r\n][^\r\n]*|[\r\n])'
    varidRegexp="regexp:[a-zA-Z_\-0-9'()]*"
    numberRegexp="regexp:[0-9]+"
    urlRegexp = "regexp:[a-zA-Z_\-0-9./]*"
    addressRegexp="regexp:[a-zA-Z_\-0-9.@]*"
    crlf='regexp:([\r\n])'
    WHITESPACELBRACETOK="Synthetic leftbrace"
    WHITESPACERBRACETOK="Synthetic rightbrace"
  ]
}



cabal ::= keyOrConfig*

conditional ::= "if"

library ::= "library" open libraryKeys+ close

libraryKeys ::= librarySpecificKeys | buildInformation

executableSpecificKeys ::= mainIsKey colon fileName

executableKeys ::= executableSpecificKeys | buildInformation

librarySpecificKeys ::= exposedModulesKey colon <<commaSeparate  module >> |
                        exposedKey colon bool

executable ::= "executable" varid open executableKeys+ close

testSuite ::= "test-suite" varid open testSuiteKeys+ close

testSuiteKeys ::= typeKey colon testInterface | mainIsKey colon fileName | testModuleKey colon varid


config ::= (library | executable | testSuite )

keyOrConfig ::= key | config

varid ::= varidRegexp

dependencyName ::= varidRegexp

buildType ::= "simple" | "configure" | "make" | "custom"

testInterface ::= "exitcode-stdio-1.0" | "detailed-0.9"

// Should we get these regexes finer grained? Now they match nearly anything I guess.
fileName ::= varid "." varid

address ::= addressRegexp

url ::= urlRegexp

directory ::= <<slashSeparate varid>>

compiler ::= varidRegexp

bool ::= true | false

key ::= nameKey colon varid |
        synopsisKey colon varid |
        licenseKey colon varid |
        authorKey colon varid |
        maintainerKey colon varid |
        categoryKey colon varid |
        copyrightKey colon varid |
        maintainerKey colon address |
        buildTypeKey colon buildType |
        stabilityKey colon varid |
        homepageKey colon url |
        bugReportsKey colon url |
        packageKey colon url |
        cabalVersionKey colon gtEq version |
        defaultLanguageKey colon varid |
        licenseFileKey colon fileName |
        dataDirKey colon directory |
        versionKey colon version |
        extraSourceFilesKey colon <<commaSeparate varid>> |
        extraDocFilesKey colon <<commaSeparate varid>> |
        extraTmpFilesKey colon <<commaSeparate varid>> |
        otherExtensionsKey colon <<commaSeparate varid>> |
        testedWithKey colon <<commaSeparate compiler>> |
        dataFilesKey colon <<commaSeparate fileName>> |
        licenseFilesKey colon <<commaSeparate fileName>> |



buildInformation ::= buildDependsKey colon <<commaSeparate dependency>> |
                     otherModulesKey colon <<commaSeparate  module >> |
                     hsSourceDirsKey colon <<commaSeparate directory>> |
                     extensionsKey colon <<commaSeparate varid>> |
                     buildToolsKey colon <<commaSeparate dependency>> |
                     buildableKey colon bool |
                     ghcOptionsKey colon <<dashSeparate varid>> |
                     ghcProfOptionsKey colon <<dashSeparate varid>> |
                     ghcSharedOptionsKey colon <<dashSeparate varid>> |
                     includesKey colon <<commaSeparate fileName>> |
                     installIncludesKey colon <<commaSeparate fileName>> |
                     includeDirsKey colon <<commaSeparate directory>> |
                     cSourcesKey colon <<commaSeparate fileName>> |
                     jsSourcesKey colon <<commaSeparate fileName>> |
                     extraLibrariesKey colon <<commaSeparate varid>> |
                     extraGhciLibrariesKey colon <<commaSeparate varid>> |
                     extraLibDirsKey colon <<commaSeparate directory>> |
                     ccOptionsKey colon <<commaSeparate varid>> |
                     ldOptionsKey colon <<commaSeparate varid>> |
                     pkgConfigDependsKey colon <<commaSeparate dependency>> |
                     frameworksKey colon <<commaSeparate varid>>

private meta commaSeparate ::= <<p>> (',' <<p>>)* {pin(".*")=1}

private meta dotSeparate ::= <<p>> ('.' <<p>>)* {pin(".*")=1}

private meta dashSeparate ::= <<p>> ('-' <<p>>)* {pin(".*")=1}

private meta slashSeparate ::= <<p>> ('/' <<p>>)* {pin(".*")=1}

module ::= <<dotSeparate varid>>

number ::= numberRegexp

version ::= <<dotSeparate number>>

versionConstraint ::= eq | gt | lt | gtEq | ltEq

dependency ::= dependencyName [versionConstraint version [and versionConstraint version]]

private open ::= WHITESPACELBRACETOK

private close ::= WHITESPACERBRACETOK
