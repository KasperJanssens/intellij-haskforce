{
  parserClass="com.haskforce.cabal.CabalParser"
  implements="com.haskforce.cabal.psi.CabalCompositeElement"
  extends="com.haskforce.cabal.psi.impl.CabalCompositeElementImpl"
  elementTypeHolderClass="com.haskforce.cabal.psi.CabalTypes"
  elementTypeClass="com.haskforce.cabal.psi.CabalElementType"
  tokenTypeClass="com.haskforce.cabal.psi.CabalTokenType"
  psiClassPrefix="Cabal"
  psiImplClassSuffix="Impl"
  psiPackage="com.haskforce.cabal.psi"
  psiImplPackage="com.haskforce.cabal.psi.impl"
  tokens=[
    comma = ','
    colon= ':'
    dot = "."
    eq = "=="
    gt = ">"
    lt = "<"
    gtEq = ">="
    ltEq = "<="
    and = "&&"
    nameKey = "name"
    versionKey = "version"
    synopsisKey = "synopsis"
    licenseKey = "license"
    authorKey = "author"
    maintainerKey = "maintainer"
    categoryKey = "category"
    buildTypeKey = "build-type"
    licenseFileKey ="license-file"
    homepageKey ="homepage"
    bugReportsKey ="bug-reports"
    packageKey ="package"
    licenseFilesKey ="license-files"
    stabilityKey ="stability"
    dataDirKey ="data-dir"
    copyrightKey ="copyright"
    authorKey ="author"
    dataFilesKey ="data-files"
    testedWithKey ="tested-with"
    maintainerKey ="maintainer"
    cabalVersionKey = "cabal-version"
    defaultLanguageKey = "default-language"
    extraSourceFilesKey = "extra-source-files"
    extraDocFilesKey = "extra-doc-files"
    extraTmpFilesKey = "extra-tmp-files"
    buildDependsKey = "build-depends"
    otherExtensionsKey = "other-extensions"
    otherModulesKey = "other-modules"
    exposedModulesKey = "exposed-modules"
    comment='regexp:--([^\^\r\n][^\r\n]*|[\r\n])'
    varidRegexp="regexp:[a-zA-Z_\-0-9']*"
    numberRegexp="regexp:[0-9]+"
    crlf='regexp:([\r\n])'
    WHITESPACELBRACETOK="Synthetic leftbrace"
    WHITESPACERBRACETOK="Synthetic rightbrace"
  ]
}



cabal ::= keyOrConfig*

conditional ::= "if"

library ::= "library" open key+ close

executable ::= "executable" varid open key+ close

flag ::= "flag" varid open key+ close

config ::= (library | executable | flag )

keyOrConfig ::= key | config

key ::= simplekey | complexkey

varid ::= varidRegexp

dependencyName ::= varidRegexp

buildType ::= "simple" | "configure" | "make" | "custom"

fileName ::= varidRegexp

address ::= varidRegexp

url ::= varidRegexp

directory ::= varidRegexp

compiler ::= varidRegexp

simplekey ::= nameKey colon varid |
              synopsisKey colon varid |
              licenseKey colon varid |
              authorKey colon varid |
              maintainerKey colon varid |
              categoryKey colon varid |
              copyrightKey colon varid |
              maintainerKey colon address |
              buildTypeKey colon buildType |
              stabilityKey colon varid |
              homepageKey colon url |
              bugReportsKey colon url |
              packageKey colon url |
              cabalVersionKey colon gtEq version |
              defaultLanguageKey colon varid |
              licenseFileKey colon fileName |
              dataDirKey colon directory |
              versionKey colon version

complexkey ::= extraSourceFilesKey colon <<commaSeparate varid>> |
               extraDocFilesKey colon <<commaSeparate varid>> |
               extraTmpFilesKey colon <<commaSeparate varid>> |
               otherExtensionsKey colon <<commaSeparate varid>> |
               testedWithKey colon <<commaSeparate compiler>> |
               dataFilesKey colon <<commaSeparate fileName>> |
               licenseFilesKey colon <<commaSeparate fileName>> |
               buildDependsKey colon <<commaSeparate dependency>> |
               exposedModulesKey colon <<commaSeparate  module >> |
               otherModulesKey colon <<commaSeparate  module >>

private meta commaSeparate ::= <<p>> (',' <<p>>)* {pin(".*")=1}

private meta dotSeparate ::= <<p>> ('.' <<p>>)* {pin(".*")=1}

module ::= <<dotSeparate varid>>

number ::= numberRegexp

version ::= <<dotSeparate number>>

versionConstraint ::= eq | gt | lt | gtEq | ltEq

dependency ::= dependencyName [versionConstraint version [and versionConstraint version]]

private open ::= WHITESPACELBRACETOK

private close ::= WHITESPACERBRACETOK
