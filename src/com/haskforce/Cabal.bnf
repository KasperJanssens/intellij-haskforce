{
  parserClass="com.haskforce.cabal.CabalParser"
  implements="com.haskforce.cabal.psi.CabalCompositeElement"
  extends="com.haskforce.cabal.psi.impl.CabalCompositeElementImpl"
  elementTypeHolderClass="com.haskforce.cabal.psi.CabalTypes"
  elementTypeClass="com.haskforce.cabal.psi.CabalElementType"
  tokenTypeClass="com.haskforce.cabal.psi.CabalTokenType"
  psiClassPrefix="Cabal"
  psiImplClassSuffix="Impl"
  psiPackage="com.haskforce.cabal.psi"
  psiImplPackage="com.haskforce.cabal.psi.impl"
  tokens=[
    comma = ','
    colon= ':'
    dot = "."
    comment='regexp:--([^\^\r\n][^\r\n]*|[\r\n])'
    varidRegexp="regexp:[a-zA-Z_\-0-9']*"
    numberRegexp="regexp:[0-9]+"
    crlf='regexp:([\r\n])'
    WHITESPACELBRACETOK="Synthetic leftbrace"
    WHITESPACERBRACETOK="Synthetic rightbrace"
  ]
}



cabal ::= keyOrConfig*

conditional ::= "if"

library ::= "library" open [simplekey] close

executable ::= "executable" varid open [simplekey] close

flag ::= "flag" varid open [simplekey] close

config ::= (library | executable | flag )

keyOrConfig ::= key | config

key ::= simplekey | complexkey

simplekeyname ::= ("name" | "synopsis" | "author" | "maintainer" | "category" | "build-type" | "cabal-version" | "default-language")

complexkeyname ::= ("extra-source-files" | "build-depends" | "other-extensions" | "other-modules" )

varid ::= varidRegexp

dependencyName ::= varidRegexp

simplekey ::= simplekeyname colon varid | "version" colon version

complexkey ::= complexkeyname colon <<commaSeparate varid>> | "exposed-modules" colon <<commaSeparate  module >>

private meta commaSeparate ::= <<p>> (',' <<p>>)* {pin(".*")=1}

private meta dotSeparate ::= <<p>> ('.' <<p>>)* {pin(".*")=1}

module ::= <<dotSeparate varid>>

number ::= numberRegexp

version ::= <<dotSeparate number>>

versionConstraint ::= "==" | "<=" | ">=" | "<" | ">"

dependency ::= dependencyName | dependencyName versionConstraint version

private open ::= WHITESPACELBRACETOK

private close ::= WHITESPACERBRACETOK
