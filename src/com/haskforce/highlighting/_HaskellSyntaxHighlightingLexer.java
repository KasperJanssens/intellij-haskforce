/* The following code was generated by JFlex 1.4.3 on 5/4/14 2:31 PM */

package com.haskforce.highlighting;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;

/**
 * Hand-written lexer used for syntax highlighting in IntelliJ.
 *
 * We currently share token names with the grammar-kit generated
 * parser.
 *
 * Derived from the lexer generated by Grammar-Kit at 29 April 2014.
 */


/*
 * To generate sources from this file -
 *   Click Tools->Run JFlex generator.
 *
 * Command-Shift-G should be the keyboard shortcut, but that is the same
 * shortcut as find previous.
 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/4/14 2:31 PM from the specification file
 * <tt>/Users/pj/src/fsp/work/intellij-haskforce/src/com/haskforce/highlighting/_HaskellSyntaxHighlightingLexer.flex</tt>
 */
public class _HaskellSyntaxHighlightingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int INSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\32\1\3\1\1\22\0\1\3\1\73\1\70"+
    "\1\27\1\74\1\75\1\57\1\7\1\60\1\61\1\76\1\24\1\63"+
    "\1\25\1\21\1\77\1\11\7\14\2\5\1\103\1\64\1\54\1\56"+
    "\1\55\1\100\1\101\4\20\1\23\1\20\10\6\1\13\10\6\1\16"+
    "\2\6\1\65\1\10\1\66\1\26\1\4\1\67\1\35\1\17\1\33"+
    "\1\37\1\22\1\31\1\45\1\52\1\30\2\4\1\34\1\47\1\44"+
    "\1\12\1\46\1\53\1\42\1\36\1\40\1\41\1\43\1\50\1\15"+
    "\1\51\1\4\1\71\1\62\1\72\1\102\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\3\1\10\1\3\1\11\1\12\1\13\1\14"+
    "\14\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\4\45\1\46\2\47\1\50\3\0\1\51\1\0"+
    "\1\52\2\0\1\53\1\54\2\3\1\55\1\56\1\57"+
    "\3\0\1\60\1\61\5\3\1\62\1\63\11\3\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\3\0\2\72\1\0"+
    "\2\73\2\4\2\3\2\74\1\75\2\0\1\76\1\77"+
    "\6\3\1\100\12\3\1\101\1\3\1\102\2\0\5\3"+
    "\1\103\2\3\1\104\1\105\1\106\6\3\1\107\1\0"+
    "\1\110\3\3\1\111\4\3\1\112\2\3\1\113\1\114"+
    "\1\115\1\116\1\3\1\117\4\3\1\120\1\121\2\3"+
    "\1\122\1\123\1\3\1\124\1\3\1\125\1\126\1\3"+
    "\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\314\0\u03b8"+
    "\0\314\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\314"+
    "\0\u07b4\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\u07f8\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\314\0\u094c\0\314\0\u0990\0\314\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\314\0\u0aa0\0\314\0\u0ae4\0\u0b28\0\u0154\0\314"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\314\0\314\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0154\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0154"+
    "\0\u0154\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\314\0\314\0\u1100\0\314\0\314\0\314"+
    "\0\u0990\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1210\0\314\0\u0a5c"+
    "\0\u0ae4\0\u0b28\0\u1254\0\u1298\0\u12dc\0\314\0\u1320\0\u1364"+
    "\0\u13a8\0\314\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u0154\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\314\0\u1870\0\u0154\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u0154\0\u1a90"+
    "\0\u1ad4\0\u0154\0\u0154\0\u0154\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\314\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u0154\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u0154\0\u1f14\0\u1f58"+
    "\0\u0154\0\314\0\u0154\0\u0154\0\u1f9c\0\u0154\0\u1fe0\0\u2024"+
    "\0\u2068\0\u20ac\0\u0154\0\u0154\0\u20f0\0\u2134\0\u0154\0\u0154"+
    "\0\u2178\0\u0154\0\u21bc\0\u0154\0\u0154\0\u2200\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\10\1\7\1\6\1\10\1\6\1\10\1\15"+
    "\1\16\1\10\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\4\1\25\1\26\1\27\1\6\1\30\1\31\3\6"+
    "\1\32\2\6\1\33\1\34\1\6\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\25\67"+
    "\1\70\43\67\1\71\1\72\11\67\2\73\1\74\5\73"+
    "\1\75\57\73\1\76\13\73\105\0\3\5\104\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\21\6"+
    "\35\0\1\7\3\0\1\7\2\0\1\7\4\0\1\77"+
    "\2\100\64\0\4\10\1\0\10\10\1\0\2\10\4\0"+
    "\2\10\1\0\21\10\30\0\7\101\1\102\1\103\73\101"+
    "\57\0\1\104\31\0\1\7\3\0\1\7\2\105\1\7"+
    "\2\106\2\0\1\77\2\100\64\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\1\6\1\107\1\0\21\6\51\0"+
    "\1\110\66\0\4\6\1\0\4\6\1\111\3\6\1\0"+
    "\2\6\4\0\2\6\1\0\1\6\1\112\17\6\55\0"+
    "\1\113\27\0\1\114\14\0\1\115\33\0\1\116\2\0"+
    "\1\117\2\0\1\120\57\0\4\6\1\0\10\6\1\0"+
    "\2\6\4\0\1\6\1\121\1\0\11\6\1\122\2\6"+
    "\1\123\4\6\34\0\4\6\1\0\1\6\1\124\6\6"+
    "\1\0\2\6\4\0\2\6\1\0\21\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\1\6"+
    "\1\125\1\126\16\6\34\0\4\6\1\0\10\6\1\0"+
    "\1\127\1\6\4\0\2\6\1\0\21\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\3\6"+
    "\1\130\15\6\34\0\4\6\1\0\1\6\1\131\6\6"+
    "\1\0\1\132\1\6\4\0\2\6\1\0\2\6\1\133"+
    "\16\6\34\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\2\6\1\0\16\6\1\134\1\135\1\6\34\0\4\6"+
    "\1\0\10\6\1\0\1\136\1\6\4\0\2\6\1\0"+
    "\21\6\34\0\4\6\1\0\1\6\1\137\6\6\1\0"+
    "\2\6\4\0\2\6\1\0\21\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\17\6\1\140"+
    "\1\6\34\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\1\141\1\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\6\6\1\142\12\6"+
    "\55\0\1\143\133\0\1\144\53\0\1\145\161\0\1\146"+
    "\25\67\1\0\43\67\2\0\11\67\72\0\1\147\36\0"+
    "\1\150\56\0\2\73\1\0\5\73\1\151\57\73\1\0"+
    "\13\73\1\0\1\152\1\153\1\152\26\0\1\152\35\0"+
    "\1\73\20\0\1\154\3\0\1\154\2\0\1\154\74\0"+
    "\1\155\3\0\1\155\2\0\1\155\7\0\2\156\65\0"+
    "\1\157\74\0\2\101\1\0\4\101\1\160\74\101\11\0"+
    "\1\161\2\0\1\161\74\0\1\162\3\0\1\162\2\0"+
    "\1\162\2\0\2\162\1\0\2\162\5\0\1\162\1\0"+
    "\1\162\1\0\1\162\1\0\1\162\50\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\13\6\1\163"+
    "\5\6\34\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\2\6\1\0\3\6\1\164\15\6\30\0\1\165\2\166"+
    "\23\165\1\167\55\165\34\0\1\170\7\0\1\171\131\0"+
    "\1\172\42\0\1\173\56\0\4\6\1\0\10\6\1\0"+
    "\2\6\4\0\1\6\1\174\1\0\3\6\1\175\15\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\13\6\1\176\5\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\7\6\1\177\11\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\2\6\1\200\16\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\3\6\1\201\15\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\5\6\1\202\13\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\1\6\1\203\1\0\7\6\1\204"+
    "\11\6\34\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\2\6\1\0\5\6\1\205\13\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\13\6\1\206"+
    "\5\6\34\0\4\6\1\0\10\6\1\0\1\207\1\6"+
    "\4\0\2\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\15\6\1\210\3\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\4\6\1\211\14\6\34\0\4\6\1\0\10\6"+
    "\1\0\1\212\1\6\4\0\2\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\2\6\1\0"+
    "\4\6\1\213\14\6\34\0\4\6\1\0\10\6\1\0"+
    "\2\6\4\0\2\6\1\0\2\6\1\214\16\6\57\0"+
    "\1\215\55\0\1\152\1\153\1\152\26\0\1\152\52\0"+
    "\3\153\4\0\1\73\21\0\1\153\56\0\1\154\3\0"+
    "\1\154\2\0\1\154\5\0\2\100\65\0\1\155\3\0"+
    "\1\155\2\0\1\155\73\0\4\6\1\0\1\6\1\216"+
    "\6\6\1\0\2\6\4\0\2\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\1\217\1\6\4\0\2\6"+
    "\1\0\21\6\30\0\1\165\2\0\101\165\1\167\2\0"+
    "\101\167\36\0\1\220\104\0\1\221\44\0\1\173\2\0"+
    "\101\173\4\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\1\222\1\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\5\6\1\223\13\6"+
    "\34\0\4\6\1\0\1\6\1\224\6\6\1\0\2\6"+
    "\4\0\2\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\1\225\1\6\4\0\2\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\2\6\1\0"+
    "\3\6\1\226\15\6\34\0\4\6\1\0\10\6\1\0"+
    "\1\227\1\6\4\0\2\6\1\0\21\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\2\6"+
    "\1\230\16\6\34\0\4\6\1\0\10\6\1\0\2\6"+
    "\4\0\1\231\1\6\1\0\21\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\2\6\1\232"+
    "\16\6\34\0\4\6\1\0\10\6\1\0\1\233\1\6"+
    "\4\0\2\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\11\6\1\234\7\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\5\6\1\235\13\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\6\6\1\236\12\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\7\6\1\237\11\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\1\240\1\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\2\6\1\0"+
    "\1\6\1\241\17\6\34\0\4\6\1\0\10\6\1\0"+
    "\2\6\4\0\2\6\1\0\7\6\1\242\11\6\52\0"+
    "\1\243\111\0\1\244\57\0\4\6\1\0\4\6\1\245"+
    "\3\6\1\0\2\6\4\0\2\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\2\6\1\0"+
    "\2\6\1\246\16\6\34\0\4\6\1\0\10\6\1\0"+
    "\2\6\4\0\2\6\1\0\7\6\1\247\11\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\1\250\1\6"+
    "\1\0\21\6\34\0\4\6\1\0\10\6\1\0\2\6"+
    "\4\0\2\6\1\0\3\6\1\251\15\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\6\6"+
    "\1\252\12\6\34\0\4\6\1\0\10\6\1\0\2\6"+
    "\4\0\2\6\1\0\10\6\1\253\10\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\16\6"+
    "\1\254\2\6\34\0\4\6\1\0\10\6\1\0\2\6"+
    "\4\0\2\6\1\0\1\6\1\255\17\6\34\0\4\6"+
    "\1\0\10\6\1\0\1\256\1\6\4\0\2\6\1\0"+
    "\21\6\34\0\4\6\1\0\10\6\1\0\2\6\4\0"+
    "\2\6\1\0\11\6\1\257\7\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\1\260\1\6\1\0\21\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\5\6\1\261\13\6\61\0\1\262\56\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\1\6"+
    "\1\263\5\6\1\264\11\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\11\6\1\265\7\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\5\6\1\266\13\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\12\6\1\267\6\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\1\6\1\270\17\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\1\271\1\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\2\6\1\0"+
    "\13\6\1\272\5\6\34\0\4\6\1\0\10\6\1\0"+
    "\1\273\1\6\4\0\2\6\1\0\21\6\34\0\4\6"+
    "\1\0\10\6\1\0\2\6\4\0\2\6\1\0\12\6"+
    "\1\274\6\6\34\0\4\6\1\0\10\6\1\0\2\6"+
    "\4\0\1\6\1\275\1\0\21\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\1\276\20\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\11\6\1\277\7\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\5\6\1\300\13\6"+
    "\34\0\4\6\1\0\10\6\1\0\2\6\4\0\2\6"+
    "\1\0\11\6\1\301\7\6\34\0\4\6\1\0\10\6"+
    "\1\0\1\302\1\6\4\0\2\6\1\0\21\6\34\0"+
    "\4\6\1\0\10\6\1\0\2\6\4\0\1\303\1\6"+
    "\1\0\21\6\34\0\4\6\1\0\10\6\1\0\1\304"+
    "\1\6\4\0\2\6\1\0\21\6\34\0\4\6\1\0"+
    "\10\6\1\0\2\6\4\0\2\6\1\0\12\6\1\305"+
    "\6\6\34\0\4\6\1\0\10\6\1\0\1\306\1\6"+
    "\4\0\2\6\1\0\21\6\34\0\4\6\1\0\10\6"+
    "\1\0\2\6\4\0\2\6\1\0\4\6\1\307\14\6"+
    "\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\1\1\1\11\16\1\1\11"+
    "\1\1\12\11\1\1\11\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\0\1\11\1\0\1\11\2\0\1\1"+
    "\1\11\3\1\2\11\3\0\22\1\2\11\1\1\3\11"+
    "\3\0\2\1\1\0\1\11\6\1\1\11\1\1\2\0"+
    "\1\11\22\1\1\11\2\1\2\0\21\1\1\11\1\0"+
    "\15\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int commentLevel;

  public _HaskellSyntaxHighlightingLexer() {
    this((java.io.Reader)null);
  }


  public _HaskellSyntaxHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellSyntaxHighlightingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return BACKSLASH;
          }
        case 88: break;
        case 87: 
          { return QUALIFIED;
          }
        case 89: break;
        case 64: 
          { return LET;
          }
        case 90: break;
        case 17: 
          { return LPAREN;
          }
        case 91: break;
        case 33: 
          { return QUESTION;
          }
        case 92: break;
        case 15: 
          { return EQUALS;
          }
        case 93: break;
        case 37: 
          { return COMMENTTEXT;
          }
        case 94: break;
        case 23: 
          { return RBRACKET;
          }
        case 95: break;
        case 30: 
          { return PERCENT;
          }
        case 96: break;
        case 40: 
          { yybegin(YYINITIAL);
                                        return DOUBLEQUOTE;
          }
        case 97: break;
        case 36: 
          { return COLON;
          }
        case 98: break;
        case 52: 
          { return LEFTARROW;
          }
        case 99: break;
        case 13: 
          { return LESSTHAN;
          }
        case 100: break;
        case 73: 
          { return CLASSTOKEN;
          }
        case 101: break;
        case 65: 
          { return OPENPRAGMA;
          }
        case 102: break;
        case 62: 
          { return CLOSEPRAGMA;
          }
        case 103: break;
        case 85: 
          { return INSTANCE;
          }
        case 104: break;
        case 4: 
          { return INTEGERTOKEN;
          }
        case 105: break;
        case 44: 
          { return DOUBLEPERIOD;
          }
        case 106: break;
        case 11: 
          { return CARET;
          }
        case 107: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 108: break;
        case 75: 
          { return EXPORTTOKEN;
          }
        case 109: break;
        case 47: 
          { return CLOSECOM;
          }
        case 110: break;
        case 25: 
          { yybegin(INSTRING);
                        return DOUBLEQUOTE;
          }
        case 111: break;
        case 22: 
          { return LBRACKET;
          }
        case 112: break;
        case 54: 
          { commentLevel = 1;
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 113: break;
        case 6: 
          { return SINGLEQUOTE;
          }
        case 114: break;
        case 86: 
          { return DERIVING;
          }
        case 115: break;
        case 21: 
          { return SEMICOLON;
          }
        case 116: break;
        case 20: 
          { return COMMA;
          }
        case 117: break;
        case 68: 
          { return DATA;
          }
        case 118: break;
        case 41: 
          { return THQUOTE;
          }
        case 119: break;
        case 58: 
          { return FLOATTOKEN;
          }
        case 120: break;
        case 80: 
          { return MODULE;
          }
        case 121: break;
        case 9: 
          { return PLUS;
          }
        case 122: break;
        case 3: 
          { return VARIDREGEXP;
          }
        case 123: break;
        case 39: 
          { return BADSTRINGTOKEN;
          }
        case 124: break;
        case 69: 
          { return TYPE;
          }
        case 125: break;
        case 8: 
          { return PERIOD;
          }
        case 126: break;
        case 14: 
          { return GREATERTHAN;
          }
        case 127: break;
        case 56: 
          { commentLevel--;
                        if (commentLevel == 0) {
                            yybegin(YYINITIAL);
                        }
                        return CLOSECOM;
          }
        case 128: break;
        case 12: 
          { return HASH;
          }
        case 129: break;
        case 31: 
          { return ASTERISK;
          }
        case 130: break;
        case 76: 
          { return CPPENDIF;
          }
        case 131: break;
        case 83: 
          { return DEFAULT;
          }
        case 132: break;
        case 51: 
          { return DO;
          }
        case 133: break;
        case 49: 
          { return IN;
          }
        case 134: break;
        case 29: 
          { return DOLLAR;
          }
        case 135: break;
        case 63: 
          { return CPPIF;
          }
        case 136: break;
        case 60: 
          { return COMMENT;
          }
        case 137: break;
        case 84: 
          { return NEWTYPE;
          }
        case 138: break;
        case 82: 
          { return FOREIGN;
          }
        case 139: break;
        case 27: 
          { return RBRACE;
          }
        case 140: break;
        case 16: 
          { return AMPERSAND;
          }
        case 141: break;
        case 24: 
          { return BACKTICK;
          }
        case 142: break;
        case 45: 
          { return DASHES;
          }
        case 143: break;
        case 81: 
          { return HIDING;
          }
        case 144: break;
        case 43: 
          { return OF;
          }
        case 145: break;
        case 57: 
          { commentLevel++;
                        return OPENCOM;
          }
        case 146: break;
        case 72: 
          { return INFIX;
          }
        case 147: break;
        case 34: 
          { return AMPERSAT;
          }
        case 148: break;
        case 26: 
          { return LBRACE;
          }
        case 149: break;
        case 35: 
          { return TILDE;
          }
        case 150: break;
        case 61: 
          { return HADDOCK;
          }
        case 151: break;
        case 19: 
          { return PIPE;
          }
        case 152: break;
        case 53: 
          { return DOUBLEARROW;
          }
        case 153: break;
        case 32: 
          { return SLASH;
          }
        case 154: break;
        case 74: 
          { return WHERE;
          }
        case 155: break;
        case 77: 
          { return INFIXL;
          }
        case 156: break;
        case 79: 
          { return IMPORT;
          }
        case 157: break;
        case 38: 
          { return STRINGTOKEN;
          }
        case 158: break;
        case 78: 
          { return INFIXR;
          }
        case 159: break;
        case 28: 
          { return EXLAMATION;
          }
        case 160: break;
        case 66: 
          { return ELSE;
          }
        case 161: break;
        case 48: 
          { return IF;
          }
        case 162: break;
        case 71: 
          { return CPPELSE;
          }
        case 163: break;
        case 70: 
          { return THEN;
          }
        case 164: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 165: break;
        case 46: 
          { return RIGHTARROW;
          }
        case 166: break;
        case 10: 
          { return MINUS;
          }
        case 167: break;
        case 59: 
          { return CHARTOKEN;
          }
        case 168: break;
        case 67: 
          { return CASE;
          }
        case 169: break;
        case 18: 
          { return RPAREN;
          }
        case 170: break;
        case 55: 
          { return DOUBLECOLON;
          }
        case 171: break;
        case 50: 
          { return AS;
          }
        case 172: break;
        case 42: 
          { return NULLCHARACTER;
          }
        case 173: break;
        case 5: 
          { return CONID;
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
