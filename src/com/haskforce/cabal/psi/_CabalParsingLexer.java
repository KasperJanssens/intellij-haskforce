/* The following code was generated by JFlex 1.4.3 on 2/27/15 3:14 PM */

package com.haskforce.cabal.psi;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.cabal.psi.CabalTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/27/15 3:14 PM from the specification file
 * <tt>/home/kasper/sources/intellij-haskforce/src/com/haskforce/cabal/psi/_CabalParsingLexer.flex</tt>
 */
public class _CabalParsingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VARID = 10;
  public static final int FREEFORM = 6;
  public static final int FILEPATH = 12;
  public static final int ININDENTATIONCONTEXT = 14;
  public static final int FINDCOLON = 8;
  public static final int CONDITION = 16;
  public static final int YYINITIAL = 0;
  public static final int FINDINDENTATIONCONTEXT = 2;
  public static final int CONFIGNAME = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\53\1\0\4\0"+
    "\1\51\1\6\2\0\1\12\1\0\1\45\1\4\1\10\1\7\12\11"+
    "\1\52\1\0\1\50\1\46\1\47\2\0\5\6\1\44\15\6\1\43"+
    "\6\6\3\0\1\5\1\6\1\0\1\17\1\15\1\26\1\34\1\22"+
    "\1\21\1\24\1\37\1\14\1\41\1\42\1\13\1\32\1\35\1\33"+
    "\1\31\1\6\1\16\1\23\1\30\1\27\1\36\1\40\1\25\1\20"+
    "\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\1\3\1\4\1\0\1\5"+
    "\2\6\1\7\23\0\1\10\1\1\1\2\1\7\1\11"+
    "\2\12\1\3\1\13\1\14\2\15\2\3\1\16\1\0"+
    "\1\17\1\20\1\0\1\4\1\21\1\5\1\7\3\0"+
    "\1\22\34\0\2\3\1\23\1\24\1\25\1\26\2\27"+
    "\45\0\2\3\7\0\1\30\1\0\1\31\15\0\1\32"+
    "\11\0\1\33\4\0\1\3\1\34\46\0\1\35\7\0"+
    "\1\36\27\0\1\37\11\0\1\40\1\41\16\0\1\42"+
    "\16\0\1\43\1\0\1\44\5\0\1\45\1\0\1\46"+
    "\5\0\1\47\16\0\1\50\6\0\1\51\13\0\1\52"+
    "\3\0\1\53\7\0\1\54\12\0\1\55\3\0\1\56"+
    "\3\0\1\57\15\0\1\60\2\0\1\61\3\0\1\62"+
    "\1\63\6\0\1\64\5\0\1\65\1\0\1\66\3\0"+
    "\1\67\2\0\1\70\3\0\1\71\3\0\1\72\1\0"+
    "\1\73\11\0\1\74\1\0\1\75\1\76\1\77\4\0"+
    "\1\100\1\0\1\101\22\0\1\102\1\0\1\103\1\104"+
    "\11\0\1\105\2\0\1\106\3\0\1\107\13\0\1\110"+
    "\1\0\1\111\2\0\1\112\1\113\1\114\11\0\1\115"+
    "\1\0\1\116\1\117\1\120\4\0\1\121\1\0\1\122"+
    "\1\123\1\0\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u01b8"+
    "\0\u0528\0\u0554\0\u0554\0\u01b8\0\u0580\0\u01b8\0\u05ac\0\u01b8"+
    "\0\u01b8\0\u05d8\0\u0604\0\u0630\0\u065c\0\u01b8\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u01b8\0\u0764\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\u01b8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u0d3c\0\u01b8\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u01b8\0\u1550\0\u01b8\0\u157c"+
    "\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc"+
    "\0\u1708\0\u1734\0\u1760\0\u178c\0\u01b8\0\u17b8\0\u17e4\0\u1810"+
    "\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u01b8\0\u1944"+
    "\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u05ac\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u05ac\0\u20a8\0\u20d4\0\u2100\0\u212c"+
    "\0\u2158\0\u2184\0\u21b0\0\u01b8\0\u21dc\0\u2208\0\u2234\0\u2260"+
    "\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0"+
    "\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520"+
    "\0\u254c\0\u2578\0\u25a4\0\u01b8\0\u25d0\0\u25fc\0\u2628\0\u2654"+
    "\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u01b8\0\u275c\0\u2788"+
    "\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8"+
    "\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u01b8\0\u2c84\0\u01b8\0\u2cb0"+
    "\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u01b8\0\u2de4"+
    "\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44"+
    "\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4"+
    "\0\u30d0\0\u30fc\0\u3128\0\u01b8\0\u3154\0\u3180\0\u31ac\0\u31d8"+
    "\0\u3204\0\u3230\0\u01b8\0\u325c\0\u3288\0\u32b4\0\u32e0\0\u330c"+
    "\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u01b8\0\u3440"+
    "\0\u346c\0\u3498\0\u01b8\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574"+
    "\0\u35a0\0\u35cc\0\u01b8\0\u35f8\0\u3624\0\u3650\0\u367c\0\u36a8"+
    "\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u01b8\0\u37b0\0\u37dc"+
    "\0\u3808\0\u01b8\0\u3834\0\u3860\0\u388c\0\u01b8\0\u38b8\0\u38e4"+
    "\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44"+
    "\0\u3a70\0\u3a9c\0\u3ac8\0\u01b8\0\u3af4\0\u3b20\0\u01b8\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u01b8\0\u01b8\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54"+
    "\0\u3c80\0\u3cac\0\u01b8\0\u3cd8\0\u3d04\0\u3d30\0\u3d5c\0\u3d88"+
    "\0\u01b8\0\u3db4\0\u01b8\0\u3de0\0\u3e0c\0\u3e38\0\u01b8\0\u3e64"+
    "\0\u3e90\0\u01b8\0\u3ebc\0\u3ee8\0\u3f14\0\u01b8\0\u3f40\0\u3f6c"+
    "\0\u3f98\0\u01b8\0\u3fc4\0\u01b8\0\u3ff0\0\u401c\0\u4048\0\u4074"+
    "\0\u40a0\0\u40cc\0\u40f8\0\u4124\0\u4150\0\u01b8\0\u417c\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u01b8\0\u4258"+
    "\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334\0\u4360\0\u438c\0\u43b8"+
    "\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0\0\u44ec\0\u4518"+
    "\0\u4544\0\u4570\0\u459c\0\u01b8\0\u45c8\0\u01b8\0\u01b8\0\u45f4"+
    "\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u4754"+
    "\0\u01b8\0\u4780\0\u47ac\0\u01b8\0\u47d8\0\u4804\0\u4830\0\u01b8"+
    "\0\u485c\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990"+
    "\0\u49bc\0\u49e8\0\u4a14\0\u01b8\0\u4a40\0\u01b8\0\u4a6c\0\u4a98"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u4ac4\0\u4af0\0\u4b1c\0\u4b48\0\u4b74"+
    "\0\u4ba0\0\u4bcc\0\u4bf8\0\u4c24\0\u01b8\0\u4c50\0\u01b8\0\u01b8"+
    "\0\u01b8\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u01b8\0\u4d2c\0\u01b8"+
    "\0\u01b8\0\u4d58\0\u01b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\12\1\13\1\14\1\15\6\0\1\16\1\17"+
    "\1\20\1\0\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\1\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\0\1\37\11\0\1\14\2\40"+
    "\2\14\47\40\1\14\4\0\1\41\1\0\1\41\2\0"+
    "\1\41\1\0\32\41\6\0\1\14\1\42\2\0\50\42"+
    "\1\43\3\0\1\14\46\0\1\44\1\14\1\0\1\45"+
    "\1\46\1\14\1\47\1\0\1\47\1\50\1\51\1\52"+
    "\1\53\6\47\1\54\6\47\1\55\12\47\1\55\1\54"+
    "\1\56\1\57\1\60\1\61\1\62\1\0\1\14\4\0"+
    "\1\63\1\0\37\63\6\0\1\14\2\64\2\14\47\64"+
    "\1\14\1\65\2\0\50\65\1\66\2\0\1\13\131\0"+
    "\1\67\63\0\1\70\17\0\1\71\40\0\1\72\13\0"+
    "\1\73\45\0\1\74\53\0\1\75\37\0\1\76\2\0"+
    "\1\77\50\0\1\100\11\0\1\101\46\0\1\102\7\0"+
    "\1\103\62\0\1\104\20\0\1\105\12\0\1\106\6\0"+
    "\1\107\2\0\1\110\1\0\1\111\40\0\1\112\1\0"+
    "\1\113\50\0\1\114\22\0\1\115\30\0\1\116\64\0"+
    "\1\117\42\0\1\120\2\0\1\121\50\0\1\122\56\0"+
    "\1\123\54\0\1\124\7\0\1\125\43\0\1\126\34\0"+
    "\1\41\1\0\1\41\2\0\1\41\1\0\32\41\7\0"+
    "\1\42\2\0\51\42\2\0\1\46\55\0\1\47\1\0"+
    "\1\47\2\0\1\47\1\0\32\47\13\0\1\47\1\0"+
    "\1\47\2\0\1\52\1\53\32\47\20\0\2\53\45\0"+
    "\1\47\1\0\1\47\2\0\1\47\1\0\4\47\1\127"+
    "\25\47\13\0\1\47\1\0\1\47\2\0\1\47\1\0"+
    "\3\47\1\130\26\47\55\0\1\131\53\0\1\132\53\0"+
    "\1\133\56\0\1\134\6\0\1\63\1\0\37\63\7\0"+
    "\1\65\2\0\51\65\1\135\2\136\2\135\1\0\46\135"+
    "\15\0\1\137\10\0\1\140\31\0\1\141\75\0\1\142"+
    "\41\0\1\143\7\0\1\144\57\0\1\145\42\0\1\146"+
    "\53\0\1\147\57\0\1\150\52\0\1\151\5\0\1\152"+
    "\1\153\57\0\1\154\35\0\1\155\62\0\1\156\50\0"+
    "\1\157\45\0\1\160\12\0\1\161\27\0\1\162\100\0"+
    "\1\163\53\0\1\164\53\0\1\165\45\0\1\166\56\0"+
    "\1\167\51\0\1\170\43\0\1\171\20\0\1\172\55\0"+
    "\1\173\44\0\1\174\44\0\1\175\1\0\1\176\62\0"+
    "\1\177\37\0\1\200\41\0\1\201\101\0\1\202\25\0"+
    "\1\203\53\0\1\47\1\0\1\47\2\0\1\47\1\0"+
    "\1\204\31\47\13\0\1\47\1\0\1\47\2\0\1\47"+
    "\1\0\14\47\1\205\15\47\7\0\1\135\2\0\51\135"+
    "\16\0\1\206\57\0\1\207\64\0\1\210\33\0\1\211"+
    "\53\0\1\212\44\0\1\213\106\0\1\214\40\0\1\215"+
    "\61\0\1\216\43\0\1\217\57\0\1\220\43\0\1\221"+
    "\3\0\1\222\64\0\1\223\53\0\1\224\35\0\1\225"+
    "\42\0\1\226\102\0\1\227\37\0\1\230\56\0\1\231"+
    "\64\0\1\232\24\0\1\233\67\0\1\234\55\0\1\235"+
    "\61\0\1\236\65\0\1\237\15\0\1\240\104\0\1\241"+
    "\45\0\1\242\46\0\1\243\50\0\1\244\53\0\1\245"+
    "\62\0\1\246\47\0\1\247\54\0\1\250\53\0\1\251"+
    "\52\0\1\252\54\0\1\253\34\0\1\47\1\0\1\47"+
    "\2\0\1\47\1\0\10\47\1\254\21\47\13\0\1\47"+
    "\1\0\1\47\2\0\1\47\1\0\7\47\1\255\22\47"+
    "\26\0\1\256\71\0\1\257\47\0\1\260\51\0\1\261"+
    "\60\0\1\262\35\0\1\263\70\0\1\264\42\0\1\265"+
    "\60\0\1\266\43\0\1\267\71\0\1\270\41\0\1\271"+
    "\61\0\1\272\36\0\1\273\62\0\1\274\5\0\1\275"+
    "\1\0\1\276\47\0\1\277\37\0\1\300\64\0\1\301"+
    "\60\0\1\302\55\0\1\303\36\0\1\304\41\0\1\305"+
    "\15\0\1\306\50\0\1\307\62\0\1\310\31\0\1\311"+
    "\23\0\1\312\42\0\1\313\52\0\1\314\41\0\1\315"+
    "\76\0\1\316\42\0\1\317\51\0\1\320\72\0\1\321"+
    "\51\0\1\322\55\0\1\323\24\0\1\47\1\0\1\47"+
    "\2\0\1\47\1\0\7\47\1\324\22\47\25\0\1\325"+
    "\60\0\1\326\60\0\1\327\57\0\1\330\23\0\1\331"+
    "\12\0\1\332\56\0\1\333\47\0\1\334\75\0\1\335"+
    "\43\0\1\336\27\0\1\337\72\0\1\340\52\0\1\341"+
    "\54\0\1\342\43\0\1\343\77\0\1\344\32\0\1\345"+
    "\66\0\1\346\40\0\1\347\41\0\1\350\102\0\1\351"+
    "\50\0\1\352\54\0\1\353\36\0\1\354\62\0\1\355"+
    "\6\0\1\356\55\0\1\357\43\0\1\360\62\0\1\361"+
    "\34\0\1\362\56\0\1\363\47\0\1\364\44\0\1\365"+
    "\70\0\1\366\12\0\1\367\32\0\1\370\54\0\1\371"+
    "\72\0\1\372\47\0\1\373\43\0\1\374\63\0\1\375"+
    "\44\0\1\376\55\0\1\377\45\0\1\u0100\61\0\1\u0101"+
    "\61\0\1\u0102\3\0\1\u0103\34\0\1\u0104\67\0\1\u0105"+
    "\55\0\1\u0106\37\0\1\u0107\47\0\1\u0108\7\0\1\u0109"+
    "\1\u010a\3\0\1\u010b\3\0\1\u010c\33\0\1\u010d\73\0"+
    "\1\u010e\33\0\1\u010f\53\0\1\u0110\56\0\1\u0111\67\0"+
    "\1\u0112\50\0\1\u0113\51\0\1\u0114\63\0\1\u0115\33\0"+
    "\1\u0116\51\0\1\u0117\67\0\1\u0118\47\0\1\u0119\56\0"+
    "\1\u011a\57\0\1\u011b\24\0\1\u011c\71\0\1\u011d\66\0"+
    "\1\u011e\41\0\1\u011f\44\0\1\u0120\61\0\1\u0121\7\0"+
    "\1\u0122\35\0\1\u0123\53\0\1\u0124\67\0\1\u0125\54\0"+
    "\1\u0126\57\0\1\u0127\34\0\1\u0128\61\0\1\u0129\45\0"+
    "\1\u012a\41\0\1\u012b\102\0\1\u012c\43\0\1\u012d\50\0"+
    "\1\u012e\12\0\1\u012f\42\0\1\u0130\44\0\1\u0131\73\0"+
    "\1\u0132\36\0\1\u0133\52\0\1\u0134\52\0\1\u0135\72\0"+
    "\1\u0136\57\0\1\u0137\46\0\1\u0138\54\0\1\u0139\53\0"+
    "\1\u013a\24\0\1\u013b\72\0\1\u013c\60\0\1\u013d\41\0"+
    "\1\u013e\56\0\1\u013f\46\0\1\u0140\61\0\1\u0141\53\0"+
    "\1\u0142\51\0\1\u0143\66\0\1\u0144\34\0\1\u0145\76\0"+
    "\1\u0146\30\0\1\u0147\73\0\1\u0148\57\0\1\u0149\34\0"+
    "\1\u014a\67\0\1\u014b\43\0\1\u014c\61\0\1\u014d\33\0"+
    "\1\u014e\56\0\1\u014f\41\0\1\u0150\77\0\1\u0151\51\0"+
    "\1\u0152\47\0\1\u0153\57\0\1\u0154\46\0\1\u0155\67\0"+
    "\1\u0156\22\0\1\u0157\100\0\1\u0158\55\0\1\u0159\51\0"+
    "\1\u015a\44\0\1\u015b\47\0\1\u015c\77\0\1\u015d\24\0"+
    "\1\u015e\55\0\1\u015f\65\0\1\u0160\52\0\1\u0161\56\0"+
    "\1\u0162\50\0\1\u0163\62\0\1\u0164\50\0\1\u0165\41\0"+
    "\1\u0166\55\0\1\u0167\35\0\1\u0168\102\0\1\u0169\43\0"+
    "\1\u016a\46\0\1\u016b\72\0\1\u016c\51\0\1\u016d\50\0"+
    "\1\u016e\53\0\1\u016f\52\0\1\u0170\40\0\1\u0171\53\0"+
    "\1\u0172\61\0\1\u0173\61\0\1\u0174\57\0\1\u0175\41\0"+
    "\1\u0176\44\0\1\u0177\54\0\1\u0178\61\0\1\u0179\53\0"+
    "\1\u017a\45\0\1\u017b\62\0\1\u017c\44\0\1\u017d\17\0"+
    "\1\u017e\41\0\1\u017f\44\0\1\u0180\62\0\1\u0181\61\0"+
    "\1\u0182\46\0\1\u0183\52\0\1\u0184\35\0\1\u0185\11\0"+
    "\1\u0186\53\0\1\u0187\51\0\1\u0188\43\0\1\u0189\53\0"+
    "\1\u018a\72\0\1\u018b\63\0\1\u018c\54\0\1\u018d\52\0"+
    "\1\u018e\55\0\1\u018f\41\0\1\u0190\53\0\1\u0191\65\0"+
    "\1\u0192\40\0\1\u0193\44\0\1\u0194\70\0\1\u0195\47\0"+
    "\1\u0196\45\0\1\u0197\57\0\1\u0198\60\0\1\u0199\47\0"+
    "\1\u019a\47\0\1\u019b\67\0\1\u019c\24\0\1\u019d\72\0"+
    "\1\u019e\43\0\1\u019f\75\0\1\u01a0\32\0\1\u01a1\62\0"+
    "\1\u01a2\65\0\1\u01a3\41\0\1\u01a4\64\0\1\u01a5\36\0"+
    "\1\u01a6\62\0\1\u01a7\31\0\1\u01a8\70\0\1\u01a9\53\0"+
    "\1\u01aa\66\0\1\u01ab\23\0\1\u01ac\100\0\1\u01ad\45\0"+
    "\1\u01ae\44\0\1\u01af\62\0\1\u01b0\52\0\1\u01b1\70\0"+
    "\1\u01b2\20\0\1\u01b3\104\0\1\u01b4\31\0\1\u01b5\75\0"+
    "\1\u01b6\53\0\1\u01b7\52\0\1\u01b8\41\0\1\u01b9\57\0"+
    "\1\u01ba\43\0\1\u01bb\71\0\1\u01bc\33\0\1\u01bd\55\0"+
    "\1\u01be\57\0\1\u01bf\44\0\1\u01c0\54\0\1\u01c1\53\0"+
    "\1\u01c2\66\0\1\u01c3\57\0\1\u01c4\50\0\1\u01c5\56\0"+
    "\1\u01c6\54\0\1\u01c7\42\0\1\u01c8\52\0\1\u01c9\55\0"+
    "\1\u01ca\43\0\1\u01cb\62\0\1\u01cc\43\0\1\u01cd\63\0"+
    "\1\u01ce\53\0\1\u01cf\46\0\1\u01d0\51\0\1\u01d1\43\0"+
    "\1\u01d2\63\0\1\u01d3\52\0\1\u01d4\53\0\1\u01d5\53\0"+
    "\1\u01d6\71\0\1\u01d7\36\0\1\u01d8\74\0\1\u01d9\40\0"+
    "\1\u01da\45\0\1\u01db\62\0\1\u01dc\57\0\1\u01dd\42\0"+
    "\1\u01de\64\0\1\u01df\47\0\1\u01e0\52\0\1\u01e1\52\0"+
    "\1\u01e2\47\0\1\u01e3\60\0\1\u01e4\53\0\1\u01e5\53\0"+
    "\1\u01e6\61\0\1\u01e7\56\0\1\u01e8\51\0\1\u01e9\55\0"+
    "\1\u01ea\37\0\1\u01eb\57\0\1\u01ec\64\0\1\u01ed\42\0"+
    "\1\u01ee\44\0\1\u01ef\55\0\1\u01f0\60\0\1\u01f1\53\0"+
    "\1\u01f2\53\0\1\u01f3\44\0\1\u01f4\74\0\1\u01f5\40\0"+
    "\1\u01f6\66\0\1\u01f7\42\0\1\u01f8\51\0\1\u01f9\44\0"+
    "\1\u01fa\57\0\1\u01fb\67\0\1\u01fc\43\0\1\u01fd\65\0"+
    "\1\u01fe\41\0\1\u01ff\52\0\1\u0200\54\0\1\u0201\52\0"+
    "\1\u0202\47\0\1\u0203\72\0\1\u0204\52\0\1\u0205\42\0"+
    "\1\u0206\44\0\1\u0207\62\0\1\u0208\53\0\1\u0209\52\0"+
    "\1\u020a\54\0\1\u020b\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\2\1\1\0\2\1\2\11\23\0"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\2\11\4\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\11\2\1\3\0"+
    "\1\11\34\0\2\1\4\11\1\1\1\11\45\0\2\1"+
    "\7\0\1\11\1\0\1\11\15\0\1\11\11\0\1\11"+
    "\4\0\2\1\46\0\1\1\7\0\1\11\27\0\1\11"+
    "\11\0\1\11\1\1\16\0\1\1\16\0\1\11\1\0"+
    "\1\11\5\0\1\1\1\0\1\11\5\0\1\1\16\0"+
    "\1\11\6\0\1\11\13\0\1\11\3\0\1\11\7\0"+
    "\1\11\12\0\1\11\3\0\1\11\3\0\1\11\15\0"+
    "\1\11\2\0\1\11\3\0\2\11\6\0\1\11\5\0"+
    "\1\11\1\0\1\11\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\11\11\0\1\11\1\0"+
    "\3\11\4\0\1\11\1\0\1\1\22\0\1\11\1\0"+
    "\2\11\11\0\1\11\2\0\1\11\3\0\1\11\13\0"+
    "\1\11\1\0\1\11\2\0\3\11\11\0\1\11\1\0"+
    "\3\11\4\0\1\11\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int yycolumn;
  private Stack<Integer> indentationStack;
  private Stack<Integer> stateStack;
  public _CabalParsingLexer() {
    this((java.io.Reader)null);
    indentationStack = ContainerUtil.newStack();
    stateStack = ContainerUtil.newStack();
  }


  public _CabalParsingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CabalParsingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return STABILITYKEY;
          }
        case 85: break;
        case 53: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CCOPTIONSKEY;
          }
        case 86: break;
        case 33: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEKEY;
          }
        case 87: break;
        case 22: 
          { return AND;
          }
        case 88: break;
        case 38: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return VERSIONKEY;
          }
        case 89: break;
        case 28: 
          { return TRUE;
          }
        case 90: break;
        case 57: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return JSSOURCESKEY;
          }
        case 91: break;
        case 20: 
          { return GTEQ;
          }
        case 92: break;
        case 34: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXPOSEDKEY;
          }
        case 93: break;
        case 83: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return PKGCONFIGDEPENDSKEY;
          }
        case 94: break;
        case 58: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDTOOLSKEY;
          }
        case 95: break;
        case 19: 
          { return EQ;
          }
        case 96: break;
        case 51: 
          { yybegin(CONFIGNAME);
                           return EXECUTABLE;
          }
        case 97: break;
        case 47: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return COPYRIGHTKEY;
          }
        case 98: break;
        case 21: 
          { return LTEQ;
          }
        case 99: break;
        case 59: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return BUGREPORTSKEY;
          }
        case 100: break;
        case 82: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCSHAREDOPTIONSKEY;
          }
        case 101: break;
        case 17: 
          { yypushback(1);

                          if(yycolumn == indentationStack.peek()){
                            yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                          } else {
                                if(yycolumn < indentationStack.peek()){
                                   indentationStack.pop();
                                   if(!stateStack.isEmpty()){
                                     stateStack.pop();
                                   }
                                   if (!indentationStack.isEmpty() && yycolumn == indentationStack.peek()){
                                      yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());

                                   }
                                   if (indentationStack.isEmpty()) {
                                      yybegin(YYINITIAL);
                                   }
                                   return WHITESPACERBRACETOK;
                                } else {
                                  yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                                }
                          }
          }
        case 102: break;
        case 78: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHEREXTENSIONSKEY;
          }
        case 103: break;
        case 7: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 104: break;
        case 67: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDEDIRSKEY;
          }
        case 105: break;
        case 74: 
          { stateStack.push(VARID);

                       yybegin(FINDCOLON);
                       return EXTRATMPFILESKEY;
          }
        case 106: break;
        case 64: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return DESCRIPTIONKEY;
          }
        case 107: break;
        case 41: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return CATEGORYKEY;
          }
        case 108: break;
        case 14: 
          { return COMMA;
          }
        case 109: break;
        case 49: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return BUILDTYPEKEY;
          }
        case 110: break;
        case 75: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXTRADOCFILESKEY;
          }
        case 111: break;
        case 9: 
          { yybegin(FINDINDENTATIONCONTEXT);
                      return COLON;
          }
        case 112: break;
        case 3: 
          { return VARIDREGEXP;
          }
        case 113: break;
        case 2: 
          { yybegin(YYINITIAL);
                     return FREEFORMREGEXP;
          }
        case 114: break;
        case 30: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return AUTHORKEY;
          }
        case 115: break;
        case 16: 
          { return LT;
          }
        case 116: break;
        case 60: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCOPTIONSKEY;
          }
        case 117: break;
        case 76: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXPOSEDMODULESKEY;
          }
        case 118: break;
        case 12: 
          { return DOT;
          }
        case 119: break;
        case 23: 
          { return COMMENT;
          }
        case 120: break;
        case 46: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CSOURCESKEY;
          }
        case 121: break;
        case 5: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     return FREEFORMREGEXP;
          }
        case 122: break;
        case 29: 
          { return FALSE;
          }
        case 123: break;
        case 6: 
          { if (!indentationStack.isEmpty()){
                           yybegin(ININDENTATIONCONTEXT);
                         }
                         return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 124: break;
        case 43: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return HOMEPAGEKEY;
          }
        case 125: break;
        case 42: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATADIRKEY;
          }
        case 126: break;
        case 68: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDDEPENDSKEY;
          }
        case 127: break;
        case 15: 
          { return GT;
          }
        case 128: break;
        case 8: 
          { yypushback(1);
                          if (indentationStack.isEmpty()){
                             if (yycolumn != 0) {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                             } else {
                               yybegin(YYINITIAL);
                             }
                          } else {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                          }
          }
        case 129: break;
        case 39: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDESKEY;
          }
        case 130: break;
        case 73: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBRARIESKEY;
          }
        case 131: break;
        case 63: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TESTEDWITHKEY;
          }
        case 132: break;
        case 26: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TYPEKEY;
          }
        case 133: break;
        case 61: 
          { stateStack.push(FREEFORM);
                         yybegin(FINDCOLON);
                         return CPPOPTIONSKEY;
          }
        case 134: break;
        case 56: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATAFILESKEY;
          }
        case 135: break;
        case 66: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEFILESKEY;
          }
        case 136: break;
        case 62: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return TESTMODULEKEY;
          }
        case 137: break;
        case 35: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return PACKAGEKEY;
          }
        case 138: break;
        case 27: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return NAMEKEY;
          }
        case 139: break;
        case 44: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDABLEKEY;
          }
        case 140: break;
        case 69: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return CABALVERSIONKEY;
          }
        case 141: break;
        case 71: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBDIRSKEY;
          }
        case 142: break;
        case 11: 
          { return SLASH;
          }
        case 143: break;
        case 70: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHERMODULESKEY;
          }
        case 144: break;
        case 37: 
          { stateStack.push(VARID);
                    yybegin(FINDCOLON);
                    return DEFAULTFLAGVALUEKEY;
          }
        case 145: break;
        case 54: 
          { yybegin(CONFIGNAME);
                           return TEST_SUITE;
          }
        case 146: break;
        case 25: 
          { yybegin(FINDINDENTATIONCONTEXT);
                        return ELSE;
          }
        case 147: break;
        case 65: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return LICENSEFILEKEY;
          }
        case 148: break;
        case 79: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DEFAULTLANGUAGEKEY;
          }
        case 149: break;
        case 18: 
          { yybegin(CONDITION);
                        return IF;
          }
        case 150: break;
        case 13: 
          { return NUMBERREGEXP;
          }
        case 151: break;
        case 80: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INSTALLINCLUDESKEY;
          }
        case 152: break;
        case 40: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return SYNOPSISKEY;
          }
        case 153: break;
        case 24: 
          { yybegin(CONFIGNAME);
                         return FLAG;
          }
        case 154: break;
        case 77: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCPROFOPTIONSKEY;
          }
        case 155: break;
        case 55: 
          { stateStack.push(FREEFORM);
                    yybegin(FINDCOLON);
                    return MAINTAINERKEY;
          }
        case 156: break;
        case 50: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return FRAMEWORKSKEY;
          }
        case 157: break;
        case 32: 
          { yybegin(FINDINDENTATIONCONTEXT);
                         return LIBRARY;
          }
        case 158: break;
        case 81: 
          { stateStack.push(FILEPATH);
                       yybegin(FINDCOLON);
                       return EXTRASOURCEFILESKEY;
          }
        case 159: break;
        case 31: 
          { stateStack.push(VARID);
                    yybegin(FINDCOLON);
                    return MANUALKEY;
          }
        case 160: break;
        case 1: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     return VARIDREGEXP;
          }
        case 161: break;
        case 84: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRAGHCILIBRARIESKEY;
          }
        case 162: break;
        case 48: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return LDOPTIONSKEY;
          }
        case 163: break;
        case 10: 
          { if (!indentationStack.isEmpty()){
                         yybegin(ININDENTATIONCONTEXT);
                       }
                       return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 164: break;
        case 4: 
          { yybegin(YYINITIAL);
                     return FILEPATHREGEXP;
          }
        case 165: break;
        case 72: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return HSSOURCEDIRSKEY;
          }
        case 166: break;
        case 36: 
          { stateStack.push(VARID);
                     yybegin(FINDCOLON);
                     return MAINISKEY;
          }
        case 167: break;
        case 52: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTENSIONSKEY;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (! indentationStack.isEmpty ()){
                            indentationStack.pop();
                            return WHITESPACERBRACETOK;
                          }
                          return null;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
