/* The following code was generated by JFlex 1.4.3 on 2/27/15 5:02 PM */

package com.haskforce.cabal.psi;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.cabal.psi.CabalTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/27/15 5:02 PM from the specification file
 * <tt>/home/kasper/sources/intellij-haskforce/src/com/haskforce/cabal/psi/_CabalParsingLexer.flex</tt>
 */
public class _CabalParsingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VARID = 10;
  public static final int FREEFORM = 6;
  public static final int FILEPATH = 12;
  public static final int ININDENTATIONCONTEXT = 14;
  public static final int FINDCOLON = 8;
  public static final int CONDITION = 16;
  public static final int YYINITIAL = 0;
  public static final int FINDINDENTATIONCONTEXT = 2;
  public static final int CONFIGNAME = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\51\1\0\4\0"+
    "\1\47\1\6\2\0\1\12\1\0\1\43\1\4\1\10\1\7\12\11"+
    "\1\50\1\0\1\46\1\44\1\45\2\0\1\17\1\15\1\26\1\37"+
    "\1\22\1\21\1\24\1\32\1\14\1\42\1\34\1\13\1\33\1\31"+
    "\1\35\1\36\1\6\1\16\1\23\1\30\1\27\1\40\1\41\1\25"+
    "\1\20\1\6\3\0\1\5\1\6\1\0\1\17\1\15\1\26\1\37"+
    "\1\22\1\21\1\24\1\32\1\14\1\42\1\34\1\13\1\33\1\31"+
    "\1\35\1\36\1\6\1\16\1\23\1\30\1\27\1\40\1\41\1\25"+
    "\1\20\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\1\3\1\4\1\0\1\5"+
    "\2\6\1\7\23\0\1\10\1\1\1\2\1\7\1\11"+
    "\2\12\1\3\1\13\1\14\2\15\2\3\1\16\1\17"+
    "\1\20\1\21\1\0\1\4\1\22\1\5\1\7\4\0"+
    "\1\23\42\0\2\3\1\24\1\25\1\26\1\27\2\30"+
    "\33\0\1\31\20\0\2\3\12\0\1\32\1\0\1\33"+
    "\17\0\1\34\1\0\1\35\15\0\1\3\1\36\54\0"+
    "\1\37\5\0\1\40\4\0\1\41\6\0\1\42\22\0"+
    "\1\43\1\44\11\0\1\45\1\46\20\0\1\47\21\0"+
    "\1\50\3\0\1\51\3\0\1\52\1\0\1\53\2\0"+
    "\1\54\1\0\1\55\17\0\1\56\7\0\1\57\7\0"+
    "\1\60\5\0\1\61\6\0\1\62\3\0\1\63\12\0"+
    "\1\64\4\0\1\65\2\0\1\66\16\0\1\67\2\0"+
    "\1\70\3\0\1\71\1\72\6\0\1\73\6\0\1\74"+
    "\1\0\1\75\3\0\1\76\3\0\1\77\2\0\1\100"+
    "\3\0\1\101\1\0\1\102\11\0\1\103\2\0\1\104"+
    "\1\105\1\106\5\0\1\107\1\110\23\0\1\111\1\0"+
    "\1\112\1\113\12\0\1\114\2\0\1\115\3\0\1\116"+
    "\11\0\1\117\4\0\1\120\2\0\1\121\1\122\1\123"+
    "\13\0\1\124\1\125\1\0\1\126\1\127\2\0\1\130"+
    "\2\0\1\131\1\0\1\132\1\133\1\0\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u01a4"+
    "\0\u04ec\0\u0516\0\u0516\0\u01a4\0\u0540\0\u01a4\0\u056a\0\u01a4"+
    "\0\u01a4\0\u0594\0\u05be\0\u05e8\0\u0612\0\u01a4\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u01a4\0\u070e\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u01a4\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8"+
    "\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u0dc8\0\u01a4\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u01a4\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac"+
    "\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc"+
    "\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u01a4\0\u16f8\0\u01a4"+
    "\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848"+
    "\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u01a4"+
    "\0\u1998\0\u01a4\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\u056a\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a"+
    "\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a"+
    "\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa"+
    "\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa"+
    "\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a"+
    "\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u056a\0\u2346\0\u2370"+
    "\0\u239a\0\u23c4\0\u23ee\0\u01a4\0\u2418\0\u2442\0\u246c\0\u2496"+
    "\0\u01a4\0\u24c0\0\u24ea\0\u2514\0\u253e\0\u2568\0\u2592\0\u01a4"+
    "\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e\0\u26b8\0\u26e2"+
    "\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de\0\u2808\0\u2832"+
    "\0\u285c\0\u2886\0\u01a4\0\u01a4\0\u28b0\0\u28da\0\u2904\0\u292e"+
    "\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u01a4\0\u2a2a\0\u2a54"+
    "\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4"+
    "\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4"+
    "\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44"+
    "\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94"+
    "\0\u2fbe\0\u01a4\0\u2fe8\0\u3012\0\u303c\0\u01a4\0\u3066\0\u3090"+
    "\0\u30ba\0\u30e4\0\u310e\0\u01a4\0\u3138\0\u3162\0\u01a4\0\u318c"+
    "\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc"+
    "\0\u3306\0\u3330\0\u335a\0\u3384\0\u33ae\0\u33d8\0\u3402\0\u342c"+
    "\0\u01a4\0\u3456\0\u3480\0\u34aa\0\u34d4\0\u34fe\0\u3528\0\u3552"+
    "\0\u01a4\0\u357c\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u364e\0\u3678"+
    "\0\u01a4\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\u01a4\0\u3774"+
    "\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u01a4\0\u3870\0\u389a"+
    "\0\u38c4\0\u01a4\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996\0\u39c0"+
    "\0\u39ea\0\u3a14\0\u3a3e\0\u3a68\0\u01a4\0\u3a92\0\u3abc\0\u3ae6"+
    "\0\u3b10\0\u01a4\0\u3b3a\0\u3b64\0\u01a4\0\u3b8e\0\u3bb8\0\u3be2"+
    "\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a\0\u3cb4\0\u3cde\0\u3d08\0\u3d32"+
    "\0\u3d5c\0\u3d86\0\u3db0\0\u01a4\0\u3dda\0\u3e04\0\u01a4\0\u3e2e"+
    "\0\u3e58\0\u3e82\0\u01a4\0\u01a4\0\u3eac\0\u3ed6\0\u3f00\0\u3f2a"+
    "\0\u3f54\0\u3f7e\0\u01a4\0\u3fa8\0\u3fd2\0\u3ffc\0\u4026\0\u4050"+
    "\0\u407a\0\u01a4\0\u40a4\0\u01a4\0\u40ce\0\u40f8\0\u4122\0\u01a4"+
    "\0\u414c\0\u4176\0\u41a0\0\u01a4\0\u41ca\0\u41f4\0\u01a4\0\u421e"+
    "\0\u4248\0\u4272\0\u01a4\0\u429c\0\u01a4\0\u42c6\0\u42f0\0\u431a"+
    "\0\u4344\0\u436e\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u01a4\0\u4440"+
    "\0\u446a\0\u01a4\0\u01a4\0\u01a4\0\u4494\0\u44be\0\u44e8\0\u4512"+
    "\0\u453c\0\u01a4\0\u4566\0\u4590\0\u45ba\0\u45e4\0\u460e\0\u4638"+
    "\0\u4662\0\u468c\0\u46b6\0\u46e0\0\u470a\0\u4734\0\u475e\0\u4788"+
    "\0\u47b2\0\u47dc\0\u4806\0\u4830\0\u485a\0\u4884\0\u01a4\0\u48ae"+
    "\0\u01a4\0\u01a4\0\u48d8\0\u4902\0\u492c\0\u4956\0\u4980\0\u49aa"+
    "\0\u49d4\0\u49fe\0\u4a28\0\u4a52\0\u01a4\0\u4a7c\0\u4aa6\0\u01a4"+
    "\0\u4ad0\0\u4afa\0\u4b24\0\u01a4\0\u4b4e\0\u4b78\0\u4ba2\0\u4bcc"+
    "\0\u4bf6\0\u4c20\0\u4c4a\0\u4c74\0\u4c9e\0\u01a4\0\u4cc8\0\u4cf2"+
    "\0\u4d1c\0\u4d46\0\u01a4\0\u4d70\0\u4d9a\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u4dc4\0\u4dee\0\u4e18\0\u4e42\0\u4e6c\0\u4e96\0\u4ec0\0\u4eea"+
    "\0\u4f14\0\u4f3e\0\u4f68\0\u01a4\0\u01a4\0\u4f92\0\u01a4\0\u01a4"+
    "\0\u4fbc\0\u4fe6\0\u01a4\0\u5010\0\u503a\0\u01a4\0\u5064\0\u01a4"+
    "\0\u01a4\0\u508e\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\12\1\13\1\14\1\15\6\0\1\16\1\17"+
    "\1\20\1\0\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\1\0\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\34\1\35\1\36\1\0\1\37\6\0\1\14"+
    "\2\40\2\14\45\40\1\14\4\0\1\41\1\0\1\41"+
    "\2\0\1\41\1\0\30\41\6\0\1\14\1\42\2\0"+
    "\46\42\1\43\3\0\1\14\44\0\1\44\1\14\1\0"+
    "\1\45\1\46\1\14\1\47\1\0\1\47\1\50\1\51"+
    "\1\52\1\53\6\47\1\54\6\47\1\55\12\47\1\56"+
    "\1\57\1\60\1\61\1\62\1\0\1\14\4\0\1\63"+
    "\1\0\35\63\6\0\1\14\2\64\2\14\45\64\1\14"+
    "\1\65\2\0\46\65\1\66\2\0\1\13\125\0\1\67"+
    "\61\0\1\70\20\0\1\71\1\0\1\72\33\0\1\73"+
    "\7\0\1\74\36\0\1\75\3\0\1\76\4\0\1\77"+
    "\51\0\1\100\35\0\1\101\2\0\1\102\46\0\1\103"+
    "\11\0\1\104\44\0\1\105\6\0\1\106\1\107\4\0"+
    "\1\110\46\0\1\111\23\0\1\112\12\0\1\113\6\0"+
    "\1\114\6\0\1\115\1\116\32\0\1\117\1\120\1\0"+
    "\1\121\46\0\1\122\55\0\1\123\11\0\1\124\33\0"+
    "\1\125\15\0\1\126\44\0\1\127\40\0\1\130\14\0"+
    "\1\131\34\0\1\132\2\0\1\133\51\0\1\134\52\0"+
    "\1\135\32\0\1\41\1\0\1\41\2\0\1\41\1\0"+
    "\30\41\7\0\1\42\2\0\47\42\2\0\1\46\53\0"+
    "\1\47\1\0\1\47\2\0\1\47\1\0\30\47\13\0"+
    "\1\47\1\0\1\47\2\0\1\52\1\53\30\47\20\0"+
    "\2\53\43\0\1\47\1\0\1\47\2\0\1\47\1\0"+
    "\4\47\1\136\23\47\13\0\1\47\1\0\1\47\2\0"+
    "\1\47\1\0\3\47\1\137\24\47\53\0\1\140\51\0"+
    "\1\141\51\0\1\142\54\0\1\143\6\0\1\63\1\0"+
    "\35\63\7\0\1\65\2\0\47\65\1\144\2\145\2\144"+
    "\1\0\44\144\15\0\1\146\10\0\1\147\51\0\1\150"+
    "\27\0\1\151\73\0\1\152\42\0\1\153\63\0\1\154"+
    "\34\0\1\155\7\0\1\156\55\0\1\157\40\0\1\160"+
    "\51\0\1\161\55\0\1\162\50\0\1\163\5\0\1\164"+
    "\5\0\1\165\44\0\1\166\35\0\1\167\53\0\1\170"+
    "\61\0\1\171\50\0\1\172\46\0\1\173\43\0\1\174"+
    "\12\0\1\175\25\0\1\176\103\0\1\177\51\0\1\200"+
    "\37\0\1\201\63\0\1\202\36\0\1\203\61\0\1\204"+
    "\22\0\1\205\100\0\1\206\32\0\1\207\14\0\1\210"+
    "\57\0\1\211\44\0\1\212\45\0\1\213\47\0\1\214"+
    "\55\0\1\215\42\0\1\216\1\0\1\217\44\0\1\220"+
    "\37\0\1\221\51\0\1\47\1\0\1\47\2\0\1\47"+
    "\1\0\1\222\27\47\13\0\1\47\1\0\1\47\2\0"+
    "\1\47\1\0\14\47\1\223\13\47\7\0\1\144\2\0"+
    "\47\144\16\0\1\224\55\0\1\225\46\0\1\226\67\0"+
    "\1\227\27\0\1\230\67\0\1\231\46\0\1\232\36\0"+
    "\1\233\42\0\1\234\77\0\1\235\43\0\1\236\60\0"+
    "\1\237\40\0\1\240\55\0\1\241\41\0\1\242\3\0"+
    "\1\243\64\0\1\244\51\0\1\245\53\0\1\246\27\0"+
    "\1\247\52\0\1\250\37\0\1\251\102\0\1\252\33\0"+
    "\1\253\54\0\1\254\64\0\1\255\34\0\1\256\35\0"+
    "\1\257\67\0\1\260\57\0\1\261\43\0\1\262\52\0"+
    "\1\263\50\0\1\264\60\0\1\265\47\0\1\266\51\0"+
    "\1\267\44\0\1\270\63\0\1\271\21\0\1\272\64\0"+
    "\1\273\51\0\1\274\60\0\1\275\46\0\1\276\51\0"+
    "\1\277\32\0\1\47\1\0\1\47\2\0\1\47\1\0"+
    "\10\47\1\300\17\47\13\0\1\47\1\0\1\47\2\0"+
    "\1\47\1\0\7\47\1\301\20\47\26\0\1\302\63\0"+
    "\1\303\50\0\1\304\57\0\1\305\42\0\1\306\50\0"+
    "\1\307\55\0\1\310\56\0\1\311\30\0\1\312\70\0"+
    "\1\313\36\0\1\314\56\0\1\315\41\0\1\316\63\0"+
    "\1\317\43\0\1\320\64\0\1\321\27\0\1\322\51\0"+
    "\1\323\63\0\1\324\46\0\1\325\11\0\1\326\1\327"+
    "\42\0\1\330\35\0\1\331\62\0\1\332\63\0\1\333"+
    "\31\0\1\334\70\0\1\335\20\0\1\336\15\0\1\337"+
    "\64\0\1\340\52\0\1\341\17\0\1\342\23\0\1\343"+
    "\40\0\1\344\45\0\1\345\54\0\1\346\52\0\1\347"+
    "\60\0\1\350\27\0\1\351\74\0\1\352\40\0\1\353"+
    "\47\0\1\354\72\0\1\355\20\0\1\47\1\0\1\47"+
    "\2\0\1\47\1\0\7\47\1\356\20\47\25\0\1\357"+
    "\56\0\1\360\42\0\1\361\65\0\1\362\60\0\1\363"+
    "\44\0\1\364\52\0\1\365\22\0\1\366\12\0\1\367"+
    "\54\0\1\370\45\0\1\371\74\0\1\372\40\0\1\373"+
    "\25\0\1\374\70\0\1\375\50\0\1\376\52\0\1\377"+
    "\44\0\1\u0100\46\0\1\u0101\60\0\1\u0102\61\0\1\u0103"+
    "\55\0\1\u0104\31\0\1\u0105\51\0\1\u0106\37\0\1\u0107"+
    "\102\0\1\u0108\44\0\1\u0109\35\0\1\u010a\73\0\1\u010b"+
    "\36\0\1\u010c\7\0\1\u010d\55\0\1\u010e\41\0\1\u010f"+
    "\41\0\1\u0110\46\0\1\u0111\54\0\1\u0112\45\0\1\u0113"+
    "\60\0\1\u0114\33\0\1\u0115\71\0\1\u0116\62\0\1\u0117"+
    "\35\0\1\u0118\15\0\1\u0119\25\0\1\u011a\52\0\1\u011b"+
    "\72\0\1\u011c\43\0\1\u011d\42\0\1\u011e\53\0\1\u011f"+
    "\64\0\1\u0120\30\0\1\u0121\57\0\1\u0122\46\0\1\u0123"+
    "\62\0\1\u0124\6\0\1\u0125\27\0\1\u0126\72\0\1\u0127"+
    "\50\0\1\u0128\33\0\1\u0129\45\0\1\u012a\7\0\1\u012b"+
    "\1\u012c\3\0\1\u012d\6\0\1\u012e\26\0\1\u012f\74\0"+
    "\1\u0130\26\0\1\u0131\51\0\1\u0132\41\0\1\u0133\64\0"+
    "\1\u0134\62\0\1\u0135\56\0\1\u0136\42\0\1\u0137\63\0"+
    "\1\u0138\27\0\1\u0139\47\0\1\u013a\61\0\1\u013b\55\0"+
    "\1\u013c\50\0\1\u013d\57\0\1\u013e\20\0\1\u013f\63\0"+
    "\1\u0140\57\0\1\u0141\50\0\1\u0142\42\0\1\u0143\57\0"+
    "\1\u0144\10\0\1\u0145\40\0\1\u0146\60\0\1\u0147\34\0"+
    "\1\u0148\51\0\1\u0149\65\0\1\u014a\57\0\1\u014b\44\0"+
    "\1\u014c\36\0\1\u014d\37\0\1\u014e\76\0\1\u014f\55\0"+
    "\1\u0150\37\0\1\u0151\44\0\1\u0152\53\0\1\u0153\14\0"+
    "\1\u0154\36\0\1\u0155\42\0\1\u0156\73\0\1\u0157\32\0"+
    "\1\u0158\50\0\1\u0159\50\0\1\u015a\72\0\1\u015b\46\0"+
    "\1\u015c\52\0\1\u015d\53\0\1\u015e\51\0\1\u015f\20\0"+
    "\1\u0160\70\0\1\u0161\56\0\1\u0162\37\0\1\u0163\51\0"+
    "\1\u0164\47\0\1\u0165\56\0\1\u0166\52\0\1\u0167\51\0"+
    "\1\u0168\47\0\1\u0169\66\0\1\u016a\46\0\1\u016b\33\0"+
    "\1\u016c\51\0\1\u016d\74\0\1\u016e\53\0\1\u016f\36\0"+
    "\1\u0170\45\0\1\u0171\60\0\1\u0172\45\0\1\u0173\61\0"+
    "\1\u0174\35\0\1\u0175\43\0\1\u0176\54\0\1\u0177\37\0"+
    "\1\u0178\75\0\1\u0179\47\0\1\u017a\44\0\1\u017b\61\0"+
    "\1\u017c\24\0\1\u017d\101\0\1\u017e\53\0\1\u017f\50\0"+
    "\1\u0180\52\0\1\u0181\35\0\1\u0182\45\0\1\u0183\67\0"+
    "\1\u0184\30\0\1\u0185\53\0\1\u0186\63\0\1\u0187\50\0"+
    "\1\u0188\61\0\1\u0189\41\0\1\u018a\54\0\1\u018b\53\0"+
    "\1\u018c\36\0\1\u018d\53\0\1\u018e\51\0\1\u018f\64\0"+
    "\1\u0190\20\0\1\u0191\70\0\1\u0192\44\0\1\u0193\64\0"+
    "\1\u0194\50\0\1\u0195\56\0\1\u0196\44\0\1\u0197\50\0"+
    "\1\u0198\36\0\1\u0199\57\0\1\u019a\51\0\1\u019b\57\0"+
    "\1\u019c\60\0\1\u019d\26\0\1\u019e\57\0\1\u019f\42\0"+
    "\1\u01a0\52\0\1\u01a1\57\0\1\u01a2\43\0\1\u01a3\60\0"+
    "\1\u01a4\42\0\1\u01a5\22\0\1\u01a6\34\0\1\u01a7\42\0"+
    "\1\u01a8\60\0\1\u01a9\57\0\1\u01aa\44\0\1\u01ab\50\0"+
    "\1\u01ac\33\0\1\u01ad\11\0\1\u01ae\51\0\1\u01af\47\0"+
    "\1\u01b0\41\0\1\u01b1\51\0\1\u01b2\70\0\1\u01b3\63\0"+
    "\1\u01b4\52\0\1\u01b5\52\0\1\u01b6\43\0\1\u01b7\55\0"+
    "\1\u01b8\37\0\1\u01b9\51\0\1\u01ba\57\0\1\u01bb\42\0"+
    "\1\u01bc\42\0\1\u01bd\66\0\1\u01be\25\0\1\u01bf\63\0"+
    "\1\u01c0\55\0\1\u01c1\56\0\1\u01c2\46\0\1\u01c3\50\0"+
    "\1\u01c4\45\0\1\u01c5\67\0\1\u01c6\37\0\1\u01c7\41\0"+
    "\1\u01c8\67\0\1\u01c9\34\0\1\u01ca\60\0\1\u01cb\57\0"+
    "\1\u01cc\43\0\1\u01cd\65\0\1\u01ce\31\0\1\u01cf\60\0"+
    "\1\u01d0\27\0\1\u01d1\66\0\1\u01d2\51\0\1\u01d3\67\0"+
    "\1\u01d4\47\0\1\u01d5\20\0\1\u01d6\70\0\1\u01d7\64\0"+
    "\1\u01d8\27\0\1\u01d9\60\0\1\u01da\50\0\1\u01db\61\0"+
    "\1\u01dc\56\0\1\u01dd\43\0\1\u01de\33\0\1\u01df\42\0"+
    "\1\u01e0\76\0\1\u01e1\51\0\1\u01e2\42\0\1\u01e3\55\0"+
    "\1\u01e4\41\0\1\u01e5\72\0\1\u01e6\26\0\1\u01e7\53\0"+
    "\1\u01e8\55\0\1\u01e9\42\0\1\u01ea\52\0\1\u01eb\51\0"+
    "\1\u01ec\64\0\1\u01ed\45\0\1\u01ee\63\0\1\u01ef\44\0"+
    "\1\u01f0\56\0\1\u01f1\30\0\1\u01f2\60\0\1\u01f3\50\0"+
    "\1\u01f4\66\0\1\u01f5\36\0\1\u01f6\50\0\1\u01f7\41\0"+
    "\1\u01f8\61\0\1\u01f9\51\0\1\u01fa\44\0\1\u01fb\47\0"+
    "\1\u01fc\41\0\1\u01fd\61\0\1\u01fe\50\0\1\u01ff\51\0"+
    "\1\u0200\51\0\1\u0201\52\0\1\u0202\73\0\1\u0203\27\0"+
    "\1\u0204\66\0\1\u0205\36\0\1\u0206\47\0\1\u0207\60\0"+
    "\1\u0208\50\0\1\u0209\56\0\1\u020a\51\0\1\u020b\45\0"+
    "\1\u020c\50\0\1\u020d\50\0\1\u020e\45\0\1\u020f\56\0"+
    "\1\u0210\51\0\1\u0211\51\0\1\u0212\57\0\1\u0213\51\0"+
    "\1\u0214\56\0\1\u0215\37\0\1\u0216\63\0\1\u0217\52\0"+
    "\1\u0218\32\0\1\u0219\71\0\1\u021a\35\0\1\u021b\42\0"+
    "\1\u021c\53\0\1\u021d\56\0\1\u021e\51\0\1\u021f\51\0"+
    "\1\u0220\63\0\1\u0221\30\0\1\u0222\66\0\1\u0223\51\0"+
    "\1\u0224\42\0\1\u0225\53\0\1\u0226\47\0\1\u0227\42\0"+
    "\1\u0228\55\0\1\u0229\50\0\1\u022a\70\0\1\u022b\37\0"+
    "\1\u022c\51\0\1\u022d\57\0\1\u022e\42\0\1\u022f\52\0"+
    "\1\u0230\50\0\1\u0231\45\0\1\u0232\53\0\1\u0233\62\0"+
    "\1\u0234\57\0\1\u0235\35\0\1\u0236\42\0\1\u0237\60\0"+
    "\1\u0238\51\0\1\u0239\50\0\1\u023a\52\0\1\u023b\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\2\1\1\0\2\1\2\11\23\0"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\2\11\4\1"+
    "\1\11\3\1\1\0\1\1\1\11\2\1\4\0\1\11"+
    "\42\0\2\1\4\11\1\1\1\11\33\0\1\11\20\0"+
    "\2\1\12\0\1\11\1\0\1\11\17\0\1\11\1\0"+
    "\1\11\15\0\2\1\54\0\1\1\5\0\1\11\4\0"+
    "\1\11\6\0\1\11\22\0\2\11\11\0\1\11\1\1"+
    "\20\0\1\1\21\0\1\11\3\0\1\11\3\0\1\1"+
    "\1\0\1\11\2\0\1\11\1\0\1\1\17\0\1\11"+
    "\7\0\1\11\7\0\1\11\5\0\1\11\6\0\1\11"+
    "\3\0\1\11\12\0\1\11\4\0\1\11\2\0\1\11"+
    "\16\0\1\11\2\0\1\11\3\0\2\11\6\0\1\11"+
    "\6\0\1\11\1\0\1\11\3\0\1\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\11\0\1\11"+
    "\2\0\3\11\5\0\1\11\1\1\23\0\1\11\1\0"+
    "\2\11\12\0\1\11\2\0\1\11\3\0\1\11\11\0"+
    "\1\11\4\0\1\11\2\0\3\11\13\0\2\11\1\0"+
    "\2\11\2\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int yycolumn;
  private Stack<Integer> indentationStack;
  private Stack<Integer> stateStack;
  public _CabalParsingLexer() {
    this((java.io.Reader)null);
    indentationStack = ContainerUtil.newStack();
    stateStack = ContainerUtil.newStack();
  }


  public _CabalParsingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CabalParsingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return STABILITYKEY;
          }
        case 93: break;
        case 60: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CCOPTIONSKEY;
          }
        case 94: break;
        case 38: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEKEY;
          }
        case 95: break;
        case 25: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TAGKEY;
          }
        case 96: break;
        case 23: 
          { return AND;
          }
        case 97: break;
        case 43: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return VERSIONKEY;
          }
        case 98: break;
        case 30: 
          { return TRUE;
          }
        case 99: break;
        case 36: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return MODULEKEY;
          }
        case 100: break;
        case 64: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return JSSOURCESKEY;
          }
        case 101: break;
        case 50: 
          { yybegin(CONFIGNAME);
                           return BENCHMARK;
          }
        case 102: break;
        case 21: 
          { return GTEQ;
          }
        case 103: break;
        case 39: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXPOSEDKEY;
          }
        case 104: break;
        case 91: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return PKGCONFIGDEPENDSKEY;
          }
        case 105: break;
        case 65: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDTOOLSKEY;
          }
        case 106: break;
        case 20: 
          { return EQ;
          }
        case 107: break;
        case 58: 
          { yybegin(CONFIGNAME);
                           return EXECUTABLE;
          }
        case 108: break;
        case 54: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return COPYRIGHTKEY;
          }
        case 109: break;
        case 22: 
          { return LTEQ;
          }
        case 110: break;
        case 66: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return BUGREPORTSKEY;
          }
        case 111: break;
        case 90: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCSHAREDOPTIONSKEY;
          }
        case 112: break;
        case 18: 
          { yypushback(1);

                          if(yycolumn == indentationStack.peek()){
                            yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                          } else {
                                if(yycolumn < indentationStack.peek()){
                                   indentationStack.pop();
                                   if(!stateStack.isEmpty()){
                                     stateStack.pop();
                                   }
                                   if (!indentationStack.isEmpty() && yycolumn == indentationStack.peek()){
                                      yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());

                                   }
                                   if (indentationStack.isEmpty()) {
                                      yybegin(YYINITIAL);
                                   }
                                   return WHITESPACERBRACETOK;
                                } else {
                                  yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                                }
                          }
          }
        case 113: break;
        case 85: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHEREXTENSIONSKEY;
          }
        case 114: break;
        case 74: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDEDIRSKEY;
          }
        case 115: break;
        case 7: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 116: break;
        case 81: 
          { stateStack.push(VARID);

                       yybegin(FINDCOLON);
                       return EXTRATMPFILESKEY;
          }
        case 117: break;
        case 71: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return DESCRIPTIONKEY;
          }
        case 118: break;
        case 14: 
          { return COMMA;
          }
        case 119: break;
        case 34: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return SUBDIRKEY;
          }
        case 120: break;
        case 56: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return BUILDTYPEKEY;
          }
        case 121: break;
        case 82: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXTRADOCFILESKEY;
          }
        case 122: break;
        case 88: 
          { yybegin(CONFIGNAME);
                           return SOURCEREPOSITORYKEY;
          }
        case 123: break;
        case 9: 
          { yybegin(FINDINDENTATIONCONTEXT);
                      return COLON;
          }
        case 124: break;
        case 44: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return LOCATIONKEY;
          }
        case 125: break;
        case 3: 
          { return VARIDREGEXP;
          }
        case 126: break;
        case 2: 
          { yybegin(YYINITIAL);
                     return FREEFORMREGEXP;
          }
        case 127: break;
        case 33: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return AUTHORKEY;
          }
        case 128: break;
        case 17: 
          { return LT;
          }
        case 129: break;
        case 67: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCOPTIONSKEY;
          }
        case 130: break;
        case 83: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXPOSEDMODULESKEY;
          }
        case 131: break;
        case 12: 
          { return DOT;
          }
        case 132: break;
        case 24: 
          { return COMMENT;
          }
        case 133: break;
        case 53: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CSOURCESKEY;
          }
        case 134: break;
        case 32: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return BRANCHKEY;
          }
        case 135: break;
        case 5: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     return FREEFORMREGEXP;
          }
        case 136: break;
        case 31: 
          { return FALSE;
          }
        case 137: break;
        case 6: 
          { if (!indentationStack.isEmpty()){
                           yybegin(ININDENTATIONCONTEXT);
                         }
                         return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 48: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return HOMEPAGEKEY;
          }
        case 139: break;
        case 49: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATADIRKEY;
          }
        case 140: break;
        case 75: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDDEPENDSKEY;
          }
        case 141: break;
        case 16: 
          { return GT;
          }
        case 142: break;
        case 8: 
          { yypushback(1);
                          if (indentationStack.isEmpty()){
                             if (yycolumn != 0) {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                             } else {
                               yybegin(YYINITIAL);
                             }
                          } else {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                          }
          }
        case 143: break;
        case 45: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDESKEY;
          }
        case 144: break;
        case 80: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBRARIESKEY;
          }
        case 145: break;
        case 70: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TESTEDWITHKEY;
          }
        case 146: break;
        case 28: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TYPEKEY;
          }
        case 147: break;
        case 68: 
          { stateStack.push(FREEFORM);
                         yybegin(FINDCOLON);
                         return CPPOPTIONSKEY;
          }
        case 148: break;
        case 63: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATAFILESKEY;
          }
        case 149: break;
        case 73: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEFILESKEY;
          }
        case 150: break;
        case 15: 
          { return ASSIGN;
          }
        case 151: break;
        case 69: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return TESTMODULEKEY;
          }
        case 152: break;
        case 41: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return PACKAGEKEY;
          }
        case 153: break;
        case 29: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return NAMEKEY;
          }
        case 154: break;
        case 51: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDABLEKEY;
          }
        case 155: break;
        case 76: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return CABALVERSIONKEY;
          }
        case 156: break;
        case 78: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBDIRSKEY;
          }
        case 157: break;
        case 11: 
          { return SLASH;
          }
        case 158: break;
        case 77: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHERMODULESKEY;
          }
        case 159: break;
        case 42: 
          { stateStack.push(VARID);
                    yybegin(FINDCOLON);
                    return DEFAULTFLAGVALUEKEY;
          }
        case 160: break;
        case 61: 
          { yybegin(CONFIGNAME);
                           return TEST_SUITE;
          }
        case 161: break;
        case 27: 
          { yybegin(FINDINDENTATIONCONTEXT);
                        return ELSE;
          }
        case 162: break;
        case 72: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return LICENSEFILEKEY;
          }
        case 163: break;
        case 86: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DEFAULTLANGUAGEKEY;
          }
        case 164: break;
        case 19: 
          { yybegin(CONDITION);
                        return IF;
          }
        case 165: break;
        case 13: 
          { return NUMBERREGEXP;
          }
        case 166: break;
        case 87: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INSTALLINCLUDESKEY;
          }
        case 167: break;
        case 47: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return CATEGORYKEY;
          }
        case 168: break;
        case 46: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return SYNOPSISKEY;
          }
        case 169: break;
        case 26: 
          { yybegin(CONFIGNAME);
                         return FLAG;
          }
        case 170: break;
        case 84: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCPROFOPTIONSKEY;
          }
        case 171: break;
        case 62: 
          { stateStack.push(FREEFORM);
                    yybegin(FINDCOLON);
                    return MAINTAINERKEY;
          }
        case 172: break;
        case 57: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return FRAMEWORKSKEY;
          }
        case 173: break;
        case 37: 
          { yybegin(FINDINDENTATIONCONTEXT);
                         return LIBRARY;
          }
        case 174: break;
        case 89: 
          { stateStack.push(FILEPATH);
                       yybegin(FINDCOLON);
                       return EXTRASOURCEFILESKEY;
          }
        case 175: break;
        case 35: 
          { stateStack.push(VARID);
                    yybegin(FINDCOLON);
                    return MANUALKEY;
          }
        case 176: break;
        case 1: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     return VARIDREGEXP;
          }
        case 177: break;
        case 92: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRAGHCILIBRARIESKEY;
          }
        case 178: break;
        case 55: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return LDOPTIONSKEY;
          }
        case 179: break;
        case 10: 
          { if (!indentationStack.isEmpty()){
                         yybegin(ININDENTATIONCONTEXT);
                       }
                       return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 180: break;
        case 4: 
          { yybegin(YYINITIAL);
                     return FILEPATHREGEXP;
          }
        case 181: break;
        case 79: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return HSSOURCEDIRSKEY;
          }
        case 182: break;
        case 40: 
          { stateStack.push(VARID);
                     yybegin(FINDCOLON);
                     return MAINISKEY;
          }
        case 183: break;
        case 59: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTENSIONSKEY;
          }
        case 184: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (! indentationStack.isEmpty ()){
                            indentationStack.pop();
                            return WHITESPACERBRACETOK;
                          }
                          return null;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
