/* The following code was generated by JFlex 1.4.3 on 2/13/15 5:41 PM */

package com.haskforce.cabal.psi;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.cabal.psi.CabalTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/13/15 5:41 PM from the specification file
 * <tt>/home/kasper/sources/intellij-haskforce/src/com/haskforce/cabal/psi/_CabalLexer.flex</tt>
 */
public class _CabalLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FREEFORM = 6;
  public static final int CONFIGNAME = 4;
  public static final int YYINITIAL = 0;
  public static final int FINDINDENTATIONCONTEXT = 2;
  public static final int FINDCOLON = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\10\1\1\22\0\1\52\5\0\1\43"+
    "\3\6\2\0\1\34\1\4\1\35\1\36\12\7\1\33\1\0\1\42"+
    "\1\40\1\41\1\0\1\37\32\6\3\0\1\5\1\6\1\0\1\15"+
    "\1\13\1\21\1\30\1\17\1\32\1\46\1\45\1\12\1\50\1\51"+
    "\1\11\1\26\1\31\1\27\1\25\1\6\1\14\1\24\1\23\1\22"+
    "\1\44\1\47\1\20\1\16\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\0\2\4\1\5\2\1"+
    "\1\6\1\7\16\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\0\1\15\1\16\1\0\4\1\1\17\1\20\1\21"+
    "\1\22\1\2\1\23\1\3\1\23\1\24\31\1\1\25"+
    "\1\26\1\27\1\30\5\1\2\31\64\1\1\32\1\33"+
    "\11\1\1\34\44\1\1\35\17\1\1\36\36\1\1\37"+
    "\17\1\1\40\12\1\1\41\1\1\1\42\7\1\1\43"+
    "\11\1\1\44\20\1\1\45\5\1\1\46\5\1\1\47"+
    "\4\1\1\50\13\1\1\51\11\1\1\52\2\1\1\53"+
    "\3\1\1\54\15\1\1\55\2\1\1\56\3\1\1\57"+
    "\6\1\1\60\2\1\1\61\1\62\3\1\1\63\2\1"+
    "\1\64\1\1\1\65\4\1\1\66\3\1\1\67\1\1"+
    "\1\70\10\1\1\71\1\72\7\1\1\73\1\74\1\75"+
    "\21\1\1\76\1\1\1\77\7\1\1\100\2\1\1\101"+
    "\5\1\1\102\11\1\1\103\3\1\1\104\1\105\1\1"+
    "\1\106\1\1\1\107\5\1\1\110\3\1\1\111\1\112"+
    "\1\1\1\113\4\1\1\114\1\1\1\115\1\116\1\1"+
    "\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u0102\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0102\0\u0102\0\u0102\0\u0102\0\u0102\0\u0408"+
    "\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0102"+
    "\0\u0102\0\u0102\0\u0102\0\u0560\0\u0102\0\u058b\0\u058b\0\u0102"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u0102\0\u0102\0\u0102\0\u0102\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u0102\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224"+
    "\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c"+
    "\0\u0158\0\u0158\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u0158\0\u152a\0\u1555\0\u1580\0\u15ab"+
    "\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703"+
    "\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b"+
    "\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u0158\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90"+
    "\0\u0158\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d"+
    "\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u0158"+
    "\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2"+
    "\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a"+
    "\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2"+
    "\0\u26cd\0\u26f8\0\u0158\0\u2723\0\u0158\0\u274e\0\u2779\0\u27a4"+
    "\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u0158\0\u287b\0\u28a6\0\u28d1"+
    "\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u0158\0\u29fe"+
    "\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56"+
    "\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u0158"+
    "\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u0158\0\u2d85\0\u2db0"+
    "\0\u2ddb\0\u2e06\0\u2e31\0\u0158\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd"+
    "\0\u0158\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a"+
    "\0\u3035\0\u3060\0\u308b\0\u30b6\0\u0158\0\u30e1\0\u310c\0\u3137"+
    "\0\u3162\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u0158\0\u3264"+
    "\0\u328f\0\u0158\0\u32ba\0\u32e5\0\u3310\0\u0158\0\u333b\0\u3366"+
    "\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be"+
    "\0\u34e9\0\u3514\0\u353f\0\u0158\0\u356a\0\u3595\0\u0158\0\u35c0"+
    "\0\u35eb\0\u3616\0\u0158\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed"+
    "\0\u3718\0\u0158\0\u3743\0\u376e\0\u0158\0\u0158\0\u3799\0\u37c4"+
    "\0\u37ef\0\u0158\0\u381a\0\u3845\0\u0158\0\u3870\0\u0158\0\u389b"+
    "\0\u38c6\0\u38f1\0\u391c\0\u0158\0\u3947\0\u3972\0\u399d\0\u0158"+
    "\0\u39c8\0\u0158\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca"+
    "\0\u3af5\0\u3b20\0\u0158\0\u0158\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc"+
    "\0\u3bf7\0\u3c22\0\u3c4d\0\u0158\0\u3c78\0\u0158\0\u3ca3\0\u3cce"+
    "\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26"+
    "\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u0158"+
    "\0\u3f7e\0\u0158\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080"+
    "\0\u40ab\0\u0158\0\u40d6\0\u4101\0\u0158\0\u412c\0\u4157\0\u4182"+
    "\0\u41ad\0\u41d8\0\u0158\0\u4203\0\u422e\0\u4259\0\u4284\0\u42af"+
    "\0\u42da\0\u4305\0\u4330\0\u435b\0\u0158\0\u4386\0\u43b1\0\u43dc"+
    "\0\u0158\0\u0158\0\u4407\0\u0158\0\u4432\0\u0158\0\u445d\0\u4488"+
    "\0\u44b3\0\u44de\0\u4509\0\u0158\0\u4534\0\u455f\0\u458a\0\u0158"+
    "\0\u0158\0\u45b5\0\u0158\0\u45e0\0\u460b\0\u4636\0\u4661\0\u0158"+
    "\0\u468c\0\u0158\0\u0158\0\u46b7\0\u0158";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\6\1\7\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\12\1\20\1\12\1\21"+
    "\1\12\1\22\1\12\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\12"+
    "\1\47\1\12\1\14\2\50\1\51\1\52\4\50\1\53"+
    "\41\50\1\53\4\0\1\54\1\0\2\54\1\0\22\54"+
    "\11\0\6\54\1\55\1\56\2\0\47\56\1\57\3\0"+
    "\1\55\4\0\1\55\22\0\1\60\16\0\1\55\2\0"+
    "\1\7\127\0\1\61\1\0\2\12\1\0\22\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\22\12\11\0"+
    "\6\12\5\0\1\12\1\0\1\12\1\13\1\0\22\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\1\12"+
    "\1\62\15\12\1\63\2\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\20\12\1\64\1\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\11\12\1\65\10\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\11\12"+
    "\1\66\10\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\7\12\1\67\12\12\11\0\6\12\5\0\1\70"+
    "\1\0\2\12\1\0\4\12\1\71\3\12\1\72\5\12"+
    "\1\73\3\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\3\12\1\74\1\12\1\75\1\76\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\5\12\1\77"+
    "\4\12\1\100\7\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\101\15\12\11\0\5\12\1\102"+
    "\5\0\1\12\1\0\2\12\1\0\4\12\1\103\15\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\12\12"+
    "\1\104\7\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\4\12\1\105\1\12\1\106\13\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\4\12\1\107\15\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\3\12"+
    "\1\110\1\111\15\12\11\0\6\12\41\0\1\112\52\0"+
    "\1\113\52\0\1\114\55\0\1\115\13\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\116\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\117\2\12\1\120"+
    "\3\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\1\12\1\121\4\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\122\6\12\11\0\6\12\5\0"+
    "\1\54\1\0\2\54\1\0\22\54\11\0\6\54\1\0"+
    "\1\56\2\0\50\56\1\123\2\124\2\123\1\0\45\123"+
    "\4\0\1\12\1\0\2\12\1\0\2\12\1\125\5\12"+
    "\1\126\11\12\11\0\6\12\5\0\1\127\1\0\2\12"+
    "\1\0\22\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\10\12\1\130\2\12\1\131\6\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\1\12\1\132\20\12"+
    "\11\0\2\12\1\133\3\12\5\0\1\12\1\0\2\12"+
    "\1\0\12\12\1\134\7\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\135\3\12\1\136\1\12"+
    "\1\137\5\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\140\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\141\7\12\1\142\7\12"+
    "\11\0\6\12\5\0\1\143\1\0\2\12\1\0\22\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\14\12"+
    "\1\144\5\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\11\12\1\145\10\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\14\12\1\146\5\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\13\12\1\147\6\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\20\12"+
    "\1\150\1\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\4\12\1\151\15\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\10\12\1\152\11\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\22\12\11\0\2\12"+
    "\1\153\3\12\5\0\1\12\1\0\2\12\1\0\1\12"+
    "\1\154\20\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\22\12\11\0\1\12\1\155\4\12\5\0\1\12"+
    "\1\0\2\12\1\0\12\12\1\156\7\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\21\12\1\157\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\15\12\1\160"+
    "\4\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\4\12\1\161\15\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\1\162\21\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\163\16\12\11\0\6\12"+
    "\5\0\1\164\1\0\2\12\1\0\22\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\15\12\1\165\4\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\10\12"+
    "\1\166\11\12\11\0\6\12\5\0\1\167\1\0\2\12"+
    "\1\0\22\12\11\0\6\12\1\0\1\123\2\0\50\123"+
    "\4\0\1\12\1\0\2\12\1\0\3\12\1\170\16\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\6\12"+
    "\1\171\13\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\16\12\1\172\3\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\173\21\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\12\12\1\174\7\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\175\21\12"+
    "\11\0\6\12\5\0\1\176\1\0\2\12\1\0\22\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\22\12"+
    "\11\0\1\12\1\177\4\12\5\0\1\12\1\0\2\12"+
    "\1\0\10\12\1\200\11\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\201\2\12\1\202\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\16\12"+
    "\1\203\3\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\16\12\1\204\3\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\4\12\1\205\15\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\206\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\16\12"+
    "\1\207\3\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\5\12\1\210\14\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\211\13\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\212\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\12\12"+
    "\1\213\7\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\16\12\1\214\3\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\215\17\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\22\12\11\0\5\12"+
    "\1\216\5\0\1\217\1\0\2\12\1\0\22\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\20\12\1\220"+
    "\1\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\221\13\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\222\15\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\4\12\1\223\15\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\6\12\1\224"+
    "\13\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\15\12\1\225\4\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\226\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\227\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\13\12\1\230"+
    "\6\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\231\13\12\11\0\6\12\5\0\1\232\1\0"+
    "\2\12\1\0\22\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\233\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\4\12\1\234\15\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\20\12\1\235"+
    "\1\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\14\12\1\236\5\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\11\12\1\237\10\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\4\12\1\240\15\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\17\12\1\241"+
    "\2\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\3\12\1\242\16\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\16\12\1\243\3\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\11\12\1\244\10\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\4\12\1\245"+
    "\15\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\20\12\1\246\1\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\247\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\11\12\1\250\10\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\251\21\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\22\12"+
    "\11\0\2\12\1\252\3\12\5\0\1\12\1\0\2\12"+
    "\1\0\14\12\1\253\5\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\254\16\12\11\0\6\12"+
    "\5\0\1\255\1\0\2\12\1\0\6\12\1\256\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\14\12"+
    "\1\257\5\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\12\1\260\20\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\4\12\1\261\15\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\10\12\1\262\11\12"+
    "\11\0\6\12\5\0\1\263\1\0\2\12\1\0\12\12"+
    "\1\264\7\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\3\12\1\265\16\12\11\0\6\12\5\0\1\266"+
    "\1\0\2\12\1\0\22\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\11\12\1\267\10\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\270\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\6\12"+
    "\1\271\13\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\12\1\272\20\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\16\12\1\273\3\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\14\12\1\274\5\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\275\1\276\1\12\1\277\3\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\16\12\1\300\3\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\3\12\1\301"+
    "\16\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\13\12\1\302\6\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\12\12\1\303\7\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\17\12\1\304\2\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\305\21\12"+
    "\11\0\6\12\5\0\1\306\1\0\2\12\1\0\4\12"+
    "\1\307\15\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\310\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\311\16\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\12\12\1\312\7\12"+
    "\11\0\6\12\5\0\1\313\1\0\2\12\1\0\22\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\314\6\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\315\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\316\16\12\11\0\6\12"+
    "\5\0\1\317\1\0\2\12\1\0\22\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\16\12\1\320\3\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\12\12"+
    "\1\321\7\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\12\1\322\20\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\13\12\1\323\1\12\1\324\4\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\17\12"+
    "\1\325\2\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\326\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\327\21\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\22\12\11\0\2\12\1\330"+
    "\3\12\5\0\1\12\1\0\2\12\1\0\16\12\1\331"+
    "\3\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\12\1\332\20\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\333\15\12\11\0\6\12\5\0"+
    "\1\334\1\0\2\12\1\0\22\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\17\12\1\335\1\12\1\336"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\1\337"+
    "\21\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\3\12\1\340\2\12\5\0\1\12\1\0"+
    "\2\12\1\0\16\12\1\341\3\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\11\12\1\342\10\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\4\12\1\343"+
    "\15\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\1\12\1\344\4\12\5\0\1\12\1\0"+
    "\2\12\1\0\3\12\1\345\16\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\14\12\1\346\5\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\11\12\1\347"+
    "\10\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\5\12\1\350\14\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\351\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\352\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\6\12\1\353"+
    "\13\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\354\21\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\12\12\1\355\4\12\1\356\2\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\2\12\1\357\17\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\14\12"+
    "\1\360\5\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\4\12\1\361\15\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\362\11\12\1\363\1\364\3\12"+
    "\1\365\2\12\11\0\2\12\1\366\3\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\367\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\17\12\1\370\2\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\10\12"+
    "\1\371\11\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\22\12\11\0\1\372\5\12\5\0\1\12\1\0"+
    "\2\12\1\0\3\12\1\373\16\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\374\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\22\12\11\0"+
    "\2\12\1\375\3\12\5\0\1\12\1\0\2\12\1\0"+
    "\11\12\1\376\10\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\16\12\1\377\3\12\11\0\6\12\5\0"+
    "\1\u0100\1\0\2\12\1\0\22\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u0101\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\12\1\u0102"+
    "\20\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\u0103\13\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\20\12\1\u0104\1\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u0105\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\12\1\u0106"+
    "\20\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\u0107\6\12\1\u0108\4\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u0109\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\12\1\u010a"+
    "\20\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\12\12\1\u010b\7\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\16\12\1\u010c\3\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\20\12\1\u010d\1\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\3\12\1\u010e"+
    "\16\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\2\12\1\u010f\3\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\u0110\15\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\16\12\1\u0111\3\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\12\12\1\u0112"+
    "\7\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\3\12\1\u0113\16\12\11\0\6\12\5\0\1\u0114\1\0"+
    "\2\12\1\0\22\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\16\12\1\u0115\3\12\11\0\6\12\5\0"+
    "\1\u0116\1\0\2\12\1\0\13\12\1\u0117\6\12\11\0"+
    "\6\12\5\0\1\u0118\1\0\2\12\1\0\22\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\5\12\1\u0119"+
    "\10\12\1\u011a\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\u011b\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\u011c\21\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\16\12\1\u011d\3\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\2\12"+
    "\1\u011e\17\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\12\1\u011f\20\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\15\12\1\u0120\4\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\16\12\1\u0121\3\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\16\12"+
    "\1\u0122\3\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\22\12\11\0\1\12\1\u0123\4\12\5\0\1\12"+
    "\1\0\2\12\1\0\16\12\1\u0124\3\12\11\0\6\12"+
    "\5\0\1\u0125\1\0\2\12\1\0\22\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\u0126\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\6\12"+
    "\1\u0127\13\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\5\12\1\u0128\14\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\16\12\1\u0129\3\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\22\12\11\0\1\12"+
    "\1\u012a\4\12\5\0\1\12\1\0\2\12\1\0\1\12"+
    "\1\u012b\20\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\17\12\1\u012c\2\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\22\12\11\0\3\12\1\u012d\2\12"+
    "\5\0\1\12\1\0\2\12\1\0\13\12\1\u012e\6\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\12\12"+
    "\1\u012f\7\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\21\12\1\u0130\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\20\12\1\u0131\1\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\7\12\1\u0132\12\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\16\12\1\u0133"+
    "\3\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\3\12\1\u0134\16\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\1\u0135\21\12\11\0\6\12\5\0\1\u0136"+
    "\1\0\2\12\1\0\22\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\u0137\16\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\10\12\1\u0138\11\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\6\12"+
    "\1\u0139\13\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\3\12\1\u013a\16\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\21\12\1\u013b\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u013c\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\10\12\1\u013d"+
    "\11\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\21\12\1\u013e\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\20\12\1\u013f\1\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\17\12\1\u0140\2\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\1\12\1\u0141\20\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\14\12"+
    "\1\u0142\5\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\16\12\1\u0143\3\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\14\12\1\u0144\5\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\u0145\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\3\12"+
    "\1\u0146\16\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\u0147\21\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\u0148\17\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\14\12\1\u0149\5\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\11\12\1\u014a"+
    "\10\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\10\12\1\u014b\11\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\10\12\1\u014c\11\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\20\12\1\u014d\1\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\15\12\1\u014e"+
    "\4\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\13\12\1\u014f\6\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\3\12\1\u0150\16\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\20\12\1\u0151\1\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\12\12\1\u0152"+
    "\7\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\12\12\1\u0153\7\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\11\12\1\u0154\10\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u0155\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\5\12\1\u0156"+
    "\14\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\12\1\u0157\20\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\u0158\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\12\12\1\u0159\7\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\17\12\1\u015a"+
    "\2\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\u015b\13\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\1\u015c\21\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\22\12\11\0\5\12\1\u015d\5\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\u015e\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\6\12\1\u015f"+
    "\13\12\11\0\6\12\5\0\1\u0160\1\0\2\12\1\0"+
    "\22\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\16\12\1\u0161\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\u0162\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u0163\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\13\12\1\u0164"+
    "\6\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\12\1\u0165\20\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\20\12\1\u0166\1\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\u0167\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\u0168\21\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\6\12"+
    "\1\u0169\13\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\12\12\1\u016a\7\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\u016b\13\12\11\0\6\12"+
    "\5\0\1\u016c\1\0\2\12\1\0\3\12\1\u016d\16\12"+
    "\11\0\6\12\5\0\1\u016e\1\0\2\12\1\0\22\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\3\12"+
    "\1\u016f\16\12\11\0\6\12\5\0\1\u0170\1\0\2\12"+
    "\1\0\22\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\1\12\1\u0171\20\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\13\12\1\u0172\6\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\16\12\1\u0173\3\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\u0174\6\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\u0175\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\u0176\13\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\1\u0177\21\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\12\12\1\u0178"+
    "\7\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\2\12\1\u0179\3\12\5\0\1\12\1\0"+
    "\2\12\1\0\3\12\1\u017a\16\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\u017b\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\11\12\1\u017c"+
    "\10\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\13\12\1\u017d\6\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\u017e\15\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u017f\6\12\11\0"+
    "\6\12\5\0\1\u0180\1\0\2\12\1\0\22\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\17\12\1\u0181"+
    "\2\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\16\12\1\u0182\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\20\12\1\u0183\1\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u0184\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\u0185\21\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\3\12"+
    "\1\u0186\16\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\10\12\1\u0187\11\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\13\12\1\u0188\6\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\20\12\1\u0189\1\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\u018a\6\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\17\12\1\u018b\2\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\4\12\1\u018c\15\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\21\12\1\u018d\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\10\12\1\u018e"+
    "\11\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\21\12\1\u018f\11\0\6\12\5\0\1\u0190\1\0\2\12"+
    "\1\0\22\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\17\12\1\u0191\2\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\u0192\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\u0193\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\22\12"+
    "\11\0\1\12\1\u0194\4\12\5\0\1\u0195\1\0\2\12"+
    "\1\0\22\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\20\12\1\u0196\1\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\u0197\21\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\20\12\1\u0198\1\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\17\12\1\u0199"+
    "\2\12\11\0\6\12\5\0\1\u019a\1\0\2\12\1\0"+
    "\22\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\14\12\1\u019b\5\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\u019c\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\u019d\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\13\12\1\u019e"+
    "\6\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\u019f\21\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\17\12\1\u01a0\2\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\u01a1\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\3\12\1\u01a2\16\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\1\12"+
    "\1\u01a3\20\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\u01a4\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\u01a5\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\1\u01a6\21\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\11\12\1\u01a7"+
    "\10\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\16\12\1\u01a8\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\17\12\1\u01a9\2\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u01aa\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\6\12\1\u01ab"+
    "\13\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\22\12\11\0\2\12\1\u01ac\3\12\5\0\1\12\1\0"+
    "\2\12\1\0\1\12\1\u01ad\20\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\16\12\1\u01ae\3\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\12\12\1\u01af"+
    "\7\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\13\12\1\u01b0\6\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\11\12\1\u01b1\10\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u01b2\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\3\12\1\u01b3"+
    "\16\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\12\1\u01b4\20\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\1\u01b5\21\12\11\0\6\12\5\0\1\u01b6"+
    "\1\0\2\12\1\0\22\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\u01b7\21\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\12\1\u01b8\20\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\1\u01b9\21\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\20\12"+
    "\1\u01ba\1\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\u01bb\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\u01bc\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\13\12\1\u01bd\6\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\11\12"+
    "\1\u01be\10\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\3\12\1\u01bf\16\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\14\12\1\u01c0\5\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\1\12\1\u01c1\20\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\17\12"+
    "\1\u01c2\2\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\u01c3\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\u01c4\13\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\6\12\1\u01c5\13\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\21\12"+
    "\1\u01c6\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\u01c7\13\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\u01c8\17\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\6\12\1\u01c9\13\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\14\12\1\u01ca"+
    "\5\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\16\12\1\u01cb\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\4\12\1\u01cc\15\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u01cd\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\12\12\1\u01ce"+
    "\7\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\16\12\1\u01cf\3\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\6\12\1\u01d0\13\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\13\12\1\u01d1\6\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\13\12\1\u01d2"+
    "\6\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\1\12\1\u01d3\20\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\u01d4\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\3\12\1\u01d5\16\12\11\0"+
    "\6\12\5\0\1\12\1\0\2\12\1\0\13\12\1\u01d6"+
    "\6\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\6\12\1\u01d7\13\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\20\12\1\u01d8\1\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\22\12\11\0\2\12\1\u01d9"+
    "\3\12\5\0\1\12\1\0\2\12\1\0\1\12\1\u01da"+
    "\20\12\11\0\6\12\5\0\1\12\1\0\2\12\1\0"+
    "\20\12\1\u01db\1\12\11\0\6\12\5\0\1\12\1\0"+
    "\2\12\1\0\13\12\1\u01dc\6\12\11\0\6\12\5\0"+
    "\1\12\1\0\2\12\1\0\1\u01dd\21\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\4\12\1\u01de\15\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\20\12"+
    "\1\u01df\1\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\u01e0\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\6\12\1\u01e1\13\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\16\12\1\u01e2\3\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\u01e3\6\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\u01e4\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\3\12\1\u01e5\16\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\17\12\1\u01e6\2\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\20\12"+
    "\1\u01e7\1\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\13\12\1\u01e8\6\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\1\12\1\u01e9\20\12\11\0\6\12"+
    "\5\0\1\12\1\0\2\12\1\0\13\12\1\u01ea\6\12"+
    "\11\0\6\12\5\0\1\12\1\0\2\12\1\0\13\12"+
    "\1\u01eb\6\12\11\0\6\12\5\0\1\12\1\0\2\12"+
    "\1\0\6\12\1\u01ec\13\12\11\0\6\12\5\0\1\12"+
    "\1\0\2\12\1\0\13\12\1\u01ed\6\12\11\0\6\12"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18146];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\1\0\1\1\2\11\3\1\1\11"+
    "\16\1\5\11\1\0\2\1\1\0\4\1\4\11\1\1"+
    "\1\11\2\1\1\11\31\1\4\11\6\1\1\11\u0199\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int indent;
  private boolean inIndentation = false;
  private int yycolumn;
  private Stack<Integer> indentationStack;
  private Stack<Integer> stateStack;
  public _CabalLexer() {
    this((java.io.Reader)null);
    indentationStack = ContainerUtil.newStack();
    stateStack = ContainerUtil.newStack();
  }


  public _CabalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CabalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 77: 
          { return PKGCONFIGDEPENDSKEY;
          }
        case 80: break;
        case 55: 
          { return BUILDTOOLSKEY;
          }
        case 81: break;
        case 49: 
          { return CCOPTIONSKEY;
          }
        case 82: break;
        case 79: 
          { return EXTRAGHCILIBRARIESKEY;
          }
        case 83: break;
        case 24: 
          { return AND;
          }
        case 84: break;
        case 78: 
          { return GHCSHAREDOPTIONSKEY;
          }
        case 85: break;
        case 26: 
          { return TRUE;
          }
        case 86: break;
        case 72: 
          { return INSTALLINCLUDESKEY;
          }
        case 87: break;
        case 8: 
          { return COLON;
          }
        case 88: break;
        case 22: 
          { return GTEQ;
          }
        case 89: break;
        case 21: 
          { return EQ;
          }
        case 90: break;
        case 47: 
          { yybegin(CONFIGNAME);
                           return EXECUTABLE;
          }
        case 91: break;
        case 34: 
          { return MAINISKEY;
          }
        case 92: break;
        case 23: 
          { return LTEQ;
          }
        case 93: break;
        case 56: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return BUGREPORTSKEY;
          }
        case 94: break;
        case 54: 
          { return JSSOURCESKEY;
          }
        case 95: break;
        case 17: 
          { indent = indent + (indent + 8) % 8;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 96: break;
        case 46: 
          { return BUILDTYPEKEY;
          }
        case 97: break;
        case 2: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     indent = yycolumn;
                     return VARIDREGEXP;
          }
        case 98: break;
        case 42: 
          { return CSOURCESKEY;
          }
        case 99: break;
        case 19: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 100: break;
        case 27: 
          { return TYPEKEY;
          }
        case 101: break;
        case 59: 
          { return GHCOPTIONSKEY;
          }
        case 102: break;
        case 9: 
          { return COMMA;
          }
        case 103: break;
        case 28: 
          { return NAMEKEY;
          }
        case 104: break;
        case 74: 
          { return DEFAULTLANGUAGEKEY;
          }
        case 105: break;
        case 43: 
          { return COPYRIGHTKEY;
          }
        case 106: break;
        case 7: 
          { if (inIndentation){
                            indent++;
                          }
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 107: break;
        case 35: 
          { return VERSIONKEY;
          }
        case 108: break;
        case 20: 
          { yybegin(FINDINDENTATIONCONTEXT);
                      return COLON;
          }
        case 109: break;
        case 36: 
          { return INCLUDESKEY;
          }
        case 110: break;
        case 60: 
          { return LICENSEFILEKEY;
          }
        case 111: break;
        case 1: 
          { return VARIDREGEXP;
          }
        case 112: break;
        case 3: 
          { yybegin(YYINITIAL);
                     return FREEFORMREGEXP;
          }
        case 113: break;
        case 32: 
          { return EXPOSEDKEY;
          }
        case 114: break;
        case 14: 
          { return LT;
          }
        case 115: break;
        case 52: 
          { return DATAFILESKEY;
          }
        case 116: break;
        case 30: 
          { return AUTHORKEY;
          }
        case 117: break;
        case 4: 
          { if (inIndentation){
                           yybegin(FINDINDENTATIONCONTEXT);
                           indent = 0;
                         }
                         return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 118: break;
        case 10: 
          { return DOT;
          }
        case 119: break;
        case 63: 
          { return BUILDDEPENDSKEY;
          }
        case 120: break;
        case 73: 
          { return OTHEREXTENSIONSKEY;
          }
        case 121: break;
        case 25: 
          { return COMMENT;
          }
        case 122: break;
        case 76: 
          { return EXTRASOURCEFILESKEY;
          }
        case 123: break;
        case 57: 
          { return TESTMODULEKEY;
          }
        case 124: break;
        case 29: 
          { return FALSE;
          }
        case 125: break;
        case 40: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return HOMEPAGEKEY;
          }
        case 126: break;
        case 5: 
          { if (inIndentation){
                            indent = indent + (indent + 8) % 8;
                          }
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 127: break;
        case 33: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return PACKAGEKEY;
          }
        case 128: break;
        case 13: 
          { return GT;
          }
        case 129: break;
        case 66: 
          { return EXTRALIBDIRSKEY;
          }
        case 130: break;
        case 65: 
          { return OTHERMODULESKEY;
          }
        case 131: break;
        case 71: 
          { return EXPOSEDMODULESKEY;
          }
        case 132: break;
        case 53: 
          { return FRAMEWORKSKEY;
          }
        case 133: break;
        case 11: 
          { return SLASH;
          }
        case 134: break;
        case 68: 
          { return EXTRALIBRARIESKEY;
          }
        case 135: break;
        case 15: 
          { yypushback(1);
                          if(stateStack.isEmpty()){
                            yybegin(YYINITIAL);
                          } else {
                            yybegin(stateStack.pop());
                          }
                          if (indentationStack.isEmpty()){
                             indentationStack.push(indent);
                             inIndentation = true;
                             return WHITESPACELBRACETOK;
                          }  else {
                             if(indent == indentationStack.peek()){
                               inIndentation = true;
                             } else {
                                   if(indent < indentationStack.peek()){
                                      indentationStack.pop();
                                      if (indentationStack.isEmpty()){
                                        inIndentation = false;

                                      } else {
                                        inIndentation = true;
                                      }
                                      return WHITESPACERBRACETOK;
                                   } /*else {
                                      Do not take multiple indentations into account
                                      not necessary for cabal and just gets us in trouble

                                      inIndentation = true;
                                      return WHITESPACELBRACETOK;
                                   }*/
                             }
                          }
          }
        case 136: break;
        case 50: 
          { yybegin(CONFIGNAME);
                           return TEST_SUITE;
          }
        case 137: break;
        case 12: 
          { return AT;
          }
        case 138: break;
        case 58: 
          { return TESTEDWITHKEY;
          }
        case 139: break;
        case 6: 
          { return NUMBERREGEXP;
          }
        case 140: break;
        case 18: 
          { indent++;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 16: 
          { indent = 0;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 142: break;
        case 62: 
          { return LICENSEFILESKEY;
          }
        case 143: break;
        case 48: 
          { return EXTENSIONSKEY;
          }
        case 144: break;
        case 61: 
          { return INCLUDEDIRSKEY;
          }
        case 145: break;
        case 41: 
          { return BUILDABLEKEY;
          }
        case 146: break;
        case 31: 
          { yybegin(FINDINDENTATIONCONTEXT);
                         indent = yycolumn;
                         return LIBRARY;
          }
        case 147: break;
        case 39: 
          { return DATADIRKEY;
          }
        case 148: break;
        case 64: 
          { return CABALVERSIONKEY;
          }
        case 149: break;
        case 51: 
          { stateStack.push(FREEFORM);
                    yybegin(FINDCOLON);
                    return MAINTAINERKEY;
          }
        case 150: break;
        case 44: 
          { return STABILITYKEY;
          }
        case 151: break;
        case 67: 
          { return HSSOURCEDIRSKEY;
          }
        case 152: break;
        case 69: 
          { return EXTRATMPFILESKEY;
          }
        case 153: break;
        case 70: 
          { return EXTRADOCFILESKEY;
          }
        case 154: break;
        case 37: 
          { return CATEGORYKEY;
          }
        case 155: break;
        case 45: 
          { return LDOPTIONSKEY;
          }
        case 156: break;
        case 75: 
          { return GHCPROFOPTIONSKEY;
          }
        case 157: break;
        case 38: 
          { return SYNOPSISKEY;
          }
        case 158: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (inIndentation){
                            inIndentation = false;
                            if (! indentationStack.isEmpty ()){
                              return WHITESPACERBRACETOK;
                            }
                          }
                          return null;
            }
            case 494: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
