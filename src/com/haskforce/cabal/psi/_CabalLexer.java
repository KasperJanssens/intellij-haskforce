/* The following code was generated by JFlex 1.4.3 on 2/11/15 11:02 AM */

package com.haskforce.cabal.psi;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.cabal.psi.CabalTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/11/15 11:02 AM from the specification file
 * <tt>/home/kasper/sources/intellij-haskforce/src/com/haskforce/cabal/psi/_CabalLexer.flex</tt>
 */
public class _CabalLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CONFIGNAME = 4;
  public static final int YYINITIAL = 0;
  public static final int FINDINDENTATIONCONTEXT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\10\1\1\22\0\1\51\5\0\1\41"+
    "\1\6\4\0\1\34\1\4\1\35\1\0\12\7\1\33\1\0\1\40"+
    "\1\36\1\37\1\0\1\0\21\6\1\45\10\6\1\0\1\0\1\0"+
    "\1\5\1\6\1\0\1\15\1\13\1\21\1\30\1\17\1\32\1\44"+
    "\1\43\1\12\1\50\1\46\1\11\1\26\1\31\1\27\1\25\1\6"+
    "\1\14\1\24\1\23\1\22\1\42\1\47\1\20\1\16\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\1\4\2\1\1\5\1\6"+
    "\16\1\1\7\1\10\1\11\1\0\1\12\1\13\1\0"+
    "\4\1\1\14\1\15\1\16\1\17\1\2\1\20\31\1"+
    "\1\21\1\22\1\23\1\24\5\1\2\25\64\1\1\26"+
    "\1\27\11\1\1\30\44\1\1\31\17\1\1\32\36\1"+
    "\1\33\17\1\1\34\12\1\1\35\1\1\1\36\7\1"+
    "\1\37\11\1\1\40\20\1\1\41\5\1\1\42\5\1"+
    "\1\43\4\1\1\44\13\1\1\45\11\1\1\46\2\1"+
    "\1\47\3\1\1\50\15\1\1\51\2\1\1\52\2\1"+
    "\1\53\1\54\6\1\1\55\2\1\1\56\1\57\3\1"+
    "\1\60\2\1\1\61\1\1\1\62\4\1\1\63\3\1"+
    "\1\64\11\1\1\65\1\66\7\1\1\67\1\70\1\71"+
    "\21\1\1\72\1\1\1\73\7\1\1\74\2\1\1\75"+
    "\5\1\1\76\11\1\1\77\3\1\1\100\1\101\1\1"+
    "\1\102\1\1\1\103\5\1\1\104\3\1\1\105\1\106"+
    "\1\1\1\107\4\1\1\110\1\1\1\111\1\112\1\1"+
    "\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\250\0\322\0\374"+
    "\0\u0126\0\250\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\250\0\250\0\250\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\250\0\250\0\250\0\250\0\u04ec"+
    "\0\250\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\u0906\0\250\0\250\0\250\0\250\0\u0930\0\u095a"+
    "\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\250\0\u0a2c\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260"+
    "\0\u128a\0\374\0\374\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\u13da\0\u1404\0\374\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2"+
    "\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722"+
    "\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872"+
    "\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2"+
    "\0\u19ec\0\374\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8"+
    "\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38"+
    "\0\u1c62\0\374\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e"+
    "\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae"+
    "\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\374\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274"+
    "\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4"+
    "\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514"+
    "\0\u253e\0\u2568\0\u2592\0\374\0\u25bc\0\374\0\u25e6\0\u2610"+
    "\0\u263a\0\u2664\0\u268e\0\u26b8\0\u26e2\0\374\0\u270c\0\u2736"+
    "\0\u2760\0\u278a\0\u27b4\0\u27de\0\u2808\0\u2832\0\u285c\0\374"+
    "\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac"+
    "\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc"+
    "\0\374\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce\0\374\0\u2bf8"+
    "\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\374\0\u2cca\0\u2cf4\0\u2d1e"+
    "\0\u2d48\0\374\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44"+
    "\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\374\0\u2f40\0\u2f6a"+
    "\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\374"+
    "\0\u30ba\0\u30e4\0\374\0\u310e\0\u3138\0\u3162\0\374\0\u318c"+
    "\0\u31b6\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc"+
    "\0\u3306\0\u3330\0\u335a\0\u3384\0\374\0\u33ae\0\u33d8\0\374"+
    "\0\u3402\0\u342c\0\374\0\374\0\u3456\0\u3480\0\u34aa\0\u34d4"+
    "\0\u34fe\0\u3528\0\374\0\u3552\0\u357c\0\374\0\374\0\u35a6"+
    "\0\u35d0\0\u35fa\0\374\0\u3624\0\u364e\0\374\0\u3678\0\374"+
    "\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\374\0\u374a\0\u3774\0\u379e"+
    "\0\374\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a\0\u38c4"+
    "\0\u38ee\0\u3918\0\374\0\374\0\u3942\0\u396c\0\u3996\0\u39c0"+
    "\0\u39ea\0\u3a14\0\u3a3e\0\374\0\u3a68\0\374\0\u3a92\0\u3abc"+
    "\0\u3ae6\0\u3b10\0\u3b3a\0\u3b64\0\u3b8e\0\u3bb8\0\u3be2\0\u3c0c"+
    "\0\u3c36\0\u3c60\0\u3c8a\0\u3cb4\0\u3cde\0\u3d08\0\u3d32\0\374"+
    "\0\u3d5c\0\374\0\u3d86\0\u3db0\0\u3dda\0\u3e04\0\u3e2e\0\u3e58"+
    "\0\u3e82\0\374\0\u3eac\0\u3ed6\0\374\0\u3f00\0\u3f2a\0\u3f54"+
    "\0\u3f7e\0\u3fa8\0\374\0\u3fd2\0\u3ffc\0\u4026\0\u4050\0\u407a"+
    "\0\u40a4\0\u40ce\0\u40f8\0\u4122\0\374\0\u414c\0\u4176\0\u41a0"+
    "\0\374\0\374\0\u41ca\0\374\0\u41f4\0\374\0\u421e\0\u4248"+
    "\0\u4272\0\u429c\0\u42c6\0\374\0\u42f0\0\u431a\0\u4344\0\374"+
    "\0\374\0\u436e\0\374\0\u4398\0\u43c2\0\u43ec\0\u4416\0\374"+
    "\0\u4440\0\374\0\374\0\u446a\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\10\1\16\1\10\1\17"+
    "\1\10\1\20\1\10\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\3\10\1\43\1\12"+
    "\2\44\1\45\1\46\4\44\1\47\40\44\1\47\4\0"+
    "\1\50\1\0\2\50\1\0\22\50\7\0\7\50\1\51"+
    "\2\0\1\5\125\0\1\52\1\0\2\10\1\0\22\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\22\10"+
    "\7\0\7\10\5\0\1\10\1\0\1\10\1\11\1\0"+
    "\22\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\53\15\10\1\54\2\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\20\10\1\55\1\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\11\10\1\56"+
    "\10\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\11\10\1\57\10\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\7\10\1\60\12\10\7\0\7\10\5\0"+
    "\1\61\1\0\2\10\1\0\4\10\1\62\3\10\1\63"+
    "\5\10\1\64\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\65\1\10\1\66\1\67\13\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\5\10"+
    "\1\70\4\10\1\71\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\4\10\1\72\15\10\7\0\4\10"+
    "\1\73\2\10\5\0\1\10\1\0\2\10\1\0\4\10"+
    "\1\74\15\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\12\10\1\75\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\4\10\1\76\1\10\1\77\13\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\4\10"+
    "\1\100\15\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\3\10\1\101\1\102\15\10\7\0\7\10\37\0"+
    "\1\103\51\0\1\104\51\0\1\105\54\0\1\106\14\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\107\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\110"+
    "\2\10\1\111\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\22\10\7\0\1\10\1\112\5\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\113\6\10\7\0"+
    "\7\10\5\0\1\50\1\0\2\50\1\0\22\50\7\0"+
    "\7\50\1\0\1\114\2\115\2\114\1\0\44\114\4\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\116\5\10\1\117"+
    "\11\10\7\0\7\10\5\0\1\120\1\0\2\10\1\0"+
    "\22\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\10\10\1\121\2\10\1\122\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\123\20\10\7\0"+
    "\2\10\1\124\4\10\5\0\1\10\1\0\2\10\1\0"+
    "\12\10\1\125\7\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\126\3\10\1\127\1\10\1\130"+
    "\5\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\13\10\1\131\6\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\132\7\10\1\133\7\10\7\0"+
    "\7\10\5\0\1\134\1\0\2\10\1\0\22\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\14\10\1\135"+
    "\5\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\11\10\1\136\10\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\14\10\1\137\5\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\140\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\20\10\1\141"+
    "\1\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\4\10\1\142\15\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\10\10\1\143\11\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\22\10\7\0\2\10\1\144"+
    "\4\10\5\0\1\10\1\0\2\10\1\0\1\10\1\145"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\22\10\7\0\1\10\1\146\5\10\5\0\1\10\1\0"+
    "\2\10\1\0\12\10\1\147\7\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\21\10\1\150\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\15\10\1\151\4\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\4\10"+
    "\1\152\15\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\153\21\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\154\16\10\7\0\7\10\5\0"+
    "\1\155\1\0\2\10\1\0\22\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\15\10\1\156\4\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\10\10\1\157"+
    "\11\10\7\0\7\10\5\0\1\160\1\0\2\10\1\0"+
    "\22\10\7\0\7\10\1\0\1\114\2\0\47\114\4\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\161\16\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\162"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\163\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\1\164\21\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\12\10\1\165\7\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\166\21\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\22\10\7\0"+
    "\3\10\1\167\3\10\5\0\1\10\1\0\2\10\1\0"+
    "\22\10\7\0\1\10\1\170\5\10\5\0\1\10\1\0"+
    "\2\10\1\0\10\10\1\171\11\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\172\2\10\1\173"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\174\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\16\10\1\175\3\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\176\15\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\177"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\200\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\5\10\1\201\14\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\202\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\203"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\12\10\1\204\7\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\16\10\1\205\3\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\206\17\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\22\10\7\0"+
    "\4\10\1\207\2\10\5\0\1\210\1\0\2\10\1\0"+
    "\22\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\211\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\212\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\213\15\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\4\10\1\214"+
    "\15\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\6\10\1\215\13\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\15\10\1\216\4\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\217\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\220"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\13\10\1\221\6\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\222\13\10\7\0\7\10\5\0"+
    "\1\223\1\0\2\10\1\0\22\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\224\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\4\10\1\225"+
    "\15\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\226\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\14\10\1\227\5\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\11\10\1\230\10\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\4\10\1\231"+
    "\15\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\17\10\1\232\2\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\233\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\16\10\1\234\3\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\11\10\1\235"+
    "\10\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\4\10\1\236\15\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\20\10\1\237\1\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\240\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\11\10\1\241"+
    "\10\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\242\21\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\22\10\7\0\2\10\1\243\4\10\5\0\1\10"+
    "\1\0\2\10\1\0\14\10\1\244\5\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\245\16\10"+
    "\7\0\7\10\5\0\1\246\1\0\2\10\1\0\6\10"+
    "\1\247\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\14\10\1\250\5\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\251\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\4\10\1\252\15\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\10\10"+
    "\1\253\11\10\7\0\7\10\5\0\1\254\1\0\2\10"+
    "\1\0\12\10\1\255\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\3\10\1\256\16\10\7\0\7\10"+
    "\5\0\1\257\1\0\2\10\1\0\22\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\11\10\1\260\10\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\261\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\262\13\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\263\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\16\10\1\264\3\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\14\10"+
    "\1\265\5\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\13\10\1\266\1\267\1\10\1\270\3\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\16\10\1\271"+
    "\3\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\3\10\1\272\16\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\273\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\12\10\1\274\7\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\17\10\1\275"+
    "\2\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\276\21\10\7\0\7\10\5\0\1\277\1\0\2\10"+
    "\1\0\4\10\1\300\15\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\14\10\1\301\5\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\302\16\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\12\10"+
    "\1\303\7\10\7\0\7\10\5\0\1\304\1\0\2\10"+
    "\1\0\22\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\13\10\1\305\6\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\6\10\1\306\13\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\307\16\10"+
    "\7\0\7\10\5\0\1\310\1\0\2\10\1\0\22\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\16\10"+
    "\1\311\3\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\12\10\1\312\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\313\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\13\10\1\314\1\10"+
    "\1\315\4\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\17\10\1\316\2\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\13\10\1\317\6\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\320\21\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\22\10\7\0"+
    "\2\10\1\321\4\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\322\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\1\10\1\323\20\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\324\15\10\7\0"+
    "\7\10\5\0\1\325\1\0\2\10\1\0\22\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\17\10\1\326"+
    "\1\10\1\327\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\330\21\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\22\10\7\0\5\10\1\331\1\10\5\0"+
    "\1\10\1\0\2\10\1\0\16\10\1\332\3\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\11\10\1\333"+
    "\10\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\4\10\1\334\15\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\22\10\7\0\1\10\1\335\5\10\5\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\336\16\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\14\10\1\337"+
    "\5\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\11\10\1\340\10\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\5\10\1\341\14\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\342\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\343"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\6\10\1\344\13\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\1\345\21\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\12\10\1\346\4\10\1\347\2\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\350\17\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\16\10\1\351\3\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\4\10\1\352\15\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\353\11\10\1\354"+
    "\1\355\3\10\1\356\2\10\7\0\2\10\1\357\4\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\10\1\360\20\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\17\10"+
    "\1\361\2\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\10\10\1\362\11\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\22\10\7\0\1\363\6\10\5\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\364\16\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\365"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\22\10\7\0\2\10\1\366\4\10\5\0\1\10\1\0"+
    "\2\10\1\0\11\10\1\367\10\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\16\10\1\370\3\10\7\0"+
    "\7\10\5\0\1\371\1\0\2\10\1\0\22\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\372"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\373\20\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\374\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\20\10\1\375\1\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\376"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\377\20\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u0100\6\10\1\u0101\4\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\u0102"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\u0103\20\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\12\10\1\u0104\7\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\16\10\1\u0105\3\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\20\10\1\u0106"+
    "\1\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\3\10\1\u0107\16\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\22\10\7\0\2\10\1\u0108\4\10\5\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\u0109\15\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\16\10\1\u010a"+
    "\3\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\12\10\1\u010b\7\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\u010c\16\10\7\0\7\10\5\0"+
    "\1\u010d\1\0\2\10\1\0\22\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\16\10\1\u010e\3\10\7\0"+
    "\7\10\5\0\1\u010f\1\0\2\10\1\0\13\10\1\u0110"+
    "\6\10\7\0\7\10\5\0\1\u0111\1\0\2\10\1\0"+
    "\22\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\5\10\1\u0112\10\10\1\u0113\3\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\u0114\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\u0115\21\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\3\10"+
    "\1\u0116\16\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\u0117\17\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\u0118\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\15\10\1\u0119\4\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\16\10"+
    "\1\u011a\3\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\16\10\1\u011b\3\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\22\10\7\0\1\10\1\u011c\5\10"+
    "\5\0\1\10\1\0\2\10\1\0\16\10\1\u011d\3\10"+
    "\7\0\7\10\5\0\1\u011e\1\0\2\10\1\0\22\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u011f\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\u0120\13\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\5\10\1\u0121\14\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\16\10\1\u0122\3\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\22\10"+
    "\7\0\1\10\1\u0123\5\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\10\1\u0124\20\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\17\10\1\u0125\2\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\22\10\7\0\5\10"+
    "\1\u0126\1\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u0127\6\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\12\10\1\u0128\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\21\10\1\u0129\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\20\10\1\u012a\1\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\7\10\1\u012b"+
    "\12\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\u012c\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\u012d\16\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\u012e\21\10\7\0\7\10"+
    "\5\0\1\u012f\1\0\2\10\1\0\22\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\u0130\16\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\10\10"+
    "\1\u0131\11\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\u0132\13\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\3\10\1\u0133\16\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\21\10\1\u0134\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\u0135"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\10\10\1\u0136\11\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\21\10\1\u0137\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\20\10\1\u0138\1\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\17\10\1\u0139\2\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\1\10"+
    "\1\u013a\20\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\14\10\1\u013b\5\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\16\10\1\u013c\3\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\14\10\1\u013d\5\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u013e\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\12\10\1\u013f\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\u0140\21\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\u0141\17\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\14\10\1\u0142"+
    "\5\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\11\10\1\u0143\10\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\10\10\1\u0144\11\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\10\10\1\u0145\11\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\20\10\1\u0146"+
    "\1\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\15\10\1\u0147\4\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\u0148\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\u0149\16\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\20\10\1\u014a"+
    "\1\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\12\10\1\u014b\7\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\12\10\1\u014c\7\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\11\10\1\u014d\10\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\u014e"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\5\10\1\u014f\14\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\1\10\1\u0150\20\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\u0151\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\12\10\1\u0152"+
    "\7\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\17\10\1\u0153\2\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u0154\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\u0155\21\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\22\10\7\0\4\10"+
    "\1\u0156\2\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u0157\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\u0158\13\10\7\0\7\10\5\0\1\u0159"+
    "\1\0\2\10\1\0\22\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\16\10\1\u015a\3\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\6\10\1\u015b\13\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\1\10"+
    "\1\u015c\20\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\13\10\1\u015d\6\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\u015e\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\20\10\1\u015f\1\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u0160\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\u0161\21\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u0162\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\u0163\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\u0164"+
    "\13\10\7\0\7\10\5\0\1\u0165\1\0\2\10\1\0"+
    "\3\10\1\u0166\16\10\7\0\7\10\5\0\1\u0167\1\0"+
    "\2\10\1\0\22\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\u0168\16\10\7\0\7\10\5\0"+
    "\1\u0169\1\0\2\10\1\0\22\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u016a\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\u016b"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\16\10\1\u016c\3\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\u016d\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\u016e\6\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\u016f"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\u0170\21\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\12\10\1\u0171\7\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\22\10\7\0\2\10\1\u0172\4\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\u0173\16\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u0174\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\11\10\1\u0175\10\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\13\10\1\u0176\6\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\4\10\1\u0177\15\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u0178\6\10\7\0\7\10\5\0\1\u0179\1\0\2\10"+
    "\1\0\22\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\17\10\1\u017a\2\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\16\10\1\u017b\3\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\20\10\1\u017c\1\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u017d\6\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\u017e\21\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\u017f\16\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\10\10\1\u0180\11\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\u0181"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\u0182\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\17\10\1\u0183\2\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\4\10\1\u0184\15\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\21\10\1\u0185"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\10\10"+
    "\1\u0186\11\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\21\10\1\u0187\7\0\7\10\5\0\1\u0188\1\0"+
    "\2\10\1\0\22\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\17\10\1\u0189\2\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u018a\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\u018b"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\22\10\7\0\1\10\1\u018c\5\10\5\0\1\u018d\1\0"+
    "\2\10\1\0\22\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\20\10\1\u018e\1\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\u018f\21\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\20\10\1\u0190\1\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\17\10"+
    "\1\u0191\2\10\7\0\7\10\5\0\1\u0192\1\0\2\10"+
    "\1\0\22\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\14\10\1\u0193\5\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\13\10\1\u0194\6\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\6\10\1\u0195\13\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u0196\6\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\u0197\21\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\17\10\1\u0198\2\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u0199\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\3\10\1\u019a"+
    "\16\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\1\10\1\u019b\20\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u019c\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u019d\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\u019e\21\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\11\10"+
    "\1\u019f\10\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\16\10\1\u01a0\3\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\17\10\1\u01a1\2\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\13\10\1\u01a2\6\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\6\10"+
    "\1\u01a3\13\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\22\10\7\0\2\10\1\u01a4\4\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\10\1\u01a5\20\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\16\10\1\u01a6\3\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\12\10"+
    "\1\u01a7\7\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\13\10\1\u01a8\6\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\11\10\1\u01a9\10\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\13\10\1\u01aa\6\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\3\10"+
    "\1\u01ab\16\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\10\1\u01ac\20\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\1\u01ad\21\10\7\0\7\10\5\0"+
    "\1\u01ae\1\0\2\10\1\0\22\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\u01af\21\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\10\1\u01b0\20\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\1\u01b1"+
    "\21\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\u01b2\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u01b3\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u01b4\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\u01b5"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\11\10\1\u01b6\10\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\3\10\1\u01b7\16\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\14\10\1\u01b8\5\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\1\10\1\u01b9"+
    "\20\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\17\10\1\u01ba\2\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\u01bb\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\u01bc\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\6\10\1\u01bd"+
    "\13\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\21\10\1\u01be\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\u01bf\13\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\u01c0\17\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\6\10\1\u01c1\13\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\14\10"+
    "\1\u01c2\5\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\16\10\1\u01c3\3\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\4\10\1\u01c4\15\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\13\10\1\u01c5\6\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\12\10"+
    "\1\u01c6\7\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\16\10\1\u01c7\3\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\6\10\1\u01c8\13\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\13\10\1\u01c9\6\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u01ca\6\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\1\10\1\u01cb\20\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\13\10\1\u01cc\6\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\3\10\1\u01cd\16\10"+
    "\7\0\7\10\5\0\1\10\1\0\2\10\1\0\13\10"+
    "\1\u01ce\6\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\6\10\1\u01cf\13\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\20\10\1\u01d0\1\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\22\10\7\0\2\10"+
    "\1\u01d1\4\10\5\0\1\10\1\0\2\10\1\0\1\10"+
    "\1\u01d2\20\10\7\0\7\10\5\0\1\10\1\0\2\10"+
    "\1\0\20\10\1\u01d3\1\10\7\0\7\10\5\0\1\10"+
    "\1\0\2\10\1\0\13\10\1\u01d4\6\10\7\0\7\10"+
    "\5\0\1\10\1\0\2\10\1\0\1\u01d5\21\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\4\10\1\u01d6"+
    "\15\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\u01d7\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\u01d8\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\6\10\1\u01d9\13\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\16\10\1\u01da"+
    "\3\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\13\10\1\u01db\6\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u01dc\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\3\10\1\u01dd\16\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\17\10\1\u01de"+
    "\2\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\20\10\1\u01df\1\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\13\10\1\u01e0\6\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\u01e1\20\10\7\0"+
    "\7\10\5\0\1\10\1\0\2\10\1\0\13\10\1\u01e2"+
    "\6\10\7\0\7\10\5\0\1\10\1\0\2\10\1\0"+
    "\13\10\1\u01e3\6\10\7\0\7\10\5\0\1\10\1\0"+
    "\2\10\1\0\6\10\1\u01e4\13\10\7\0\7\10\5\0"+
    "\1\10\1\0\2\10\1\0\13\10\1\u01e5\6\10\7\0"+
    "\7\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17556];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\2\11\3\1\1\11\16\1\3\11"+
    "\1\0\2\1\1\0\4\1\4\11\1\1\1\11\31\1"+
    "\4\11\6\1\1\11\u0198\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int indent;
  private boolean inIndentation = false;
  private int yycolumn;
  private Stack<Integer> indentationStack;
  public _CabalLexer() {
    this((java.io.Reader)null);
    indentationStack = ContainerUtil.newStack();
  }


  public _CabalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CabalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return PKGCONFIGDEPENDSKEY;
          }
        case 76: break;
        case 52: 
          { return BUILDTOOLSKEY;
          }
        case 77: break;
        case 29: 
          { return PACKAGEKEY;
          }
        case 78: break;
        case 46: 
          { return CCOPTIONSKEY;
          }
        case 79: break;
        case 75: 
          { return EXTRAGHCILIBRARIESKEY;
          }
        case 80: break;
        case 20: 
          { return AND;
          }
        case 81: break;
        case 74: 
          { return GHCSHAREDOPTIONSKEY;
          }
        case 82: break;
        case 22: 
          { return TRUE;
          }
        case 83: break;
        case 68: 
          { return INSTALLINCLUDESKEY;
          }
        case 84: break;
        case 7: 
          { return COLON;
          }
        case 85: break;
        case 18: 
          { return GTEQ;
          }
        case 86: break;
        case 17: 
          { return EQ;
          }
        case 87: break;
        case 44: 
          { yybegin(CONFIGNAME);
                           return EXECUTABLE;
          }
        case 88: break;
        case 30: 
          { return MAINISKEY;
          }
        case 89: break;
        case 19: 
          { return LTEQ;
          }
        case 90: break;
        case 43: 
          { return BUGREPORTSKEY;
          }
        case 91: break;
        case 51: 
          { return JSSOURCESKEY;
          }
        case 92: break;
        case 14: 
          { indent = indent + (indent + 8) % 8;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 93: break;
        case 42: 
          { return BUILDTYPEKEY;
          }
        case 94: break;
        case 2: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     indent = yycolumn;
                     return VARIDREGEXP;
          }
        case 95: break;
        case 38: 
          { return CSOURCESKEY;
          }
        case 96: break;
        case 16: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 97: break;
        case 23: 
          { return TYPEKEY;
          }
        case 98: break;
        case 55: 
          { return GHCOPTIONSKEY;
          }
        case 99: break;
        case 8: 
          { return COMMA;
          }
        case 100: break;
        case 24: 
          { return NAMEKEY;
          }
        case 101: break;
        case 39: 
          { return COPYRIGHTKEY;
          }
        case 102: break;
        case 70: 
          { return DEFAULTLANGUAGEKEY;
          }
        case 103: break;
        case 6: 
          { if (inIndentation){
                            indent++;
                          }
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 104: break;
        case 31: 
          { return VERSIONKEY;
          }
        case 105: break;
        case 32: 
          { return INCLUDESKEY;
          }
        case 106: break;
        case 56: 
          { return LICENSEFILEKEY;
          }
        case 107: break;
        case 1: 
          { return VARIDREGEXP;
          }
        case 108: break;
        case 28: 
          { return EXPOSEDKEY;
          }
        case 109: break;
        case 11: 
          { return LT;
          }
        case 110: break;
        case 49: 
          { return DATAFILESKEY;
          }
        case 111: break;
        case 26: 
          { return AUTHORKEY;
          }
        case 112: break;
        case 3: 
          { if (inIndentation){
                           yybegin(FINDINDENTATIONCONTEXT);
                           indent = 0;
                         }
                         return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 113: break;
        case 9: 
          { return DOT;
          }
        case 114: break;
        case 59: 
          { return BUILDDEPENDSKEY;
          }
        case 115: break;
        case 69: 
          { return OTHEREXTENSIONSKEY;
          }
        case 116: break;
        case 21: 
          { return COMMENT;
          }
        case 117: break;
        case 72: 
          { return EXTRASOURCEFILESKEY;
          }
        case 118: break;
        case 48: 
          { return MAINTAINERKEY;
          }
        case 119: break;
        case 53: 
          { return TESTMODULEKEY;
          }
        case 120: break;
        case 25: 
          { return FALSE;
          }
        case 121: break;
        case 4: 
          { if (inIndentation){
                            indent = indent + (indent + 8) % 8;
                          }
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 122: break;
        case 10: 
          { return GT;
          }
        case 123: break;
        case 62: 
          { return EXTRALIBDIRSKEY;
          }
        case 124: break;
        case 36: 
          { return HOMEPAGEKEY;
          }
        case 125: break;
        case 12: 
          { yypushback(1);
                          yybegin(YYINITIAL);
                          if (indentationStack.isEmpty()){
                             indentationStack.push(indent);
                             inIndentation = true;
                             return WHITESPACELBRACETOK;
                          }  else {
                             if(indent == indentationStack.peek()){
                               inIndentation = true;
                             } else {
                                   if(indent < indentationStack.peek()){
                                      indentationStack.pop();
                                      if (indentationStack.isEmpty()){
                                        inIndentation = false;

                                      } else {
                                        inIndentation = true;
                                      }
                                      return WHITESPACERBRACETOK;
                                   } /*else {
                                      Do not take multiple indentations into account
                                      not necessary for cabal and just gets us in trouble

                                      inIndentation = true;
                                      return WHITESPACELBRACETOK;
                                   }*/
                             }
                          }
          }
        case 126: break;
        case 61: 
          { return OTHERMODULESKEY;
          }
        case 127: break;
        case 67: 
          { return EXPOSEDMODULESKEY;
          }
        case 128: break;
        case 50: 
          { return FRAMEWORKSKEY;
          }
        case 129: break;
        case 64: 
          { return EXTRALIBRARIESKEY;
          }
        case 130: break;
        case 47: 
          { yybegin(CONFIGNAME);
                           return TEST_SUITE;
          }
        case 131: break;
        case 54: 
          { return TESTEDWITHKEY;
          }
        case 132: break;
        case 5: 
          { return NUMBERREGEXP;
          }
        case 133: break;
        case 15: 
          { indent++;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 13: 
          { indent = 0;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 135: break;
        case 58: 
          { return LICENSEFILESKEY;
          }
        case 136: break;
        case 45: 
          { return EXTENSIONSKEY;
          }
        case 137: break;
        case 57: 
          { return INCLUDEDIRSKEY;
          }
        case 138: break;
        case 37: 
          { return BUILDABLEKEY;
          }
        case 139: break;
        case 27: 
          { yybegin(FINDINDENTATIONCONTEXT);
                         indent = yycolumn;
                         return LIBRARY;
          }
        case 140: break;
        case 35: 
          { return DATADIRKEY;
          }
        case 141: break;
        case 60: 
          { return CABALVERSIONKEY;
          }
        case 142: break;
        case 40: 
          { return STABILITYKEY;
          }
        case 143: break;
        case 63: 
          { return HSSOURCEDIRSKEY;
          }
        case 144: break;
        case 65: 
          { return EXTRATMPFILESKEY;
          }
        case 145: break;
        case 66: 
          { return EXTRADOCFILESKEY;
          }
        case 146: break;
        case 33: 
          { return CATEGORYKEY;
          }
        case 147: break;
        case 41: 
          { return LDOPTIONSKEY;
          }
        case 148: break;
        case 71: 
          { return GHCPROFOPTIONSKEY;
          }
        case 149: break;
        case 34: 
          { return SYNOPSISKEY;
          }
        case 150: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (inIndentation){
                            inIndentation = false;
                            if (! indentationStack.isEmpty ()){
                              return WHITESPACERBRACETOK;
                            }
                          }
                          return null;
            }
            case 486: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
