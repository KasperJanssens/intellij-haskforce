/* The following code was generated by JFlex 1.4.3 on 2/26/15 9:36 AM */

package com.haskforce.cabal.psi;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.cabal.psi.CabalTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/26/15 9:36 AM from the specification file
 * <tt>/home/kasper/sources/intellij-haskforce/src/com/haskforce/cabal/psi/_CabalParsingLexer.flex</tt>
 */
public class _CabalParsingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ININDENTATIONCONTEXT = 14;
  public static final int FREEFORM = 6;
  public static final int CONFIGNAME = 4;
  public static final int VARID = 10;
  public static final int YYINITIAL = 0;
  public static final int FILEPATH = 12;
  public static final int FINDINDENTATIONCONTEXT = 2;
  public static final int FINDCOLON = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\51\5\0\1\47"+
    "\1\6\2\0\1\11\1\0\1\42\1\4\1\43\1\7\12\10\1\50"+
    "\1\0\1\46\1\44\1\45\2\0\32\6\3\0\1\5\1\6\1\0"+
    "\1\16\1\14\1\24\1\33\1\22\1\20\1\21\1\36\1\13\1\40"+
    "\1\41\1\12\1\31\1\34\1\32\1\30\1\6\1\15\1\27\1\26"+
    "\1\25\1\35\1\37\1\23\1\17\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\1\3\1\4\1\0\2\5"+
    "\1\6\23\0\1\7\1\1\1\2\1\6\1\10\2\11"+
    "\1\3\1\12\2\13\2\3\1\14\1\15\1\0\1\16"+
    "\1\17\1\0\1\4\1\20\35\0\2\3\1\21\1\22"+
    "\1\23\1\24\2\25\43\0\2\3\7\0\1\26\13\0"+
    "\1\27\13\0\1\30\4\0\1\3\1\31\45\0\1\32"+
    "\7\0\1\33\26\0\1\34\11\0\1\35\1\36\21\0"+
    "\1\37\12\0\1\40\1\0\1\41\5\0\1\42\1\0"+
    "\1\43\5\0\1\44\23\0\1\45\5\0\1\46\6\0"+
    "\1\47\3\0\1\50\7\0\1\51\15\0\1\52\2\0"+
    "\1\53\3\0\1\54\12\0\1\55\2\0\1\56\3\0"+
    "\1\57\3\0\1\60\6\0\1\61\2\0\1\62\1\63"+
    "\3\0\1\64\2\0\1\65\3\0\1\66\3\0\1\67"+
    "\1\0\1\70\2\0\1\71\10\0\1\72\1\73\4\0"+
    "\1\74\1\0\1\75\22\0\1\76\1\0\1\77\1\100"+
    "\11\0\1\101\2\0\1\102\5\0\1\103\11\0\1\104"+
    "\3\0\1\105\1\0\1\106\1\0\1\107\1\110\5\0"+
    "\1\111\3\0\1\112\1\113\1\114\4\0\1\115\1\0"+
    "\1\116\1\117\1\0\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u017a\0\u04c2"+
    "\0\u04ec\0\u04ec\0\u017a\0\u0516\0\u017a\0\u0540\0\u017a\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u017a\0\u017a\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u017a\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u017a\0\u017a\0\u017a\0\u017a\0\u0bfa\0\u017a"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a"+
    "\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a"+
    "\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a"+
    "\0\u12b4\0\u12de\0\u1308\0\u1332\0\u017a\0\u135c\0\u1386\0\u13b0"+
    "\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500"+
    "\0\u017a\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u017a\0\u16f8\0\u1722\0\u174c"+
    "\0\u1776\0\u17a0\0\u0540\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872"+
    "\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2"+
    "\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12"+
    "\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u0540\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u017a\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u017a"+
    "\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4"+
    "\0\u23ee\0\u017a\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a"+
    "\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\u017a"+
    "\0\u28da\0\u017a\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac\0\u29d6"+
    "\0\u2a00\0\u017a\0\u2a2a\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc"+
    "\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c"+
    "\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c"+
    "\0\u2dc6\0\u2df0\0\u2e1a\0\u017a\0\u2e44\0\u2e6e\0\u2e98\0\u2ec2"+
    "\0\u2eec\0\u017a\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8"+
    "\0\u017a\0\u3012\0\u303c\0\u3066\0\u017a\0\u3090\0\u30ba\0\u30e4"+
    "\0\u310e\0\u3138\0\u3162\0\u318c\0\u017a\0\u31b6\0\u31e0\0\u320a"+
    "\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc\0\u3306\0\u3330\0\u335a"+
    "\0\u3384\0\u33ae\0\u017a\0\u33d8\0\u3402\0\u017a\0\u342c\0\u3456"+
    "\0\u3480\0\u017a\0\u34aa\0\u34d4\0\u34fe\0\u3528\0\u3552\0\u357c"+
    "\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u017a\0\u364e\0\u3678\0\u017a"+
    "\0\u36a2\0\u36cc\0\u36f6\0\u017a\0\u3720\0\u374a\0\u3774\0\u017a"+
    "\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u017a\0\u389a"+
    "\0\u38c4\0\u017a\0\u017a\0\u38ee\0\u3918\0\u3942\0\u017a\0\u396c"+
    "\0\u3996\0\u017a\0\u39c0\0\u39ea\0\u3a14\0\u017a\0\u3a3e\0\u3a68"+
    "\0\u3a92\0\u017a\0\u3abc\0\u017a\0\u3ae6\0\u3b10\0\u017a\0\u3b3a"+
    "\0\u3b64\0\u3b8e\0\u3bb8\0\u3be2\0\u3c0c\0\u3c36\0\u3c60\0\u017a"+
    "\0\u017a\0\u3c8a\0\u3cb4\0\u3cde\0\u3d08\0\u017a\0\u3d32\0\u3d5c"+
    "\0\u3d86\0\u3db0\0\u3dda\0\u3e04\0\u3e2e\0\u3e58\0\u3e82\0\u3eac"+
    "\0\u3ed6\0\u3f00\0\u3f2a\0\u3f54\0\u3f7e\0\u3fa8\0\u3fd2\0\u3ffc"+
    "\0\u4026\0\u4050\0\u017a\0\u407a\0\u017a\0\u017a\0\u40a4\0\u40ce"+
    "\0\u40f8\0\u4122\0\u414c\0\u4176\0\u41a0\0\u41ca\0\u41f4\0\u017a"+
    "\0\u421e\0\u4248\0\u017a\0\u4272\0\u429c\0\u42c6\0\u42f0\0\u431a"+
    "\0\u017a\0\u4344\0\u436e\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u4440"+
    "\0\u446a\0\u4494\0\u017a\0\u44be\0\u44e8\0\u4512\0\u017a\0\u453c"+
    "\0\u017a\0\u4566\0\u017a\0\u017a\0\u4590\0\u45ba\0\u45e4\0\u460e"+
    "\0\u4638\0\u017a\0\u4662\0\u468c\0\u46b6\0\u017a\0\u017a\0\u017a"+
    "\0\u46e0\0\u470a\0\u4734\0\u475e\0\u017a\0\u4788\0\u017a\0\u017a"+
    "\0\u47b2\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\11\1\12\1\13\1\14\5\0\1\15\1\16"+
    "\1\17\1\0\1\20\1\0\1\21\1\22\1\23\1\0"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\10\0\1\13\2\37"+
    "\2\13\45\37\1\13\4\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\30\40\7\0\1\13\1\41\2\0\46\41"+
    "\1\42\3\0\1\13\44\0\1\43\1\13\1\0\1\44"+
    "\1\45\1\13\1\46\1\0\1\46\1\47\1\50\1\51"+
    "\6\46\1\52\5\46\1\53\13\46\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\0\1\13\4\0\1\62\1\0"+
    "\34\62\1\0\1\62\5\0\1\13\2\63\2\13\45\63"+
    "\1\13\2\0\1\12\125\0\1\64\60\0\1\65\17\0"+
    "\1\66\52\0\1\67\42\0\1\70\51\0\1\71\36\0"+
    "\1\72\2\0\1\73\72\0\1\74\36\0\1\75\32\0"+
    "\1\76\11\0\1\77\5\0\1\100\5\0\1\101\36\0"+
    "\1\102\2\0\1\103\46\0\1\104\6\0\1\105\41\0"+
    "\1\106\22\0\1\107\26\0\1\110\61\0\1\111\41\0"+
    "\1\112\3\0\1\113\45\0\1\114\55\0\1\115\56\0"+
    "\1\116\2\0\1\117\46\0\1\120\26\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\30\40\10\0\1\41\2\0"+
    "\47\41\2\0\1\45\53\0\1\46\1\0\1\46\1\0"+
    "\1\46\1\0\30\46\14\0\1\46\1\0\1\46\1\0"+
    "\1\50\1\51\30\46\20\0\2\51\44\0\1\46\1\0"+
    "\1\46\1\0\1\46\1\0\4\46\1\121\23\46\14\0"+
    "\1\46\1\0\1\46\1\0\1\46\1\0\3\46\1\122"+
    "\24\46\54\0\1\123\51\0\1\124\51\0\1\125\54\0"+
    "\1\126\6\0\1\62\1\0\34\62\1\0\1\62\6\0"+
    "\1\127\2\130\2\127\1\0\44\127\14\0\1\131\7\0"+
    "\1\132\31\0\1\133\71\0\1\134\40\0\1\135\5\0"+
    "\1\136\56\0\1\137\41\0\1\140\51\0\1\141\57\0"+
    "\1\142\47\0\1\143\3\0\1\144\1\0\1\145\50\0"+
    "\1\146\36\0\1\147\11\0\1\150\27\0\1\151\75\0"+
    "\1\152\51\0\1\153\50\0\1\154\56\0\1\155\33\0"+
    "\1\156\57\0\1\157\46\0\1\160\43\0\1\161\20\0"+
    "\1\162\53\0\1\163\41\0\1\164\43\0\1\165\6\0"+
    "\1\166\53\0\1\167\35\0\1\170\40\0\1\171\76\0"+
    "\1\172\24\0\1\173\51\0\1\46\1\0\1\46\1\0"+
    "\1\46\1\0\1\174\27\46\14\0\1\46\1\0\1\46"+
    "\1\0\1\46\1\0\13\46\1\175\14\46\10\0\1\127"+
    "\2\0\47\127\15\0\1\176\56\0\1\177\61\0\1\200"+
    "\31\0\1\201\51\0\1\202\43\0\1\203\103\0\1\204"+
    "\34\0\1\205\61\0\1\206\24\0\1\207\71\0\1\210"+
    "\42\0\1\211\4\0\1\212\61\0\1\213\51\0\1\214"+
    "\35\0\1\215\55\0\1\216\61\0\1\217\36\0\1\220"+
    "\54\0\1\221\55\0\1\222\55\0\1\223\33\0\1\224"+
    "\76\0\1\225\14\0\1\226\101\0\1\227\42\0\1\230"+
    "\46\0\1\231\45\0\1\232\51\0\1\233\57\0\1\234"+
    "\47\0\1\235\56\0\1\236\51\0\1\237\44\0\1\240"+
    "\56\0\1\241\26\0\1\46\1\0\1\46\1\0\1\46"+
    "\1\0\15\46\1\242\12\46\14\0\1\46\1\0\1\46"+
    "\1\0\1\46\1\0\10\46\1\243\17\46\26\0\1\244"+
    "\67\0\1\245\45\0\1\246\46\0\1\247\57\0\1\250"+
    "\33\0\1\251\66\0\1\252\41\0\1\253\56\0\1\254"+
    "\1\255\1\0\1\256\44\0\1\257\42\0\1\260\67\0"+
    "\1\261\44\0\1\262\47\0\1\263\36\0\1\264\60\0"+
    "\1\265\60\0\1\266\36\0\1\267\40\0\1\270\15\0"+
    "\1\271\57\0\1\272\34\0\1\273\54\0\1\274\57\0"+
    "\1\275\31\0\1\276\21\0\1\277\41\0\1\300\50\0"+
    "\1\301\40\0\1\302\72\0\1\303\41\0\1\304\47\0"+
    "\1\305\70\0\1\306\47\0\1\307\53\0\1\310\23\0"+
    "\1\46\1\0\1\46\1\0\1\46\1\0\10\46\1\311"+
    "\17\46\25\0\1\312\63\0\1\313\50\0\1\314\56\0"+
    "\1\315\22\0\1\316\11\0\1\317\55\0\1\320\44\0"+
    "\1\321\73\0\1\322\50\0\1\323\30\0\1\324\64\0"+
    "\1\325\47\0\1\326\27\0\1\327\74\0\1\330\44\0"+
    "\1\331\44\0\1\332\40\0\1\333\77\0\1\334\45\0"+
    "\1\335\36\0\1\336\65\0\1\337\1\0\1\340\53\0"+
    "\1\341\45\0\1\342\34\0\1\343\60\0\1\344\62\0"+
    "\1\345\32\0\1\346\54\0\1\347\45\0\1\350\43\0"+
    "\1\351\65\0\1\352\12\0\1\353\30\0\1\354\52\0"+
    "\1\355\70\0\1\356\44\0\1\357\42\0\1\360\60\0"+
    "\1\361\43\0\1\362\54\0\1\363\42\0\1\364\60\0"+
    "\1\365\55\0\1\366\4\0\1\367\32\0\1\370\65\0"+
    "\1\371\53\0\1\372\35\0\1\373\65\0\1\374\45\0"+
    "\1\375\41\0\1\376\45\0\1\377\6\0\1\u0100\4\0"+
    "\1\u0101\1\u0102\3\0\1\u0103\31\0\1\u0104\71\0\1\u0105"+
    "\42\0\1\u0106\62\0\1\u0107\31\0\1\u0108\47\0\1\u0109"+
    "\57\0\1\u010a\55\0\1\u010b\56\0\1\u010c\23\0\1\u010d"+
    "\60\0\1\u010e\51\0\1\u010f\60\0\1\u0110\63\0\1\u0111"+
    "\44\0\1\u0112\35\0\1\u0113\60\0\1\u0114\6\0\1\u0115"+
    "\33\0\1\u0116\51\0\1\u0117\64\0\1\u0118\53\0\1\u0119"+
    "\55\0\1\u011a\32\0\1\u011b\55\0\1\u011c\45\0\1\u011d"+
    "\40\0\1\u011e\77\0\1\u011f\46\0\1\u0120\41\0\1\u0121"+
    "\12\0\1\u0122\41\0\1\u0123\41\0\1\u0124\71\0\1\u0125"+
    "\34\0\1\u0126\51\0\1\u0127\54\0\1\u0128\44\0\1\u0129"+
    "\52\0\1\u012a\50\0\1\u012b\74\0\1\u012c\44\0\1\u012d"+
    "\52\0\1\u012e\51\0\1\u012f\51\0\1\u0130\23\0\1\u0131"+
    "\67\0\1\u0132\51\0\1\u0133\46\0\1\u0134\64\0\1\u0135"+
    "\55\0\1\u0136\26\0\1\u0137\71\0\1\u0138\55\0\1\u0139"+
    "\41\0\1\u013a\50\0\1\u013b\43\0\1\u013c\65\0\1\u013d"+
    "\40\0\1\u013e\60\0\1\u013f\31\0\1\u0140\54\0\1\u0141"+
    "\40\0\1\u0142\73\0\1\u0143\47\0\1\u0144\47\0\1\u0145"+
    "\53\0\1\u0146\45\0\1\u0147\65\0\1\u0148\21\0\1\u0149"+
    "\75\0\1\u014a\53\0\1\u014b\47\0\1\u014c\43\0\1\u014d"+
    "\44\0\1\u014e\75\0\1\u014f\32\0\1\u0150\33\0\1\u0151"+
    "\77\0\1\u0152\31\0\1\u0153\53\0\1\u0154\61\0\1\u0155"+
    "\55\0\1\u0156\46\0\1\u0157\50\0\1\u0158\61\0\1\u0159"+
    "\46\0\1\u015a\47\0\1\u015b\37\0\1\u015c\70\0\1\u015d"+
    "\43\0\1\u015e\51\0\1\u015f\50\0\1\u0160\37\0\1\u0161"+
    "\55\0\1\u0162\45\0\1\u0163\60\0\1\u0164\55\0\1\u0165"+
    "\56\0\1\u0166\40\0\1\u0167\41\0\1\u0168\52\0\1\u0169"+
    "\60\0\1\u016a\51\0\1\u016b\42\0\1\u016c\65\0\1\u016d"+
    "\35\0\1\u016e\17\0\1\u016f\40\0\1\u0170\41\0\1\u0171"+
    "\61\0\1\u0172\55\0\1\u0173\52\0\1\u0174\55\0\1\u0175"+
    "\50\0\1\u0176\53\0\1\u0177\37\0\1\u0178\33\0\1\u0179"+
    "\10\0\1\u017a\47\0\1\u017b\42\0\1\u017c\62\0\1\u017d"+
    "\40\0\1\u017e\74\0\1\u017f\54\0\1\u0180\46\0\1\u0181"+
    "\51\0\1\u0182\44\0\1\u0183\41\0\1\u0184\65\0\1\u0185"+
    "\44\0\1\u0186\45\0\1\u0187\56\0\1\u0188\54\0\1\u0189"+
    "\53\0\1\u018a\40\0\1\u018b\65\0\1\u018c\23\0\1\u018d"+
    "\74\0\1\u018e\34\0\1\u018f\73\0\1\u0190\30\0\1\u0191"+
    "\65\0\1\u0192\56\0\1\u0193\44\0\1\u0194\26\0\1\u0195"+
    "\75\0\1\u0196\50\0\1\u0197\55\0\1\u0198\34\0\1\u0199"+
    "\37\0\1\u019a\65\0\1\u019b\55\0\1\u019c\45\0\1\u019d"+
    "\64\0\1\u019e\31\0\1\u019f\60\0\1\u01a0\65\0\1\u01a1"+
    "\17\0\1\u01a2\101\0\1\u01a3\27\0\1\u01a4\73\0\1\u01a5"+
    "\51\0\1\u01a6\50\0\1\u01a7\40\0\1\u01a8\53\0\1\u01a9"+
    "\42\0\1\u01aa\67\0\1\u01ab\50\0\1\u01ac\45\0\1\u01ad"+
    "\36\0\1\u01ae\53\0\1\u01af\46\0\1\u01b0\52\0\1\u01b1"+
    "\60\0\1\u01b2\42\0\1\u01b3\63\0\1\u01b4\56\0\1\u01b5"+
    "\52\0\1\u01b6\45\0\1\u01b7\44\0\1\u01b8\50\0\1\u01b9"+
    "\43\0\1\u01ba\65\0\1\u01bb\34\0\1\u01bc\66\0\1\u01bd"+
    "\51\0\1\u01be\52\0\1\u01bf\34\0\1\u01c0\53\0\1\u01c1"+
    "\47\0\1\u01c2\51\0\1\u01c3\50\0\1\u01c4\43\0\1\u01c5"+
    "\57\0\1\u01c6\51\0\1\u01c7\73\0\1\u01c8\37\0\1\u01c9"+
    "\42\0\1\u01ca\65\0\1\u01cb\47\0\1\u01cc\41\0\1\u01cd"+
    "\61\0\1\u01ce\52\0\1\u01cf\55\0\1\u01d0\46\0\1\u01d1"+
    "\44\0\1\u01d2\43\0\1\u01d3\57\0\1\u01d4\47\0\1\u01d5"+
    "\53\0\1\u01d6\51\0\1\u01d7\57\0\1\u01d8\53\0\1\u01d9"+
    "\35\0\1\u01da\62\0\1\u01db\55\0\1\u01dc\31\0\1\u01dd"+
    "\72\0\1\u01de\44\0\1\u01df\37\0\1\u01e0\63\0\1\u01e1"+
    "\35\0\1\u01e2\65\0\1\u01e3\51\0\1\u01e4\44\0\1\u01e5"+
    "\63\0\1\u01e6\36\0\1\u01e7\52\0\1\u01e8\61\0\1\u01e9"+
    "\46\0\1\u01ea\40\0\1\u01eb\45\0\1\u01ec\73\0\1\u01ed"+
    "\44\0\1\u01ee\44\0\1\u01ef\56\0\1\u01f0\56\0\1\u01f1"+
    "\32\0\1\u01f2\56\0\1\u01f3\62\0\1\u01f4\45\0\1\u01f5"+
    "\35\0\1\u01f6\65\0\1\u01f7\51\0\1\u01f8\44\0\1\u01f9"+
    "\56\0\1\u01fa\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\2\1\1\0\1\1\2\11\23\0"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\4\1"+
    "\2\11\1\0\2\1\1\0\1\1\1\11\35\0\2\1"+
    "\4\11\1\1\1\11\43\0\2\1\7\0\1\11\13\0"+
    "\1\11\13\0\1\11\4\0\2\1\45\0\1\1\7\0"+
    "\1\11\26\0\1\11\11\0\1\11\1\1\21\0\1\1"+
    "\12\0\1\11\1\0\1\11\5\0\1\1\1\0\1\11"+
    "\5\0\1\1\23\0\1\11\5\0\1\11\6\0\1\11"+
    "\3\0\1\11\7\0\1\11\15\0\1\11\2\0\1\11"+
    "\3\0\1\11\12\0\1\11\2\0\1\11\3\0\1\11"+
    "\3\0\1\11\6\0\1\11\2\0\2\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11\10\0\2\11\4\0\1\11\1\0\1\1"+
    "\22\0\1\11\1\0\2\11\11\0\1\11\2\0\1\11"+
    "\5\0\1\11\11\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\2\11\5\0\1\11\3\0\3\11\4\0\1\11"+
    "\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[506];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int yycolumn;
  private Stack<Integer> indentationStack;
  private Stack<Integer> stateStack;
  public _CabalParsingLexer() {
    this((java.io.Reader)null);
    indentationStack = ContainerUtil.newStack();
    stateStack = ContainerUtil.newStack();
  }


  public _CabalParsingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CabalParsingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return STABILITYKEY;
          }
        case 81: break;
        case 50: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CCOPTIONSKEY;
          }
        case 82: break;
        case 30: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEKEY;
          }
        case 83: break;
        case 20: 
          { return AND;
          }
        case 84: break;
        case 35: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return VERSIONKEY;
          }
        case 85: break;
        case 25: 
          { return TRUE;
          }
        case 86: break;
        case 54: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return JSSOURCESKEY;
          }
        case 87: break;
        case 18: 
          { return GTEQ;
          }
        case 88: break;
        case 31: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXPOSEDKEY;
          }
        case 89: break;
        case 79: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return PKGCONFIGDEPENDSKEY;
          }
        case 90: break;
        case 55: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDTOOLSKEY;
          }
        case 91: break;
        case 17: 
          { return EQ;
          }
        case 92: break;
        case 48: 
          { yybegin(CONFIGNAME);
                           return EXECUTABLE;
          }
        case 93: break;
        case 43: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return COPYRIGHTKEY;
          }
        case 94: break;
        case 19: 
          { return LTEQ;
          }
        case 95: break;
        case 56: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return BUGREPORTSKEY;
          }
        case 96: break;
        case 77: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCSHAREDOPTIONSKEY;
          }
        case 97: break;
        case 16: 
          { yypushback(1);

                          if(yycolumn == indentationStack.peek()){
                            yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                          } else {
                                if(yycolumn < indentationStack.peek()){
                                   indentationStack.pop();
                                   if(!stateStack.isEmpty()){
                                     stateStack.pop();
                                   }
                                   if (!indentationStack.isEmpty() && yycolumn == indentationStack.peek()){
                                      yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());

                                   }
                                   if (indentationStack.isEmpty()) {
                                      yybegin(YYINITIAL);
                                   }
                                   return WHITESPACERBRACETOK;
                                } else {
                                  yybegin(stateStack.isEmpty()?YYINITIAL:stateStack.peek());
                                }
                          }
          }
        case 98: break;
        case 34: 
          { stateStack.push(VARID);
                    return DEFAULTFLAGVALUEKEY;
          }
        case 99: break;
        case 74: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHEREXTENSIONSKEY;
          }
        case 100: break;
        case 6: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 101: break;
        case 63: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDEDIRSKEY;
          }
        case 102: break;
        case 70: 
          { stateStack.push(VARID);

                       yybegin(FINDCOLON);
                       return EXTRATMPFILESKEY;
          }
        case 103: break;
        case 60: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return DESCRIPTIONKEY;
          }
        case 104: break;
        case 37: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return CATEGORYKEY;
          }
        case 105: break;
        case 12: 
          { return COMMA;
          }
        case 106: break;
        case 46: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return BUILDTYPEKEY;
          }
        case 107: break;
        case 71: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return EXTRADOCFILESKEY;
          }
        case 108: break;
        case 8: 
          { yybegin(FINDINDENTATIONCONTEXT);
                      return COLON;
          }
        case 109: break;
        case 3: 
          { return VARIDREGEXP;
          }
        case 110: break;
        case 2: 
          { yybegin(YYINITIAL);
                     return FREEFORMREGEXP;
          }
        case 111: break;
        case 27: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return AUTHORKEY;
          }
        case 112: break;
        case 15: 
          { return LT;
          }
        case 113: break;
        case 57: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCOPTIONSKEY;
          }
        case 114: break;
        case 72: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXPOSEDMODULESKEY;
          }
        case 115: break;
        case 13: 
          { return DOT;
          }
        case 116: break;
        case 28: 
          { stateStack.push(VARID);
                    return MANUALKEY;
          }
        case 117: break;
        case 21: 
          { return COMMENT;
          }
        case 118: break;
        case 42: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return CSOURCESKEY;
          }
        case 119: break;
        case 26: 
          { return FALSE;
          }
        case 120: break;
        case 5: 
          { if (!indentationStack.isEmpty()){
                           yybegin(ININDENTATIONCONTEXT);
                         }
                         return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 121: break;
        case 40: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return HOMEPAGEKEY;
          }
        case 122: break;
        case 39: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATADIRKEY;
          }
        case 123: break;
        case 64: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDDEPENDSKEY;
          }
        case 124: break;
        case 14: 
          { return GT;
          }
        case 125: break;
        case 7: 
          { yypushback(1);
                          if (indentationStack.isEmpty()){
                             if (yycolumn != 0) {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                             } else {
                               yybegin(YYINITIAL);
                             }
                          } else {
                               indentationStack.push(yycolumn);
                               yybegin(stateStack.isEmpty() ? YYINITIAL : stateStack.peek());
                               return WHITESPACELBRACETOK;
                          }
          }
        case 126: break;
        case 36: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INCLUDESKEY;
          }
        case 127: break;
        case 69: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBRARIESKEY;
          }
        case 128: break;
        case 59: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TESTEDWITHKEY;
          }
        case 129: break;
        case 23: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return TYPEKEY;
          }
        case 130: break;
        case 53: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DATAFILESKEY;
          }
        case 131: break;
        case 62: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return LICENSEFILESKEY;
          }
        case 132: break;
        case 58: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return TESTMODULEKEY;
          }
        case 133: break;
        case 32: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return PACKAGEKEY;
          }
        case 134: break;
        case 24: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return NAMEKEY;
          }
        case 135: break;
        case 41: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return BUILDABLEKEY;
          }
        case 136: break;
        case 65: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return CABALVERSIONKEY;
          }
        case 137: break;
        case 67: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRALIBDIRSKEY;
          }
        case 138: break;
        case 10: 
          { return SLASH;
          }
        case 139: break;
        case 66: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return OTHERMODULESKEY;
          }
        case 140: break;
        case 51: 
          { yybegin(CONFIGNAME);
                           return TEST_SUITE;
          }
        case 141: break;
        case 61: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return LICENSEFILEKEY;
          }
        case 142: break;
        case 75: 
          { stateStack.push(VARID);
                       yybegin(FINDCOLON);
                       return DEFAULTLANGUAGEKEY;
          }
        case 143: break;
        case 11: 
          { return NUMBERREGEXP;
          }
        case 144: break;
        case 76: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return INSTALLINCLUDESKEY;
          }
        case 145: break;
        case 38: 
          { stateStack.push(FREEFORM);
                       yybegin(FINDCOLON);
                       return SYNOPSISKEY;
          }
        case 146: break;
        case 22: 
          { yybegin(CONFIGNAME);
                         return FLAG;
          }
        case 147: break;
        case 73: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return GHCPROFOPTIONSKEY;
          }
        case 148: break;
        case 52: 
          { stateStack.push(FREEFORM);
                    yybegin(FINDCOLON);
                    return MAINTAINERKEY;
          }
        case 149: break;
        case 47: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return FRAMEWORKSKEY;
          }
        case 150: break;
        case 29: 
          { yybegin(FINDINDENTATIONCONTEXT);
                         return LIBRARY;
          }
        case 151: break;
        case 78: 
          { stateStack.push(FILEPATH);
                       yybegin(FINDCOLON);
                       return EXTRASOURCEFILESKEY;
          }
        case 152: break;
        case 1: 
          { yybegin(FINDINDENTATIONCONTEXT);
                     return VARIDREGEXP;
          }
        case 153: break;
        case 80: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTRAGHCILIBRARIESKEY;
          }
        case 154: break;
        case 45: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return LDOPTIONSKEY;
          }
        case 155: break;
        case 9: 
          { if (!indentationStack.isEmpty()){
                         yybegin(ININDENTATIONCONTEXT);
                       }
                       return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 156: break;
        case 4: 
          { yybegin(YYINITIAL);
                     return FILEPATHREGEXP;
          }
        case 157: break;
        case 68: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return HSSOURCEDIRSKEY;
          }
        case 158: break;
        case 33: 
          { stateStack.push(VARID);
                     yybegin(FINDCOLON);
                     return MAINISKEY;
          }
        case 159: break;
        case 49: 
          { stateStack.push(VARID);
                         yybegin(FINDCOLON);
                         return EXTENSIONSKEY;
          }
        case 160: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if (! indentationStack.isEmpty ()){
                            indentationStack.pop();
                            return WHITESPACERBRACETOK;
                          }
                          return null;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
