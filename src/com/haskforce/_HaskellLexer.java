/* The following code was generated by JFlex 1.4.3 on 12/28/13 1:05 AM */

package com.haskforce;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/28/13 1:05 AM from the specification file
 * <tt>/Users/crobbins/IdeaProjects/HaskForce/src/com/haskforce/_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\37\1\34"+
    "\1\40\1\41\1\42\1\43\1\35\1\13\1\14\1\44\1\45\1\16"+
    "\1\33\1\46\1\47\1\6\7\4\2\4\1\57\1\17\1\50\1\51"+
    "\1\52\1\53\1\54\1\60\1\61\1\62\1\63\1\64\1\5\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\10\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\12\1\105\1\3\1\20"+
    "\1\25\1\21\1\55\1\36\1\22\1\110\1\2\1\106\1\113\1\112"+
    "\1\31\1\116\1\123\1\115\2\2\1\107\1\117\1\26\1\7\1\120"+
    "\1\2\1\27\1\111\1\32\1\114\1\30\1\121\1\11\1\122\1\2"+
    "\1\23\1\15\1\24\1\56\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\3\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\10\3\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\4\0\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\5\0\1\120\2\0"+
    "\1\121\1\122\11\0\1\123\14\0\1\124\1\125\1\0"+
    "\1\126\1\0\1\127\1\130\11\0\1\131\1\132\2\0"+
    "\1\133\3\0\1\134\4\0\1\135\1\136\1\0\1\137"+
    "\1\140\1\141\1\142\1\0\1\143\1\0\1\144\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\124\0\124\0\124\0\124\0\374"+
    "\0\u0150\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\u01a4\0\124\0\u01f8\0\u024c\0\u02a0"+
    "\0\u02f4\0\u0348\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\u039c\0\124\0\u03f0\0\u0444"+
    "\0\124\0\124\0\124\0\124\0\124\0\u0498\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\u04ec\0\u0540\0\u0594\0\u05e8"+
    "\0\u063c\0\u0690\0\u06e4\0\u0738\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\u078c\0\u07e0"+
    "\0\u0834\0\u0888\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\u08dc\0\u0930\0\u0984\0\u09d8\0\u0a2c\0\124\0\u0a80"+
    "\0\u0ad4\0\u0b28\0\124\0\u0b7c\0\u0bd0\0\u0c24\0\u0c78\0\u0ccc"+
    "\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\124\0\u0e70\0\u0ec4\0\u0f18"+
    "\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110\0\u1164\0\u11b8"+
    "\0\u120c\0\124\0\124\0\u1260\0\124\0\u12b4\0\124\0\124"+
    "\0\u1308\0\u135c\0\u13b0\0\u1404\0\u1458\0\u14ac\0\u1500\0\u1554"+
    "\0\u15a8\0\124\0\124\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u174c"+
    "\0\u17a0\0\124\0\u17f4\0\u1848\0\u189c\0\u18f0\0\124\0\124"+
    "\0\u1944\0\124\0\124\0\124\0\124\0\u1998\0\124\0\u19ec"+
    "\0\124\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\4\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\4"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\4\1\110\1\111\1\4\1\112\1\4\1\113\1\4"+
    "\1\114\2\4\125\0\1\3\131\0\2\115\2\116\142\0"+
    "\1\117\125\0\1\120\116\0\1\121\1\122\1\123\1\124"+
    "\1\125\10\0\1\126\172\0\1\127\20\0\1\130\236\0"+
    "\1\131\1\132\24\0\1\133\6\0\1\134\16\0\1\135"+
    "\117\0\1\136\110\0\1\137\142\0\1\140\130\0\1\141"+
    "\153\0\1\142\1\143\125\0\1\144\122\0\1\145\121\0"+
    "\1\146\23\0\1\147\100\0\1\150\1\0\1\151\37\0"+
    "\1\152\2\0\1\153\65\0\1\154\13\0\1\155\237\0"+
    "\1\156\121\0\1\157\31\0\1\160\214\0\1\161\115\0"+
    "\1\162\121\0\1\163\124\0\1\164\44\0\1\165\177\0"+
    "\1\166\126\0\1\167\44\0\1\170\120\0\1\171\1\0"+
    "\1\172\123\0\1\173\57\0\1\174\132\0\1\175\116\0"+
    "\1\176\122\0\1\177\43\0\1\200\203\0\1\201\123\0"+
    "\1\202\37\0\1\203\206\0\1\204\124\0\1\205\126\0"+
    "\1\206\120\0\1\207\121\0\1\210\130\0\1\211\116\0"+
    "\1\212\130\0\1\213\40\0\1\214\100\0\1\215\230\0"+
    "\1\216\36\0\1\217\216\0\1\220\116\0\1\221\117\0"+
    "\1\222\127\0\1\223\36\0\1\224\207\0\1\225\20\0"+
    "\1\226\222\0\1\227\42\0\1\230\203\0\1\231\126\0"+
    "\1\232\131\0\1\233\121\0\1\234\122\0\1\235\115\0"+
    "\1\236\43\0\1\237\57\0\1\240\42\0\1\241\127\0"+
    "\1\242\203\0\1\243\123\0\1\244\37\0\1\245\123\0"+
    "\1\246\127\0\1\247\177\0\1\250\133\0\1\251\117\0"+
    "\1\252\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\2\1\12\11\1\1\1\11"+
    "\5\1\12\11\1\1\1\11\2\1\5\11\1\1\26\11"+
    "\10\1\12\11\4\0\7\11\5\0\1\11\2\0\1\1"+
    "\1\11\11\0\1\11\14\0\2\11\1\0\1\11\1\0"+
    "\2\11\11\0\2\11\2\0\1\1\3\0\1\11\4\0"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }


  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return ICHAR;
          }
        case 102: break;
        case 19: 
          { return BACKSLASH;
          }
        case 103: break;
        case 83: 
          { return LET;
          }
        case 104: break;
        case 9: 
          { return LPAREN;
          }
        case 105: break;
        case 36: 
          { return QUESTION;
          }
        case 106: break;
        case 60: 
          { return VCHAR;
          }
        case 107: break;
        case 43: 
          { return CCHAR;
          }
        case 108: break;
        case 34: 
          { return EQUALS;
          }
        case 109: break;
        case 15: 
          { return RBRACKET;
          }
        case 110: break;
        case 27: 
          { return PERCENT;
          }
        case 111: break;
        case 54: 
          { return PCHAR;
          }
        case 112: break;
        case 40: 
          { return COLON;
          }
        case 113: break;
        case 77: 
          { return LEFTARROW;
          }
        case 114: break;
        case 33: 
          { return LESSTHAN;
          }
        case 115: break;
        case 89: 
          { return CLASSTOKEN;
          }
        case 116: break;
        case 49: 
          { return JCHAR;
          }
        case 117: break;
        case 101: 
          { return INSTANCE;
          }
        case 118: break;
        case 61: 
          { return WCHAR;
          }
        case 119: break;
        case 44: 
          { return DCHAR;
          }
        case 120: break;
        case 76: 
          { return DOUBLEPERIOD;
          }
        case 121: break;
        case 38: 
          { return CARET;
          }
        case 122: break;
        case 67: 
          { return RETURN;
          }
        case 123: break;
        case 70: 
          { return FORMFEED;
          }
        case 124: break;
        case 55: 
          { return QCHAR;
          }
        case 125: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 126: break;
        case 73: 
          { return CLOSECOM;
          }
        case 127: break;
        case 71: 
          { return TAB;
          }
        case 128: break;
        case 14: 
          { return LBRACKET;
          }
        case 129: break;
        case 22: 
          { return SINGLEQUOTE;
          }
        case 130: break;
        case 100: 
          { return DERIVING;
          }
        case 131: break;
        case 13: 
          { return SEMICOLON;
          }
        case 132: break;
        case 12: 
          { return COMMA;
          }
        case 133: break;
        case 88: 
          { return DATA;
          }
        case 134: break;
        case 50: 
          { return KCHAR;
          }
        case 135: break;
        case 8: 
          { return XCHAR;
          }
        case 136: break;
        case 96: 
          { return MODULE;
          }
        case 137: break;
        case 45: 
          { return ECHAR;
          }
        case 138: break;
        case 21: 
          { return DOUBLEQUOTE;
          }
        case 139: break;
        case 30: 
          { return PLUS;
          }
        case 140: break;
        case 84: 
          { return TYPE;
          }
        case 141: break;
        case 31: 
          { return PERIOD;
          }
        case 142: break;
        case 56: 
          { return RCHAR;
          }
        case 143: break;
        case 35: 
          { return GREATERTHAN;
          }
        case 144: break;
        case 69: 
          { return VERTAB;
          }
        case 145: break;
        case 25: 
          { return HASH;
          }
        case 146: break;
        case 29: 
          { return ASTERISK;
          }
        case 147: break;
        case 51: 
          { return LCHAR;
          }
        case 148: break;
        case 3: 
          { return ASCSMALL;
          }
        case 149: break;
        case 99: 
          { return DEFAULT;
          }
        case 150: break;
        case 80: 
          { return DO;
          }
        case 151: break;
        case 81: 
          { return IN;
          }
        case 152: break;
        case 26: 
          { return DOLLAR;
          }
        case 153: break;
        case 62: 
          { return YCHAR;
          }
        case 154: break;
        case 6: 
          { return FCHAR;
          }
        case 155: break;
        case 63: 
          { return OCTALPREFIX;
          }
        case 156: break;
        case 98: 
          { return FOREIGN;
          }
        case 157: break;
        case 97: 
          { return NEWTYPE;
          }
        case 158: break;
        case 18: 
          { return RBRACE;
          }
        case 159: break;
        case 57: 
          { return SCHAR;
          }
        case 160: break;
        case 28: 
          { return AMPERSAND;
          }
        case 161: break;
        case 66: 
          { return OPENCOM;
          }
        case 162: break;
        case 16: 
          { return BACKTICK;
          }
        case 163: break;
        case 74: 
          { return DASHES;
          }
        case 164: break;
        case 65: 
          { return OF;
          }
        case 165: break;
        case 52: 
          { return MCHAR;
          }
        case 166: break;
        case 91: 
          { return INFIX;
          }
        case 167: break;
        case 64: 
          { return HEXADECIMALPREFIX;
          }
        case 168: break;
        case 23: 
          { return UNDERSCORE;
          }
        case 169: break;
        case 4: 
          { return ZCHAR;
          }
        case 170: break;
        case 37: 
          { return AMPERSAT;
          }
        case 171: break;
        case 46: 
          { return GCHAR;
          }
        case 172: break;
        case 17: 
          { return LBRACE;
          }
        case 173: break;
        case 39: 
          { return TILDE;
          }
        case 174: break;
        case 58: 
          { return TCHAR;
          }
        case 175: break;
        case 11: 
          { return PIPE;
          }
        case 176: break;
        case 41: 
          { return ACHAR;
          }
        case 177: break;
        case 78: 
          { return DOUBLEARROW;
          }
        case 178: break;
        case 32: 
          { return SLASH;
          }
        case 179: break;
        case 92: 
          { return WHERE;
          }
        case 180: break;
        case 94: 
          { return INFIXL;
          }
        case 181: break;
        case 95: 
          { return IMPORT;
          }
        case 182: break;
        case 68: 
          { return LINEFEED;
          }
        case 183: break;
        case 53: 
          { return NCHAR;
          }
        case 184: break;
        case 93: 
          { return INFIXR;
          }
        case 185: break;
        case 24: 
          { return EXLAMATION;
          }
        case 186: break;
        case 87: 
          { return ELSE;
          }
        case 187: break;
        case 82: 
          { return IF;
          }
        case 188: break;
        case 90: 
          { return ASCII;
          }
        case 189: break;
        case 5: 
          { return ASCDIGIT;
          }
        case 190: break;
        case 85: 
          { return THEN;
          }
        case 191: break;
        case 47: 
          { return HCHAR;
          }
        case 192: break;
        case 75: 
          { return RIGHTARROW;
          }
        case 193: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 194: break;
        case 20: 
          { return MINUS;
          }
        case 195: break;
        case 86: 
          { return CASE;
          }
        case 196: break;
        case 59: 
          { return UCHAR;
          }
        case 197: break;
        case 10: 
          { return RPAREN;
          }
        case 198: break;
        case 42: 
          { return BCHAR;
          }
        case 199: break;
        case 79: 
          { return DOUBLECOLON;
          }
        case 200: break;
        case 7: 
          { return OCHAR;
          }
        case 201: break;
        case 72: 
          { return NULLCHARACTER;
          }
        case 202: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
