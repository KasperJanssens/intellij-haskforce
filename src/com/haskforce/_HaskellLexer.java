/* The following code was generated by JFlex 1.4.3 on 5/1/14 1:06 AM */

package com.haskforce;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/1/14 1:06 AM from the specification file
 * <tt>/Users/crobbins/IdeaProjects/HaskForce/src/com/haskforce/_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\31\1\3\1\1\22\0\1\3\1\46\1\30"+
    "\1\32\1\47\1\50\1\51\1\7\1\35\1\36\1\52\1\24\1\40"+
    "\1\25\1\21\1\53\1\11\7\14\2\5\1\62\1\41\1\54\1\55"+
    "\1\56\1\57\1\60\4\20\1\23\1\20\2\6\1\105\2\6\1\104"+
    "\1\6\1\106\1\13\3\6\1\111\3\6\1\110\1\16\2\6\1\42"+
    "\1\10\1\43\1\26\1\107\1\44\1\65\1\17\1\63\1\67\1\22"+
    "\1\34\1\75\1\102\1\33\2\4\1\64\1\76\1\74\1\12\1\101"+
    "\1\103\1\72\1\66\1\70\1\71\1\73\1\77\1\15\1\100\1\4"+
    "\1\45\1\37\1\27\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\3\1\10\1\3\1\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\3\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\12\3\1\5\3\1\1\45\1\1\1\0"+
    "\1\46\2\1\1\47\1\50\2\3\1\5\1\51\1\52"+
    "\1\53\2\1\1\0\1\1\1\0\1\1\1\54\1\55"+
    "\2\3\1\56\1\57\1\60\1\61\3\3\1\62\1\63"+
    "\11\3\1\5\2\64\1\1\1\0\3\65\2\4\2\3"+
    "\1\66\2\67\1\70\2\1\1\0\1\71\2\1\1\72"+
    "\1\1\4\3\1\73\2\3\1\74\12\3\1\5\1\64"+
    "\1\3\1\75\2\0\1\71\2\1\1\76\5\3\1\77"+
    "\2\3\1\100\1\101\1\102\5\3\1\5\1\3\1\103"+
    "\1\1\1\104\3\3\1\105\4\3\1\106\2\3\1\5"+
    "\1\107\1\110\1\111\1\112\1\3\1\113\4\3\1\114"+
    "\1\115\1\3\1\5\1\3\1\116\1\117\1\3\1\120"+
    "\1\3\1\121\1\122\1\123\1\3\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\112\0\u03c2\0\112"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\u057e\0\112\0\112"+
    "\0\112\0\112\0\112\0\112\0\u05c8\0\u0612\0\112\0\112"+
    "\0\112\0\112\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce"+
    "\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e"+
    "\0\u0a68\0\112\0\u0ab2\0\u0afc\0\112\0\u0b46\0\u0b90\0\336"+
    "\0\112\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8\0\u040c\0\u040c\0\u0456"+
    "\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\336\0\u0e74\0\u0ebe"+
    "\0\u0f08\0\u0f52\0\u040c\0\112\0\112\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\336\0\336\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec"+
    "\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13a8\0\u13f2"+
    "\0\112\0\u0a68\0\u040c\0\u0b46\0\u0b90\0\u143c\0\u1486\0\u0172"+
    "\0\u14d0\0\u040c\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u040c\0\u1642"+
    "\0\u168c\0\u040c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u040c"+
    "\0\u1848\0\u1892\0\336\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u13f2\0\u1c0a"+
    "\0\336\0\u1c54\0\u1c9e\0\u0d4c\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\336\0\u1f38\0\u1f82\0\336"+
    "\0\336\0\336\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e"+
    "\0\u2188\0\112\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\336"+
    "\0\u2344\0\u238e\0\u23d8\0\u2422\0\336\0\u246c\0\u24b6\0\u2500"+
    "\0\336\0\112\0\336\0\336\0\u254a\0\336\0\u2594\0\u25de"+
    "\0\u2628\0\u2672\0\336\0\336\0\u26bc\0\u2706\0\u2750\0\336"+
    "\0\336\0\u279a\0\336\0\u27e4\0\u0172\0\336\0\336\0\u282e"+
    "\0\336";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\5\1\4\1\6\1\4\1\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\2"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\4\1\57\1\60\3\4"+
    "\1\61\1\4\1\62\1\63\2\4\1\64\1\65\1\66"+
    "\2\6\1\4\2\6\25\2\1\0\1\2\1\0\15\2"+
    "\1\0\45\2\3\3\21\2\1\0\1\2\1\0\15\2"+
    "\1\0\50\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\27\4\5\2\1\5\3\2\1\5\2\2\1\5\4\2"+
    "\1\67\2\70\1\2\1\0\1\2\1\0\15\2\1\0"+
    "\50\2\4\6\1\2\10\6\1\2\2\6\1\2\1\0"+
    "\1\2\1\0\3\2\2\6\10\2\1\0\15\2\27\6"+
    "\7\71\1\72\1\73\14\71\1\74\1\71\1\74\15\71"+
    "\1\74\44\71\25\2\1\0\1\2\1\0\15\2\1\0"+
    "\3\2\1\75\45\2\1\5\3\2\1\5\2\76\1\5"+
    "\2\77\2\2\1\67\2\70\1\2\1\0\1\2\1\0"+
    "\15\2\1\0\50\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\1\4\1\100\10\2"+
    "\1\0\15\2\27\4\21\2\1\101\3\2\1\0\1\2"+
    "\1\0\15\2\1\0\50\2\4\4\1\2\4\4\1\102"+
    "\3\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\1\4\1\103\25\4\4\2"+
    "\4\6\1\2\2\6\1\104\5\6\1\2\2\6\1\2"+
    "\1\0\1\2\1\0\3\2\2\6\10\2\1\0\15\2"+
    "\27\6\25\0\1\105\1\0\1\106\26\0\1\107\145\0"+
    "\2\110\1\2\5\110\1\111\14\110\1\112\1\110\1\112"+
    "\1\2\14\110\1\112\44\110\22\2\1\113\2\2\1\114"+
    "\1\2\1\0\3\2\1\115\11\2\1\0\50\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\1\4\1\116\10\2\1\0\15\2\11\4\1\117"+
    "\1\4\1\120\13\4\4\2\4\4\1\2\1\4\1\121"+
    "\6\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\27\4\25\0\1\122\64\0"+
    "\25\2\1\123\1\2\1\0\15\2\1\0\71\2\1\0"+
    "\1\2\1\0\15\2\1\0\10\2\1\124\60\2\1\0"+
    "\1\2\1\0\15\2\1\0\14\2\1\125\33\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\1\4\1\126\1\127"+
    "\24\4\4\2\4\4\1\2\10\4\1\2\1\130\1\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\27\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\3\4\1\131\23\4\4\2\4\4\1\2\1\4"+
    "\1\132\6\4\1\2\1\133\1\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\2\4\1\134"+
    "\24\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\15\4\1\135\1\4\1\136\7\4\4\2\4\4\1\2"+
    "\10\4\1\2\1\137\1\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\27\4\4\2\4\4"+
    "\1\2\1\4\1\140\6\4\1\2\2\4\1\2\1\0"+
    "\1\2\1\0\3\2\2\4\10\2\1\0\15\2\27\4"+
    "\4\2\4\4\1\2\10\4\1\2\2\4\1\2\1\0"+
    "\1\2\1\0\3\2\2\4\10\2\1\0\15\2\17\4"+
    "\1\141\7\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\1\142\1\4\10\2"+
    "\1\0\15\2\27\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\6\4\1\143\20\4\4\2\4\6\1\2"+
    "\10\6\1\2\2\6\1\2\1\0\1\2\1\0\3\2"+
    "\2\6\10\2\1\0\15\2\22\6\1\144\4\6\5\2"+
    "\1\145\3\2\1\145\2\2\1\145\10\2\1\0\1\2"+
    "\1\0\15\2\1\0\51\2\1\146\3\2\1\146\2\2"+
    "\1\146\7\2\1\147\1\150\1\2\1\0\15\2\1\0"+
    "\53\2\1\151\15\2\1\0\1\2\1\0\15\2\1\0"+
    "\44\2\2\71\1\2\4\71\1\152\15\71\1\74\1\71"+
    "\1\74\15\71\1\74\44\71\7\0\1\153\102\0\11\2"+
    "\1\154\2\2\1\154\10\2\1\0\1\2\1\0\15\2"+
    "\1\0\51\2\1\155\3\2\1\155\2\2\1\155\2\2"+
    "\2\155\1\2\2\155\1\2\1\0\1\2\1\0\4\2"+
    "\1\155\10\2\1\0\15\2\1\155\1\2\1\155\1\2"+
    "\1\155\26\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\16\4\1\156\10\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\3\4\1\157\23\4\4\2\4\6\1\2"+
    "\10\6\1\2\2\6\1\2\1\0\1\2\1\0\3\2"+
    "\2\6\10\2\1\0\15\2\21\6\1\160\5\6\1\161"+
    "\2\162\23\161\1\163\63\161\1\110\1\164\1\165\1\164"+
    "\4\110\1\111\14\110\1\112\1\110\1\112\1\110\1\164"+
    "\13\110\1\112\44\110\2\112\1\0\5\112\1\166\17\112"+
    "\1\167\61\112\25\2\1\0\1\2\1\0\15\2\1\0"+
    "\16\2\1\170\7\2\1\171\15\2\27\0\1\172\62\0"+
    "\25\2\1\0\1\2\1\0\4\2\1\173\10\2\1\0"+
    "\50\2\4\4\1\2\10\4\1\2\2\4\1\2\1\0"+
    "\1\2\1\0\3\2\1\4\1\174\10\2\1\0\15\2"+
    "\3\4\1\175\23\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\16\4\1\176\10\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\7\4\1\177\17\4\32\0"+
    "\1\200\57\0\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\2\4\1\201\24\4\4\2\4\4\1\2\10\4"+
    "\1\2\2\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\3\4\1\202\23\4\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\5\4\1\203\21\4"+
    "\4\2\4\4\1\2\10\4\1\2\2\4\1\2\1\0"+
    "\1\2\1\0\3\2\1\4\1\204\10\2\1\0\15\2"+
    "\7\4\1\205\17\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\5\4\1\206\21\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\16\4\1\207\10\4\4\2"+
    "\4\4\1\2\10\4\1\2\1\210\1\4\1\2\1\0"+
    "\1\2\1\0\3\2\2\4\10\2\1\0\15\2\27\4"+
    "\4\2\4\4\1\2\10\4\1\2\2\4\1\2\1\0"+
    "\1\2\1\0\3\2\2\4\10\2\1\0\15\2\14\4"+
    "\1\211\12\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\4\4\1\212\22\4\4\2\4\4\1\2\10\4"+
    "\1\2\1\213\1\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\27\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\4\4\1\214\22\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\2\4\1\215"+
    "\24\4\4\2\4\6\1\2\10\6\1\2\2\6\1\2"+
    "\1\0\1\2\1\0\3\2\2\6\10\2\1\0\15\2"+
    "\23\6\1\216\3\6\5\2\1\145\3\2\1\145\2\2"+
    "\1\145\5\2\2\70\1\2\1\0\1\2\1\0\15\2"+
    "\1\0\51\2\1\146\3\2\1\146\2\2\1\146\10\2"+
    "\1\0\1\2\1\0\15\2\1\0\44\2\5\0\1\217"+
    "\3\0\1\217\2\0\1\217\75\0\4\2\4\4\1\2"+
    "\1\4\1\220\6\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\27\4\4\2"+
    "\4\4\1\2\10\4\1\2\1\221\1\4\1\2\1\0"+
    "\1\2\1\0\3\2\2\4\10\2\1\0\15\2\27\4"+
    "\1\161\2\0\107\161\1\163\2\0\107\163\1\110\1\164"+
    "\1\165\1\164\4\110\1\111\14\110\1\112\1\110\1\112"+
    "\1\2\1\164\13\110\1\112\44\110\1\2\3\165\4\2"+
    "\1\110\14\2\1\0\1\2\1\0\1\2\1\165\13\2"+
    "\1\0\44\2\1\112\1\222\1\223\1\222\4\112\1\166"+
    "\17\112\1\224\1\222\60\112\25\2\1\0\1\2\1\0"+
    "\15\2\1\0\20\2\1\225\50\2\1\0\1\2\1\0"+
    "\15\2\1\0\21\2\1\226\22\2\1\173\2\2\22\173"+
    "\1\227\1\173\1\227\15\173\1\227\44\173\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\1\230\1\4\10\2\1\0\15\2\27\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\5\4\1\231"+
    "\21\4\4\2\4\4\1\2\1\4\1\232\6\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\27\4\4\2\4\4\1\2\10\4\1\2"+
    "\1\233\1\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\27\4\4\2\4\4\1\2\10\4"+
    "\1\2\2\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\3\4\1\234\23\4\4\2\4\4"+
    "\1\2\10\4\1\2\1\235\1\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\27\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\2\4\1\236"+
    "\24\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\1\237\1\4\10\2\1\0"+
    "\15\2\27\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\2\4\1\240\24\4\4\2\4\4\1\2\10\4"+
    "\1\2\1\241\1\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\27\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\11\4\1\242\15\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\5\4\1\243"+
    "\21\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\6\4\1\244\20\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\7\4\1\245\17\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\1\246\1\4\10\2\1\0\15\2\27\4\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\1\4\1\247\25\4"+
    "\4\2\4\6\1\2\10\6\1\2\1\6\1\250\1\2"+
    "\1\0\1\2\1\0\3\2\2\6\10\2\1\0\15\2"+
    "\27\6\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\7\4\1\251\17\4\1\112\1\222\1\223\1\222\4\112"+
    "\1\166\17\112\1\167\1\222\60\112\1\0\3\223\4\0"+
    "\1\112\20\0\1\223\60\0\22\2\1\252\2\2\1\0"+
    "\1\2\1\0\15\2\1\0\71\2\1\0\1\2\1\0"+
    "\3\2\1\253\11\2\1\0\44\2\1\227\2\0\107\227"+
    "\4\2\4\4\1\2\4\4\1\254\3\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\27\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\2\4\1\255\24\4\4\2\4\4\1\2\10\4"+
    "\1\2\2\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\7\4\1\256\17\4\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\1\257\1\4\10\2\1\0\15\2\27\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\3\4\1\260"+
    "\23\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\6\4\1\261\20\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\10\4\1\262\16\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\15\4\1\263\11\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\1\4\1\264"+
    "\25\4\4\2\4\4\1\2\10\4\1\2\1\265\1\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\27\4\4\2\4\4\1\2\10\4\1\2\2\4"+
    "\1\2\1\0\1\2\1\0\3\2\2\4\10\2\1\0"+
    "\15\2\11\4\1\266\15\4\4\2\4\4\1\2\10\4"+
    "\1\2\2\4\1\2\1\0\1\2\1\0\3\2\1\267"+
    "\1\4\10\2\1\0\15\2\27\4\4\2\4\6\1\2"+
    "\10\6\1\2\2\6\1\2\1\0\1\2\1\0\3\2"+
    "\2\6\10\2\1\0\15\2\24\6\1\270\2\6\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\5\4\1\271"+
    "\21\4\25\2\1\0\1\2\1\0\4\2\1\272\10\2"+
    "\1\0\50\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\1\4\1\273\5\4\1\274\17\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\2\4\10\2\1\0\15\2\11\4\1\275\15\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\5\4\1\276"+
    "\21\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\12\4\1\277\14\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\1\4\1\300\25\4\4\2\4\4\1\2"+
    "\10\4\1\2\2\4\1\2\1\0\1\2\1\0\3\2"+
    "\1\301\1\4\10\2\1\0\15\2\27\4\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\16\4\1\302\10\4"+
    "\4\2\4\4\1\2\10\4\1\2\1\303\1\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\27\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\12\4\1\304\14\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\1\4\1\305"+
    "\10\2\1\0\15\2\27\4\4\2\4\6\1\2\10\6"+
    "\1\2\2\6\1\2\1\0\1\2\1\0\3\2\2\6"+
    "\10\2\1\0\15\2\25\6\1\306\1\6\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\1\307\26\4\4\2"+
    "\4\4\1\2\10\4\1\2\2\4\1\2\1\0\1\2"+
    "\1\0\3\2\2\4\10\2\1\0\15\2\11\4\1\310"+
    "\15\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\5\4\1\311\21\4\4\2\4\4\1\2\10\4\1\2"+
    "\2\4\1\2\1\0\1\2\1\0\3\2\2\4\10\2"+
    "\1\0\15\2\11\4\1\312\15\4\4\2\4\4\1\2"+
    "\10\4\1\2\1\313\1\4\1\2\1\0\1\2\1\0"+
    "\3\2\2\4\10\2\1\0\15\2\27\4\4\2\4\4"+
    "\1\2\10\4\1\2\2\4\1\2\1\0\1\2\1\0"+
    "\3\2\1\314\1\4\10\2\1\0\15\2\27\4\4\2"+
    "\4\6\1\2\10\6\1\2\2\6\1\2\1\0\1\2"+
    "\1\0\3\2\2\6\10\2\1\0\15\2\26\6\1\315"+
    "\4\2\4\4\1\2\10\4\1\2\1\316\1\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\27\4\4\2\4\4\1\2\10\4\1\2\2\4\1\2"+
    "\1\0\1\2\1\0\3\2\2\4\10\2\1\0\15\2"+
    "\12\4\1\317\14\4\4\2\4\4\1\2\10\4\1\2"+
    "\1\320\1\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\27\4\4\2\4\4\1\2\10\4"+
    "\1\2\2\4\1\2\1\0\1\2\1\0\3\2\2\4"+
    "\10\2\1\0\15\2\4\4\1\321\22\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\17\1\1\11\52\1\1\0\11\1\2\11\2\1"+
    "\1\0\1\1\1\0\6\1\1\11\24\1\1\0\2\1"+
    "\1\11\6\1\1\11\3\1\1\0\1\11\2\1\1\11"+
    "\5\1\1\11\21\1\2\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }


  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return BACKSLASH;
          }
        case 85: break;
        case 84: 
          { return QUALIFIED;
          }
        case 86: break;
        case 60: 
          { return LET;
          }
        case 87: break;
        case 15: 
          { return LPAREN;
          }
        case 88: break;
        case 33: 
          { return QUESTION;
          }
        case 89: break;
        case 31: 
          { return EQUALS;
          }
        case 90: break;
        case 1: 
          { return COMMENTTEXT;
          }
        case 91: break;
        case 21: 
          { return RBRACKET;
          }
        case 92: break;
        case 26: 
          { return PERCENT;
          }
        case 93: break;
        case 36: 
          { return COLON;
          }
        case 94: break;
        case 81: 
          { return LINE_WS;
          }
        case 95: break;
        case 47: 
          { return LEFTARROW;
          }
        case 96: break;
        case 30: 
          { return LESSTHAN;
          }
        case 97: break;
        case 69: 
          { return CLASSTOKEN;
          }
        case 98: break;
        case 59: 
          { return OPENPRAGMA;
          }
        case 99: break;
        case 58: 
          { return CLOSEPRAGMA;
          }
        case 100: break;
        case 82: 
          { return INSTANCE;
          }
        case 101: break;
        case 4: 
          { return INTEGERTOKEN;
          }
        case 102: break;
        case 40: 
          { return DOUBLEPERIOD;
          }
        case 103: break;
        case 11: 
          { return CARET;
          }
        case 104: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 105: break;
        case 42: 
          { return CLOSECOM;
          }
        case 106: break;
        case 71: 
          { return EXPORTTOKEN;
          }
        case 107: break;
        case 20: 
          { return LBRACKET;
          }
        case 108: break;
        case 6: 
          { return SINGLEQUOTE;
          }
        case 109: break;
        case 83: 
          { return DERIVING;
          }
        case 110: break;
        case 19: 
          { return SEMICOLON;
          }
        case 111: break;
        case 18: 
          { return COMMA;
          }
        case 112: break;
        case 64: 
          { return DATA;
          }
        case 113: break;
        case 37: 
          { return THQUOTE;
          }
        case 114: break;
        case 52: 
          { return FLOATTOKEN;
          }
        case 115: break;
        case 76: 
          { return MODULE;
          }
        case 116: break;
        case 13: 
          { return DOUBLEQUOTE;
          }
        case 117: break;
        case 9: 
          { return PLUS;
          }
        case 118: break;
        case 3: 
          { return VARIDREGEXP;
          }
        case 119: break;
        case 65: 
          { return TYPE;
          }
        case 120: break;
        case 8: 
          { return PERIOD;
          }
        case 121: break;
        case 32: 
          { return GREATERTHAN;
          }
        case 122: break;
        case 14: 
          { return HASH;
          }
        case 123: break;
        case 28: 
          { return ASTERISK;
          }
        case 124: break;
        case 72: 
          { return CPPENDIF;
          }
        case 125: break;
        case 79: 
          { return DEFAULT;
          }
        case 126: break;
        case 51: 
          { return DO;
          }
        case 127: break;
        case 45: 
          { return IN;
          }
        case 128: break;
        case 25: 
          { return DOLLAR;
          }
        case 129: break;
        case 62: 
          { return CPPIF;
          }
        case 130: break;
        case 55: 
          { return COMMENT;
          }
        case 131: break;
        case 80: 
          { return NEWTYPE;
          }
        case 132: break;
        case 78: 
          { return FOREIGN;
          }
        case 133: break;
        case 12: 
          { return RBRACE;
          }
        case 134: break;
        case 27: 
          { return AMPERSAND;
          }
        case 135: break;
        case 46: 
          { return OPENCOM;
          }
        case 136: break;
        case 22: 
          { return BACKTICK;
          }
        case 137: break;
        case 41: 
          { return DASHES;
          }
        case 138: break;
        case 77: 
          { return HIDING;
          }
        case 139: break;
        case 39: 
          { return OF;
          }
        case 140: break;
        case 68: 
          { return INFIX;
          }
        case 141: break;
        case 34: 
          { return AMPERSAT;
          }
        case 142: break;
        case 23: 
          { return LBRACE;
          }
        case 143: break;
        case 35: 
          { return TILDE;
          }
        case 144: break;
        case 56: 
          { return HADDOCK;
          }
        case 145: break;
        case 17: 
          { return PIPE;
          }
        case 146: break;
        case 48: 
          { return DOUBLEARROW;
          }
        case 147: break;
        case 29: 
          { return SLASH;
          }
        case 148: break;
        case 70: 
          { return WHERE;
          }
        case 149: break;
        case 73: 
          { return INFIXL;
          }
        case 150: break;
        case 75: 
          { return IMPORT;
          }
        case 151: break;
        case 57: 
          { return STRINGTOKEN;
          }
        case 152: break;
        case 74: 
          { return INFIXR;
          }
        case 153: break;
        case 24: 
          { return EXLAMATION;
          }
        case 154: break;
        case 61: 
          { return ELSE;
          }
        case 155: break;
        case 44: 
          { return IF;
          }
        case 156: break;
        case 54: 
          { return EOL;
          }
        case 157: break;
        case 67: 
          { return CPPELSE;
          }
        case 158: break;
        case 66: 
          { return THEN;
          }
        case 159: break;
        case 43: 
          { return RIGHTARROW;
          }
        case 160: break;
        case 10: 
          { return MINUS;
          }
        case 161: break;
        case 53: 
          { return CHARTOKEN;
          }
        case 162: break;
        case 63: 
          { return CASE;
          }
        case 163: break;
        case 16: 
          { return RPAREN;
          }
        case 164: break;
        case 49: 
          { return DOUBLECOLON;
          }
        case 165: break;
        case 50: 
          { return AS;
          }
        case 166: break;
        case 38: 
          { return NULLCHARACTER;
          }
        case 167: break;
        case 5: 
          { return CONID;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
