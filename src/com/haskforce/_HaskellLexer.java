/* The following code was generated by JFlex 1.4.3 on 12/28/13 12:33 PM */

package com.haskforce;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/28/13 12:33 PM from the specification file
 * <tt>/Users/crobbins/IdeaProjects/HaskForce/src/com/haskforce/_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\44\1\26"+
    "\1\45\1\46\1\47\1\30\1\27\1\31\1\32\1\50\1\51\1\33"+
    "\1\2\1\52\1\53\1\13\7\10\2\5\1\63\1\34\1\54\1\55"+
    "\1\56\1\57\1\60\6\7\10\4\1\14\10\4\1\15\2\4\1\35"+
    "\1\42\1\36\1\61\1\43\1\37\1\16\1\17\1\64\1\6\1\67"+
    "\1\20\1\72\1\77\1\71\2\3\1\65\1\73\1\21\1\11\1\74"+
    "\1\3\1\22\1\66\1\23\1\70\1\24\1\75\1\12\1\76\1\3"+
    "\1\40\1\25\1\41\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\4"+
    "\1\6\4\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\6\4\1\46\1\47\1\50\1\51\2\0\1\52"+
    "\1\53\1\54\1\55\1\56\5\0\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\4\0\1\73\1\74\15\0\1\75\6\0\1\76"+
    "\5\0\1\77\1\100\1\101\1\0\1\102\7\0\1\103"+
    "\2\0\1\104\1\105\3\0\1\106\4\0\1\107\1\110"+
    "\1\0\1\111\1\112\1\113\1\0\1\114\1\115\1\0"+
    "\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\100\0\100\0\u0100"+
    "\0\u0140\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0340\0\100\0\u0380\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u03c0\0\100\0\u0400\0\u0440"+
    "\0\100\0\100\0\100\0\100\0\100\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\100\0\100\0\100"+
    "\0\u0680\0\u06c0\0\u0700\0\100\0\u0180\0\100\0\100\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\100\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\100\0\u0d00\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\100\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\100\0\100\0\100\0\u0fc0\0\100\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\100\0\u11c0\0\u1200\0\100"+
    "\0\u1240\0\u1280\0\u12c0\0\u1300\0\100\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\100\0\100\0\u1440\0\100\0\100\0\100\0\u1480"+
    "\0\100\0\100\0\u14c0\0\100\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\7\1\11\1\12\1\13\2\6\1\14\1\5\1\15"+
    "\1\16\1\5\1\17\1\5\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\5\1\61\1\5"+
    "\1\62\1\5\1\63\1\5\1\64\2\5\101\0\1\3"+
    "\100\0\1\65\36\0\1\66\14\0\1\67\32\0\1\70"+
    "\4\0\1\71\50\0\1\72\20\0\1\73\2\0\1\73"+
    "\4\0\1\74\64\0\4\75\2\0\1\75\2\0\3\75"+
    "\43\0\1\75\2\0\1\75\21\0\1\76\1\77\1\0"+
    "\1\76\1\77\150\0\1\100\22\0\1\101\155\0\1\102"+
    "\106\0\1\103\1\104\26\0\1\105\53\0\1\106\115\0"+
    "\1\107\1\110\1\111\1\112\1\113\3\0\1\114\121\0"+
    "\1\115\27\0\1\116\153\0\1\117\104\0\1\120\32\0"+
    "\1\121\46\0\1\122\101\0\1\123\75\0\1\124\32\0"+
    "\1\125\1\126\51\0\1\127\15\0\1\130\165\0\1\131"+
    "\2\0\1\65\120\0\1\132\74\0\1\133\1\0\1\134"+
    "\65\0\1\73\2\0\1\73\150\0\1\135\35\0\1\136"+
    "\152\0\1\137\76\0\1\140\72\0\1\141\76\0\1\142"+
    "\27\0\1\143\104\0\1\144\142\0\1\145\31\0\1\146"+
    "\45\0\1\147\105\0\1\150\11\0\1\151\160\0\1\152"+
    "\26\0\1\153\77\0\1\154\152\0\1\155\77\0\1\156"+
    "\75\0\1\157\33\0\1\160\143\0\1\161\31\0\1\162"+
    "\145\0\1\163\76\0\1\164\100\0\1\165\101\0\1\166"+
    "\31\0\1\167\65\0\1\170\156\0\1\171\31\0\1\172"+
    "\145\0\1\173\33\0\1\174\144\0\1\175\77\0\1\176"+
    "\104\0\1\177\67\0\1\200\23\0\1\201\103\0\1\202"+
    "\103\0\1\203\142\0\1\204\101\0\1\205\75\0\1\206"+
    "\103\0\1\207\100\0\1\210\101\0\1\211\25\0\1\212"+
    "\42\0\1\213\33\0\1\214\101\0\1\215\143\0\1\216"+
    "\33\0\1\217\75\0\1\220\77\0\1\221\145\0\1\222"+
    "\74\0\1\223\105\0\1\224\74\0\1\225\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\11\1\12\11\1\1\1\11"+
    "\1\1\7\11\1\1\1\11\2\1\5\11\10\1\3\11"+
    "\2\0\1\1\1\11\1\1\2\11\5\0\14\11\4\0"+
    "\1\11\1\1\15\0\1\11\6\0\1\11\5\0\3\11"+
    "\1\0\1\11\7\0\1\11\2\0\1\11\1\1\3\0"+
    "\1\11\4\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }


  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return BACKSLASH;
          }
        case 80: break;
        case 61: 
          { return LET;
          }
        case 81: break;
        case 11: 
          { return LPAREN;
          }
        case 82: break;
        case 33: 
          { return QUESTION;
          }
        case 83: break;
        case 31: 
          { return EQUALS;
          }
        case 84: break;
        case 16: 
          { return RBRACKET;
          }
        case 85: break;
        case 25: 
          { return PERCENT;
          }
        case 86: break;
        case 37: 
          { return COLON;
          }
        case 87: break;
        case 56: 
          { return LEFTARROW;
          }
        case 88: break;
        case 30: 
          { return LESSTHAN;
          }
        case 89: break;
        case 68: 
          { return CLASSTOKEN;
          }
        case 90: break;
        case 79: 
          { return INSTANCE;
          }
        case 91: break;
        case 55: 
          { return DOUBLEPERIOD;
          }
        case 92: break;
        case 35: 
          { return CARET;
          }
        case 93: break;
        case 50: 
          { return RETURN;
          }
        case 94: break;
        case 49: 
          { return FORMFEED;
          }
        case 95: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 96: break;
        case 39: 
          { return CLOSECOM;
          }
        case 97: break;
        case 52: 
          { return TAB;
          }
        case 98: break;
        case 15: 
          { return LBRACKET;
          }
        case 99: break;
        case 9: 
          { return SINGLEQUOTE;
          }
        case 100: break;
        case 78: 
          { return DERIVING;
          }
        case 101: break;
        case 14: 
          { return SEMICOLON;
          }
        case 102: break;
        case 13: 
          { return COMMA;
          }
        case 103: break;
        case 62: 
          { return DATA;
          }
        case 104: break;
        case 74: 
          { return MODULE;
          }
        case 105: break;
        case 8: 
          { return DOUBLEQUOTE;
          }
        case 106: break;
        case 5: 
          { return ASCLARGE;
          }
        case 107: break;
        case 27: 
          { return PLUS;
          }
        case 108: break;
        case 63: 
          { return TYPE;
          }
        case 109: break;
        case 28: 
          { return PERIOD;
          }
        case 110: break;
        case 32: 
          { return GREATERTHAN;
          }
        case 111: break;
        case 53: 
          { return VERTAB;
          }
        case 112: break;
        case 23: 
          { return HASH;
          }
        case 113: break;
        case 26: 
          { return ASTERISK;
          }
        case 114: break;
        case 4: 
          { return ASCSMALL;
          }
        case 115: break;
        case 75: 
          { return DEFAULT;
          }
        case 116: break;
        case 41: 
          { return DO;
          }
        case 117: break;
        case 60: 
          { return IN;
          }
        case 118: break;
        case 24: 
          { return DOLLAR;
          }
        case 119: break;
        case 45: 
          { return OCTALPREFIX;
          }
        case 120: break;
        case 47: 
          { return CHARESC;
          }
        case 121: break;
        case 77: 
          { return NEWTYPE;
          }
        case 122: break;
        case 76: 
          { return FOREIGN;
          }
        case 123: break;
        case 19: 
          { return RBRACE;
          }
        case 124: break;
        case 10: 
          { return AMPERSAND;
          }
        case 125: break;
        case 48: 
          { return OPENCOM;
          }
        case 126: break;
        case 17: 
          { return BACKTICK;
          }
        case 127: break;
        case 38: 
          { return DASHES;
          }
        case 128: break;
        case 43: 
          { return OF;
          }
        case 129: break;
        case 69: 
          { return INFIX;
          }
        case 130: break;
        case 46: 
          { return HEXADECIMALPREFIX;
          }
        case 131: break;
        case 21: 
          { return UNDERSCORE;
          }
        case 132: break;
        case 34: 
          { return AMPERSAT;
          }
        case 133: break;
        case 18: 
          { return LBRACE;
          }
        case 134: break;
        case 36: 
          { return TILDE;
          }
        case 135: break;
        case 7: 
          { return PIPE;
          }
        case 136: break;
        case 57: 
          { return DOUBLEARROW;
          }
        case 137: break;
        case 29: 
          { return SLASH;
          }
        case 138: break;
        case 70: 
          { return WHERE;
          }
        case 139: break;
        case 72: 
          { return INFIXL;
          }
        case 140: break;
        case 73: 
          { return IMPORT;
          }
        case 141: break;
        case 51: 
          { return LINEFEED;
          }
        case 142: break;
        case 22: 
          { return EXLAMATION;
          }
        case 143: break;
        case 71: 
          { return INFIXR;
          }
        case 144: break;
        case 66: 
          { return ELSE;
          }
        case 145: break;
        case 59: 
          { return IF;
          }
        case 146: break;
        case 67: 
          { return ASCII;
          }
        case 147: break;
        case 42: 
          { return OCTALESCAPE;
          }
        case 148: break;
        case 44: 
          { return HEXADECIMALESCAPE;
          }
        case 149: break;
        case 6: 
          { return ASCDIGIT;
          }
        case 150: break;
        case 64: 
          { return THEN;
          }
        case 151: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 152: break;
        case 40: 
          { return RIGHTARROW;
          }
        case 153: break;
        case 3: 
          { return MINUS;
          }
        case 154: break;
        case 65: 
          { return CASE;
          }
        case 155: break;
        case 12: 
          { return RPAREN;
          }
        case 156: break;
        case 58: 
          { return DOUBLECOLON;
          }
        case 157: break;
        case 54: 
          { return NULLCHARACTER;
          }
        case 158: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
