HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Fun00008')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('z')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
WHITE_SPACE ('\n      ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('19')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('main2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ask')
WHITE_SPACE ('\n            ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE ('\n            ')
HaskellTokenType.integertoken ('13')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')