HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE GADTs ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Fun00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- | Type and size information of a Feldspar program\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.conid ('Info')
WHITE_SPACE ('\n      ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Size')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Lattice')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Size')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n      ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoType')
WHITE_SPACE ('   ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('TypeRep')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n         ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoSize')
WHITE_SPACE ('   ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Size')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n         ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoVars')
WHITE_SPACE ('   ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('VarInfo')
WHITE_SPACE ('\n         ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoSource')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('SourceInfo')
WHITE_SPACE ('\n         ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.@ ('@')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('infoType')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('szStr')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('srcStr')
WHITE_SPACE ('\n      ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('szStr')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('infoSize')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n          ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('AnySize')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n          ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' | ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.varidRegexp ('srcStr')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoSource')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n          ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n          ')
HaskellTokenType.varidRegexp ('src')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' | ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('src')