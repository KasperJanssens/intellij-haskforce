HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Import1')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Prelude')
WHITE_SPACE (' ')
HaskellTokenType.hiding ('hiding')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('zipWith')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('head')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('fromMaybe')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isJust')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Maybe')
HaskellTokenType.( ('(')
HaskellTokenType... ('..')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Prelude')
WHITE_SPACE (' ')
HaskellTokenType.as ('as')
WHITE_SPACE (' ')
HaskellTokenType.conid ('P')