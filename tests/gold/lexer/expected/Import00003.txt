HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Import00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.CPPIF ('#if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 708')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Typeable')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.#else ('#else')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Typeable')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Typeable')
HaskellTokenType., (',')
HaskellTokenType.conid ('Typeable1')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('mkTyCon3')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('mkTyConApp')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('typeOf')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.#endif ('#endif')