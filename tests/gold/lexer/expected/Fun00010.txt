HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RecordWildCards ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE NamedFieldPuns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Fun00010')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE ('\n    ')
HaskellTokenType.conid ('Maybe')
HaskellTokenType.( ('(')
HaskellTokenType... ('..')
HaskellTokenType.) (')')
WHITE_SPACE ('\n  ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE ('\n  ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Maybe')
WHITE_SPACE ('\n  ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Permissions')
HaskellTokenType.( ('(')
WHITE_SPACE ('\n      ')
HaskellTokenType.conid ('Permissions')
HaskellTokenType., (',')
WHITE_SPACE ('\n      ')
HaskellTokenType.varidRegexp ('readable')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE ('      ')
HaskellTokenType.varidRegexp ('writable')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE ('      ')
HaskellTokenType.varidRegexp ('executable')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE ('      ')
HaskellTokenType.varidRegexp ('searchable')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE ('    ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n  ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('GraphViz')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Attributes')
HaskellTokenType.. ('.')
HaskellTokenType.conid ('Colors')
WHITE_SPACE ('\n  ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Roc')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('url')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('url')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Rac')
HaskellTokenType.{ ('{')
HaskellTokenType... ('..')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE ('        ')
HaskellTokenType.= ('=')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('fun')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Ruc')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE ('         ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')