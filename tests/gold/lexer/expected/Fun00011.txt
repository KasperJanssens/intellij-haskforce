HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE LambdaCase ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE MultiWayIf ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RecursiveDo ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE ImplicitParams ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE DataKinds ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Fun00011')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conid ('ICon')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.-> ('->')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('foo')
WHITE_SPACE (' ')
HaskellTokenType.> ('>')
HaskellTokenType.> ('>')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.case ('case')
WHITE_SPACE ('\n              ')
HaskellTokenType.conid ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n              ')
HaskellTokenType.conid ('Nothing')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('12')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('True')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('12')
WHITE_SPACE ('\n       ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('False')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('9')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('mdo')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('7')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('sort')
WHITE_SPACE ('   ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.? ('?')
HaskellTokenType.varidRegexp ('cmp')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Bool')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('sort')
WHITE_SPACE ('    ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sortBy')
WHITE_SPACE (' ')
HaskellTokenType.? ('?')
HaskellTokenType.varidRegexp ('cmp')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('clearPage')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('ArrPtr')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('4096')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Word8')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('IO')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('clearPage')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('ArrPtr')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Has')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Point')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('x')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Int')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('from')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Point')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('_')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('_')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('y1')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Y')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')