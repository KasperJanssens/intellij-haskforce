HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Fun00005')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('prjF')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Project')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('sub')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sup')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sig')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('sub')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sig')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('prjF')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('prj')
WHITE_SPACE ('\n\n')
HaskellTokenType.class ('class')
WHITE_SPACE ('\n    ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType.conid ('AlphaEq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('VarId')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('VarId')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('AlphaEq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('VarId')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('VarId')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('EvalBind')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Literal')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.< ('<')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Typed')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Render')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- For debug\n')
WHITE_SPACE ('    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Constrained')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n    ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Optimize')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n    ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE ('\n      ')
HaskellTokenType.conid ('OptimizeSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('optimizeM')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('OptimizeSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
HaskellTokenType.) (')')
WHITE_SPACE ('\n          ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conid ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.| ('|')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('optimizeM')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opts')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n    ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Dict')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exprDict')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n    ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('constFold')
WHITE_SPACE (' ')
HaskellTokenType.< ('<')
HaskellTokenType.$ ('$')
HaskellTokenType.> ('>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('matchTrans')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('C'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('optimizeFeat')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opts')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')