HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Pragma00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.conid ('DIM1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.conid ('DEPRECATED')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.stringtoken ('"Use Pull instead"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')