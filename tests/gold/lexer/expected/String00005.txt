HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('String00005')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('UntypedFeldF')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n   ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Variable')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.) (')')
WHITE_SPACE ('              ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''m'')
HaskellTokenType.: (':')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.` ('`')
HaskellTokenType.varidRegexp ('append')
HaskellTokenType.` ('`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.) (')')
WHITE_SPACE ('\n   ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Lambda')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.) (')')
WHITE_SPACE ('                ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('(')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' -> ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.+ ('+')
HaskellTokenType.+ ('+')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (')')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.default ('default')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conid ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Double')
HaskellTokenType.) (')')