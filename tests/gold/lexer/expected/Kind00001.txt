HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE KindSignatures ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE EmptyDataDecls ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TypeOperators  ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE UnboxedTuples ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Kind00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Pr')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.# ('#')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Int')
WHITE_SPACE (' ')
HaskellTokenType.# ('#')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conid ('T')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.* ('*')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.* ('*')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Int')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conid ('S')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.* ('*')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Int')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
HaskellTokenType.* ('*')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Bool')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conid ('Foo')