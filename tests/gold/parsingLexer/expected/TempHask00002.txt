HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE FlexibleInstances ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE QuasiQuotes       ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TemplateHaskell   ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TempHask00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('undefined')
HaskellTokenType.| ('|')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('something')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('here')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('hello world')
HaskellTokenType." ('"')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.[ ('[')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('7')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('7')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('p')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('7')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.$ ('$')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('deriveStuff')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.$ ('$')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.'' ('''')
HaskellTokenType.conidRegexp ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('haskell')
HaskellTokenType.| ('|')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.| ('|')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.+ ('+')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic rightbrace ('')