Haskell File
  HaskellModuledeclImpl(MODULEDECL)
    PsiElement(HaskellTokenType.module)('module')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conidRegexp)('Hello00003')
    PsiElement(HaskellTokenType.where)('where')
  HaskellBodyImpl(BODY)
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('main')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('print')
          HaskellPstringtokenImpl(PSTRINGTOKEN)
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)('Hello, World!')
            PsiElement(HaskellTokenType.")('"')
    PsiErrorElement:<funorpatdecl>, <gendecl>, HaskellTokenType.class, HaskellTokenType.data, HaskellTokenType.default, HaskellTokenType.deriving, HaskellTokenType.foreign, HaskellTokenType.instance, HaskellTokenType.newtype, HaskellTokenType.type or HaskellTokenType.{-# expected, got 'module'
      <empty list>
  PsiElement(HaskellTokenType.module)('module')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('Illegal')
    PsiElement(HaskellTokenType.where)('where')
    PsiElement(HaskellTokenType.varidRegexp)('main')
    PsiElement(HaskellTokenType.=)('=')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('I'm invisible!')
    PsiElement(HaskellTokenType.")('"')