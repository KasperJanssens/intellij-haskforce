Haskell File
  PsiElement(HaskellTokenType.module)('module')
  HaskellQconidImpl(QCONID)
    PsiElement(HaskellTokenType.conidRegexp)('Hello00003')
  PsiElement(HaskellTokenType.where)('where')
  HaskellBodyImpl(BODY)
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('main')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.=)('=')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('print')
    HaskellPstringtokenImpl(PSTRINGTOKEN)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Hello, World!')
      PsiElement(HaskellTokenType.")('"')
  PsiErrorElement:<cpp>, <qconsym>, <qvarid>, <qvarsym>, <reservedop>, <special>, <symbol>, <whitechar>, HaskellTokenType.", HaskellTokenType.', HaskellTokenType.'', HaskellTokenType._, HaskellTokenType.`, HaskellTokenType.as, HaskellTokenType.case, HaskellTokenType.chartoken, HaskellTokenType.class, HaskellTokenType.comment, HaskellTokenType.conidRegexp, HaskellTokenType.data, HaskellTokenType.default, HaskellTokenType.deriving, HaskellTokenType.do, HaskellTokenType.else, HaskellTokenType.export, HaskellTokenType.floattoken, HaskellTokenType.forall, HaskellTokenType.foreign, HaskellTokenType.haddock, HaskellTokenType.if, HaskellTokenType.import, HaskellTokenType.in, HaskellTokenType.infix, HaskellTokenType.infixl, HaskellTokenType.infixr, HaskellTokenType.instance, HaskellTokenType.integertoken, HaskellTokenType.let, HaskellTokenType.newtype, HaskellTokenType.of, HaskellTokenType.then, HaskellTokenType.type, HaskellTokenType.where, HaskellTokenType.{- or HaskellTokenType.{-# expected, got 'module'
    PsiElement(HaskellTokenType.module)('module')
  PsiElement(HaskellTokenType.conidRegexp)('Illegal')
  PsiElement(HaskellTokenType.where)('where')
  PsiElement(HaskellTokenType.varidRegexp)('main')
  PsiElement(HaskellTokenType.=)('=')
  PsiElement(HaskellTokenType.")('"')
  PsiElement(HaskellTokenType.STRINGTOKEN)('I'm invisible!')
  PsiElement(HaskellTokenType.")('"')