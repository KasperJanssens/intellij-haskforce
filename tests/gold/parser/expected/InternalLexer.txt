Haskell File
  HaskellPpragmaImpl(PPRAGMA)
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('OPTIONS_HADDOCK')
    PsiElement(HaskellTokenType.PRAGMA)('hide')
    PsiElement(HaskellTokenType.#-})('#-}')
  PsiComment(HaskellTokenType.comment)('-----------------------------------------------------------------------------\n')
  PsiComment(HaskellTokenType.comment)('-- |\n')
  PsiComment(HaskellTokenType.comment)('-- Module      :  Language.Haskell.Exts.Annotated.InternalLexer\n')
  PsiComment(HaskellTokenType.comment)('-- Copyright   :  (c) The GHC Team, 1997-2000\n')
  PsiComment(HaskellTokenType.comment)('--                (c) Niklas Broberg, 2004-2009\n')
  PsiComment(HaskellTokenType.comment)('-- License     :  BSD-style (see the file LICENSE.txt)\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-- Maintainer  :  Niklas Broberg, d00nibro@chalmers.se\n')
  PsiComment(HaskellTokenType.comment)('-- Stability   :  stable\n')
  PsiComment(HaskellTokenType.comment)('-- Portability :  portable\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-- Lexer for Haskell, with some extensions.\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-----------------------------------------------------------------------------\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: Introduce different tokens for decimal, octal and hexadecimal (?)\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: FloatTok should have three parts (integer part, fraction, exponent) (?)\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: Use a lexical analyser generator (lx?)\n')
  HaskellModuledeclImpl(MODULEDECL)
    PsiElement(HaskellTokenType.module)('module')
    HaskellQconidImpl(QCONID)
      HaskellConidImpl(CONID)
        PsiElement(HaskellTokenType.conidRegexp)('Language')
      PsiElement(HaskellTokenType..)('.')
      HaskellConidImpl(CONID)
        PsiElement(HaskellTokenType.conidRegexp)('Haskell')
      PsiElement(HaskellTokenType..)('.')
      HaskellConidImpl(CONID)
        PsiElement(HaskellTokenType.conidRegexp)('Exts')
      PsiElement(HaskellTokenType..)('.')
      HaskellConidImpl(CONID)
        PsiElement(HaskellTokenType.conidRegexp)('InternalLexer')
    HaskellExportsImpl(EXPORTS)
      PsiElement(HaskellTokenType.()('(')
      HaskellExportImpl(EXPORT)
        HaskellQtyconImpl(QTYCON)
          HaskellTyconImpl(TYCON)
            HaskellConidImpl(CONID)
              PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.()('(')
        PsiElement(HaskellTokenType...)('..')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.,)(',')
      HaskellExportImpl(EXPORT)
        HaskellQvarImpl(QVAR)
          HaskellQvaridImpl(QVARID)
            HaskellVaridImpl(VARID)
              PsiElement(HaskellTokenType.varidRegexp)('showToken')
      PsiElement(HaskellTokenType.,)(',')
      HaskellExportImpl(EXPORT)
        HaskellQvarImpl(QVAR)
          HaskellQvaridImpl(QVARID)
            HaskellVaridImpl(VARID)
              PsiElement(HaskellTokenType.varidRegexp)('lexer')
      PsiElement(HaskellTokenType.,)(',')
      HaskellExportImpl(EXPORT)
        HaskellQvarImpl(QVAR)
          HaskellQvaridImpl(QVARID)
            HaskellVaridImpl(VARID)
              PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.where)('where')
  HaskellBodyImpl(BODY)
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('ParseMonad')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('SrcLoc')
      PsiElement(HaskellTokenType.hiding)('hiding')
      PsiElement(HaskellTokenType.()('(')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('loc')
      PsiElement(HaskellTokenType.))(')')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Comments')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Extension')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Prelude')
      PsiElement(HaskellTokenType.hiding)('hiding')
      PsiElement(HaskellTokenType.()('(')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('id')
      PsiElement(HaskellTokenType.,)(',')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
      PsiElement(HaskellTokenType.))(')')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Char')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Ratio')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('List')
      PsiElement(HaskellTokenType.()('(')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('intercalate')
      PsiElement(HaskellTokenType.,)(',')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isPrefixOf')
      PsiElement(HaskellTokenType.))(')')
    HaskellImpdeclImpl(IMPDECL)
      PsiElement(HaskellTokenType.import)('import')
      HaskellQconidImpl(QCONID)
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Control')
        PsiElement(HaskellTokenType..)('.')
        HaskellConidImpl(CONID)
          PsiElement(HaskellTokenType.conidRegexp)('Monad')
      PsiElement(HaskellTokenType.()('(')
      HaskellImporttImpl(IMPORTT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- import Debug.Trace (trace)\n')
    HaskellDatadeclImpl(DATADECL)
      PsiElement(HaskellTokenType.data)('data')
      HaskellTypeeImpl(TYPEE)
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.=)('=')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('VarId')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('QVarId')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- duplicable implicit parameter\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- linear implicit parameter\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ConId')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('QConId')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DVarId')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.[)('[')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.])(']')
      PsiComment(HaskellTokenType.comment)('-- to enable varid's with '-' in them\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('VarSym')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ConSym')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('QConSym')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('IntTok')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Character')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('StringTok')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1#\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1##\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1.0#\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1.0##\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- c#\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('StringHash')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- "Hello world!"#\n')
      PsiComment(HaskellTokenType.comment)('-- Symbols\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightParen')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
      PsiComment(HaskellTokenType.comment)('-- a virtual close brace\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
      PsiComment(HaskellTokenType.comment)('-- [:\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
      PsiComment(HaskellTokenType.comment)('-- :]\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Comma')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Underscore')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
      PsiComment(HaskellTokenType.comment)('-- Reserved operators\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Dot')
      PsiComment(HaskellTokenType.comment)('-- reserved for use with 'forall x . x'\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DotDot')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Colon')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('QuoteColon')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Equals')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Backslash')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('At')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Tilde')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Minus')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Star')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
      PsiComment(HaskellTokenType.comment)('-- >-\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
      PsiComment(HaskellTokenType.comment)('-- -<\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
      PsiComment(HaskellTokenType.comment)('-- >>-\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
      PsiComment(HaskellTokenType.comment)('-- -<<\n')
      PsiComment(HaskellTokenType.comment)('-- Template Haskell\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
      PsiComment(HaskellTokenType.comment)('-- [| or [e|\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
      PsiComment(HaskellTokenType.comment)('-- [p|\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
      PsiComment(HaskellTokenType.comment)('-- [d|\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
      PsiComment(HaskellTokenType.comment)('-- [t|\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
      PsiComment(HaskellTokenType.comment)('-- |]\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- dollar x\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
      PsiComment(HaskellTokenType.comment)('-- dollar (\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
      PsiComment(HaskellTokenType.comment)('-- 'x (but without the x)\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
      PsiComment(HaskellTokenType.comment)('-- ''T (but without the T)\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- [$...|...]\n')
      PsiComment(HaskellTokenType.comment)('-- HaRP\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
      PsiComment(HaskellTokenType.comment)('-- (|\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
      PsiComment(HaskellTokenType.comment)('-- |)\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
      PsiComment(HaskellTokenType.comment)('-- @:\n')
      PsiComment(HaskellTokenType.comment)('-- Hsx\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <%\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
      PsiComment(HaskellTokenType.comment)('-- %>\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
      PsiComment(HaskellTokenType.comment)('-- >\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
      PsiComment(HaskellTokenType.comment)('-- </\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
      PsiComment(HaskellTokenType.comment)('-- />\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <%> (note that close doesn't exist, it's XCloseTagOpen followed by XCodeTagClose)\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
      PsiComment(HaskellTokenType.comment)('-- <[\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
      PsiComment(HaskellTokenType.comment)('-- ]>\n')
      PsiComment(HaskellTokenType.comment)('-- Pragmas\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
      PsiComment(HaskellTokenType.comment)('-- #-}\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('RULES')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('INLINE')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        HaskellAtypeImpl(ATYPE)
          HaskellOqtyconImpl(OQTYCON)
            HaskellQtyconImpl(QTYCON)
              HaskellTyconImpl(TYCON)
                HaskellConidImpl(CONID)
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('WARNING')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('SCC')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('CORE')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
        HaskellAtypeImpl(ATYPE)
          PsiElement(HaskellTokenType.()('(')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Maybe')
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('--        | CFILES  String\n')
      PsiComment(HaskellTokenType.comment)('--        | INCLUDE String\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('ANN')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
      PsiComment(HaskellTokenType.comment)('-- Reserved Ids\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_As')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_By')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
      PsiComment(HaskellTokenType.comment)('-- indexed type families\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
      PsiComment(HaskellTokenType.comment)('-- universal/existential types\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_If')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_In')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
      PsiComment(HaskellTokenType.comment)('-- arrows\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
      PsiComment(HaskellTokenType.comment)('-- arrows\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
      PsiComment(HaskellTokenType.comment)('-- FFI\n')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
      PsiElement(HaskellTokenType.|)('|')
      HaskellConstrImpl(CONSTR)
        HaskellConImpl(CON)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('EOF')
      PsiElement(HaskellTokenType.deriving)('deriving')
      PsiElement(HaskellTokenType.()('(')
      HaskellQtyclsImpl(QTYCLS)
        HaskellTyclsImpl(TYCLS)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Eq')
      PsiElement(HaskellTokenType.,)(',')
      HaskellQtyclsImpl(QTYCLS)
        HaskellTyclsImpl(TYCLS)
          HaskellConidImpl(CONID)
            PsiElement(HaskellTokenType.conidRegexp)('Show')
      PsiElement(HaskellTokenType.))(')')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.[)('[')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  PsiElement(HaskellTokenType.()('(')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        PsiElement(HaskellTokenType.()('(')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.[)('[')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('..')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('DotDot')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)(':')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Colon')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('::')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('=')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Equals')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Backslash')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('|')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Bar')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('<-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('->')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('@')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('At')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('@:')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('~')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Tilde')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('=>')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('*')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Star')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('KindSignatures')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Parallel arrays\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('[:')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)(':]')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Arrows notation\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-<')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('>-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-<<')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('>>-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Unicode notation\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2190')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2192')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x21d2')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2237')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2919')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291a')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291b')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291c')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2605')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Star')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('KindSignatures')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2200')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('special_varops')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.[)('[')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  PsiElement(HaskellTokenType.()('(')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        PsiElement(HaskellTokenType.()('(')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('special_varops')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.[)('[')
          PsiComment(HaskellTokenType.comment)('-- the dot is only a special symbol together with forall, but can still be used as function composition\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('.')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Dot')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ExistentialQuantification')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Minus')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('!')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.[)('[')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  PsiElement(HaskellTokenType.()('(')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        PsiElement(HaskellTokenType.()('(')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.[)('[')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('_')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Underscore')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('by')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_By')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('case')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('class')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('data')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('default')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('deriving')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('do')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('else')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('family')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('TypeFamilies')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- indexed type families\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('forall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ExistentialQuantification')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- universal/existential quantification\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('group')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('if')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_If')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('import')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('in')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_In')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infix')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infixl')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infixr')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('instance')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('let')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('mdo')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('RecursiveDo')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('module')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('newtype')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('of')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('proc')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('rec')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('RecursiveDo')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('DoRec')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('then')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('type')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('using')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('where')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- FFI\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('foreign')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('special_varids')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.[)('[')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  PsiElement(HaskellTokenType.()('(')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        PsiElement(HaskellTokenType.()('(')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellCtypeImpl(CTYPE)
                          HaskellTypeeImpl(TYPEE)
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            HaskellAtypeImpl(ATYPE)
                              HaskellOqtyconImpl(OQTYCON)
                                HaskellQtyconImpl(QTYCON)
                                  HaskellTyconImpl(TYCON)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('special_varids')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.[)('[')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('as')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_As')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('qualified')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('hiding')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- FFI\n')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('export')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('safe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('SafeImports')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Safe')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Trustworthy')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('unsafe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('threadsafe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('interruptible')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('InterruptibleFFI')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('stdcall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('ccall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('cplusplus')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('dotnet')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('jvm')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('js')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('capi')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                HaskellExpImpl(EXP)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('CApiFFI')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('pragmas')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.[)('[')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  PsiElement(HaskellTokenType.()('(')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellCtypeImpl(CTYPE)
                    HaskellTypeeImpl(TYPEE)
                      HaskellAtypeImpl(ATYPE)
                        HaskellOqtyconImpl(OQTYCON)
                          HaskellQtyconImpl(QTYCON)
                            HaskellTyconImpl(TYCON)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Token')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('pragmas')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.[)('[')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('rules')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('RULES')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('inline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('True')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('noinline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('False')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('notinline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('False')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('specialise')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('specialize')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('source')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('deprecated')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('warning')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('WARNING')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('ann')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('ANN')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('scc')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('SCC')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('generated')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('core')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('CORE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('unpack')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('language')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('minimal')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('no_overlap')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('overlap')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('incoherent')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('options')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            HaskellExpImpl(EXP)
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('undefined')
            PsiElement(HaskellTokenType.))(')')
          PsiComment(HaskellTokenType.comment)('-- we'll tweak it before use - promise!\n')
          PsiComment(HaskellTokenType.comment)('-- ( "cfiles",            CFILES  undefined ), -- same here...\n')
          PsiComment(HaskellTokenType.comment)('-- ( "include",           INCLUDE undefined )  -- ...and here!\n')
          PsiElement(HaskellTokenType.])(']')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.,)(',')
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
        PsiElement(HaskellTokenType.,)(',')
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('c')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('||')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('isDigit')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('||')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''\''')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('||')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''_'')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('c')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              PsiElement(HaskellTokenType.`)('`')
              HaskellQvaridImpl(QVARID)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('elem')
              PsiElement(HaskellTokenType.`)('`')
          HaskellPstringtokenImpl(PSTRINGTOKEN)
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)(':!#%&*./?@')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('-')
            PsiElement(HaskellTokenType.")('"')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('||')
          PsiElement(HaskellTokenType.()('(')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isSymbol')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
              HaskellQopImpl(QOP)
                HaskellQvaropImpl(QVAROP)
                  HaskellQvarsymImpl(QVARSYM)
                    HaskellVarsymImpl(VARSYM)
                      PsiElement(HaskellTokenType.Varsym)('||')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isPunctuation')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
            PsiElement(HaskellTokenType.))(')')
            HaskellQopImpl(QOP)
              HaskellQvaropImpl(QVAROP)
                HaskellQvarsymImpl(QVARSYM)
                  HaskellVarsymImpl(VARSYM)
                    PsiElement(HaskellTokenType.Varsym)('&&')
            HaskellQvarImpl(QVAR)
              HaskellQvaridImpl(QVARID)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('not')
            PsiElement(HaskellTokenType.()('(')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
              HaskellQopImpl(QOP)
                HaskellQvaropImpl(QVAROP)
                  PsiElement(HaskellTokenType.`)('`')
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('elem')
                  PsiElement(HaskellTokenType.`)('`')
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('(),;[]`{}_\"'')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.))(')')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('c')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('isAlphaNum')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('||')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('c')
          HaskellQopImpl(QOP)
            HaskellQvaropImpl(QVAROP)
              HaskellQvarsymImpl(QVARSYM)
                HaskellVarsymImpl(VARSYM)
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''_'')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.->)('->')
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              HaskellAtypeImpl(ATYPE)
                HaskellTyvarImpl(TYVAR)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('()')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('c')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('msg')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.if)('if')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('null')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.Varsym)('||')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('head')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.Varsym)('/=')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
              PsiElement(HaskellTokenType.then)('then')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('fail')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('msg')
              PsiElement(HaskellTokenType.else)('else')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('discard')
                PsiElement(HaskellTokenType.integertoken)('1')
          PsiComment(HaskellTokenType.comment)('-- The top-level lexer.\n')
          PsiComment(HaskellTokenType.comment)('-- We need to know whether we are at the beginning of the line to decide\n')
          PsiComment(HaskellTokenType.comment)('-- whether to insert layout tokens.\n')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexer')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.()('(')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Token')
                PsiElement(HaskellTokenType.->)('->')
                HaskellTypeeImpl(TYPEE)
                  HaskellAtypeImpl(ATYPE)
                    HaskellOqtyconImpl(OQTYCON)
                      HaskellQtyconImpl(QTYCON)
                        HaskellTyconImpl(TYCON)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('P')
                  HaskellAtypeImpl(ATYPE)
                    HaskellTyvarImpl(TYVAR)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('a')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('P')
            HaskellAtypeImpl(ATYPE)
              HaskellTyvarImpl(TYVAR)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexer')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('runL')
          HaskellQvarImpl(QVAR)
            HaskellQvaridImpl(QVARID)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('topLexer')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.()('(')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Token')
            PsiElement(HaskellTokenType.))(')')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('b')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('pullCtxtFlag')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.if)('if')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('b')
              PsiElement(HaskellTokenType.then)('then')
              PsiComment(HaskellTokenType.comment)('-- trace (show cf ++ ": " ++ show VRightCurly) $\n')
              PsiComment(HaskellTokenType.comment)('-- the lex context state flags that we must do an empty {} - UGLY\n')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('setBOL')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.Varsym)('>>')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.Varsym)('>>=')
                PsiElement(HaskellTokenType.\)('\')
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('l')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                    PsiElement(HaskellTokenType.()('(')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                    PsiElement(HaskellTokenType.))(')')
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
                  PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.else)('else')
              HaskellExpImpl(EXP)
                PsiElement(HaskellTokenType.do)('do')
                HaskellStmtsImpl(STMTS)
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.<-)('<-')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('checkBOL')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.()('(')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('bol'')
                    PsiElement(HaskellTokenType.,)(',')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('ws')
                    PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.<-)('<-')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiComment(HaskellTokenType.comment)('-- take care of whitespace in PCDATA\n')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('ec')
                  PsiElement(HaskellTokenType.<-)('<-')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('getExtContext')
                  HaskellExpImpl(EXP)
                    PsiElement(HaskellTokenType.case)('case')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('ec')
                    PsiElement(HaskellTokenType.of)('of')
                    PsiComment(HaskellTokenType.comment)('-- if there was no linebreak, and we are lexing PCDATA,\n')
                    PsiComment(HaskellTokenType.comment)('-- then we want to care about the whitespace.\n')
                    PsiComment(HaskellTokenType.comment)('-- We don't bother to test for XmlSyntax, since we\n')
                    PsiComment(HaskellTokenType.comment)('-- couldn't end up in ChildCtxt otherwise.\n')
                    HaskellAltImpl(ALT)
                      HaskellPatImpl(PAT)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('Just')
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                      PsiElement(HaskellTokenType.|)('|')
                      HaskellGuardImpl(GUARD)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('not')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                        HaskellQopImpl(QOP)
                          HaskellQvaropImpl(QVAROP)
                            HaskellQvarsymImpl(QVARSYM)
                              HaskellVarsymImpl(VARSYM)
                                PsiElement(HaskellTokenType.Varsym)('&&')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('ws')
                      PsiElement(HaskellTokenType.->)('->')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                        HaskellQopImpl(QOP)
                          HaskellQvaropImpl(QVAROP)
                            HaskellQvarsymImpl(QVARSYM)
                              HaskellVarsymImpl(VARSYM)
                                PsiElement(HaskellTokenType.Varsym)('>>=')
                        PsiElement(HaskellTokenType.\)('\')
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('l')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.$)('$')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Loc')
                          PsiElement(HaskellTokenType.()('(')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('l')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('l')
                          PsiElement(HaskellTokenType.))(')')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.$)('$')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                          HaskellPstringtokenImpl(PSTRINGTOKEN)
                            PsiElement(HaskellTokenType.")('"')
                            PsiElement(HaskellTokenType.STRINGTOKEN)(' ')
                            PsiElement(HaskellTokenType.")('"')
                    HaskellAltImpl(ALT)
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.->)('->')
                      HaskellExpImpl(EXP)
                        PsiElement(HaskellTokenType.do)('do')
                        HaskellStmtsImpl(STMTS)
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('startToken')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('sl')
                          PsiElement(HaskellTokenType.<-)('<-')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.<-)('<-')
                          HaskellExpImpl(EXP)
                            PsiElement(HaskellTokenType.if)('if')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('bol'')
                            PsiElement(HaskellTokenType.then)('then')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
                            PsiComment(HaskellTokenType.comment)('-- >>= \t -> trace ("BOL: " ++ show t) (return t)\n')
                            PsiElement(HaskellTokenType.else)('else')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('lexToken')
                          PsiComment(HaskellTokenType.comment)('-- >>= \t -> trace (show t) (return t)\n')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('el')
                          PsiElement(HaskellTokenType.<-)('<-')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('return')
                            HaskellQopImpl(QOP)
                              HaskellQvaropImpl(QVAROP)
                                HaskellQvarsymImpl(QVARSYM)
                                  HaskellVarsymImpl(VARSYM)
                                    PsiElement(HaskellTokenType.$)('$')
                            HaskellQconImpl(QCON)
                              HaskellQconidImpl(QCONID)
                                HaskellConidImpl(CONID)
                                  PsiElement(HaskellTokenType.conidRegexp)('Loc')
                            PsiElement(HaskellTokenType.()('(')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('sl')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('el')
                            PsiElement(HaskellTokenType.))(')')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('t')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Lex')
            HaskellAtypeImpl(ATYPE)
              HaskellTyvarImpl(TYVAR)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            HaskellAtypeImpl(ATYPE)
              PsiElement(HaskellTokenType.()('(')
              HaskellCtypeImpl(CTYPE)
                HaskellTypeeImpl(TYPEE)
                  HaskellAtypeImpl(ATYPE)
                    HaskellOqtyconImpl(OQTYCON)
                      HaskellQtyconImpl(QTYCON)
                        HaskellTyconImpl(TYCON)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
              PsiElement(HaskellTokenType.,)(',')
              HaskellCtypeImpl(CTYPE)
                HaskellTypeeImpl(TYPEE)
                  HaskellAtypeImpl(ATYPE)
                    HaskellOqtyconImpl(OQTYCON)
                      HaskellQtyconImpl(QTYCON)
                        HaskellTyconImpl(TYCON)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
              PsiElement(HaskellTokenType.))(')')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('ignL')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('ignoreLinePragmasL')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              PsiComment(HaskellTokenType.comment)('-- If we find a recognised pragma, we don't want to treat it as a comment.\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''#'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('rest')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('ignL')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('l')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('fn')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('setSrcLineL')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('setLineFilenameL')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('fn')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('True')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('loc')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol1')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('loc2')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('Comment')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('loc')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('loc2')
                      PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('reverse')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol2')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol1')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('bol2')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellExpImpl(EXP)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('s1')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('all')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('s1')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('loc')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('dashes')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.Varsym)('==')
                      PsiElement(HaskellTokenType.chartoken)(''-'')
                      PsiElement(HaskellTokenType.))(')')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.Varsym)('/=')
                      PsiElement(HaskellTokenType.chartoken)(''\n'')
                      PsiElement(HaskellTokenType.))(')')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('s'')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('getInput')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('loc2')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    PsiElement(HaskellTokenType.let)('let')
                    HaskellFunorpatdeclImpl(FUNORPATDECL)
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('com')
                      HaskellRhsImpl(RHS)
                        PsiElement(HaskellTokenType.=)('=')
                        HaskellExpImpl(EXP)
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Comment')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('False')
                          PsiElement(HaskellTokenType.()('(')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('loc')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('loc2')
                          PsiElement(HaskellTokenType.))(')')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.$)('$')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('dashes')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.Varsym)('++')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('rest')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.case)('case')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('s'')
                      PsiElement(HaskellTokenType.of)('of')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.[)('[')
                          PsiElement(HaskellTokenType.])(']')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('com')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.Varsym)('>>')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          PsiElement(HaskellTokenType.()('(')
                          HaskellExpImpl(EXP)
                            HaskellQconImpl(QCON)
                              HaskellQconidImpl(QCONID)
                                HaskellConidImpl(CONID)
                                  PsiElement(HaskellTokenType.conidRegexp)('False')
                          PsiElement(HaskellTokenType.,)(',')
                          HaskellExpImpl(EXP)
                            HaskellQconImpl(QCON)
                              HaskellQconidImpl(QCONID)
                                HaskellConidImpl(CONID)
                                  PsiElement(HaskellTokenType.conidRegexp)('True')
                          PsiElement(HaskellTokenType.))(')')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.do)('do')
                          HaskellStmtsImpl(STMTS)
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('com')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('True')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              PsiElement(HaskellTokenType.()('(')
                              HaskellExpImpl(EXP)
                                HaskellQconImpl(QCON)
                                  HaskellQconidImpl(QCONID)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('True')
                              PsiElement(HaskellTokenType.,)(',')
                              HaskellExpImpl(EXP)
                                HaskellQconImpl(QCON)
                                  HaskellQconidImpl(QCONID)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('True')
                              PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''\n'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellExpImpl(EXP)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''\t'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexTab')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellExpImpl(EXP)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellExpImpl(EXP)
                        HaskellQconImpl(QCON)
                          HaskellQconidImpl(QCONID)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.))(')')
              PsiComment(HaskellTokenType.comment)('-- | lexWhiteSpace without the return value.\n')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Lex')
            HaskellAtypeImpl(ATYPE)
              HaskellTyvarImpl(TYVAR)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('()')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              PsiElement(HaskellTokenType._)('_')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('bol')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              HaskellQconImpl(QCON)
                HaskellQconidImpl(QCONID)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('()')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
        PsiElement(HaskellTokenType.,)(',')
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('str')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.let)('let')
          HaskellFunorpatdeclImpl(FUNORPATDECL)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('pragma')
            HaskellRhsImpl(RHS)
              PsiElement(HaskellTokenType.=)('=')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType..)('.')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.$)('$')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.in)('in')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.case)('case')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('pragma')
            PsiElement(HaskellTokenType.of)('of')
            HaskellAltImpl(ALT)
              HaskellPatImpl(PAT)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.->)('->')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('False')
            HaskellAltImpl(ALT)
              HaskellPatImpl(PAT)
                PsiElement(HaskellTokenType._)('_')
              PsiElement(HaskellTokenType.->)('->')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('True')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('str')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.let)('let')
          HaskellFunorpatdeclImpl(FUNORPATDECL)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('pragma')
            HaskellRhsImpl(RHS)
              PsiElement(HaskellTokenType.=)('=')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('map')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('toLower')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType..)('.')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('isAlphaNum')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType..)('.')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                HaskellQopImpl(QOP)
                  HaskellQvaropImpl(QVAROP)
                    HaskellQvarsymImpl(QVARSYM)
                      HaskellVarsymImpl(VARSYM)
                        PsiElement(HaskellTokenType.$)('$')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.in)('in')
          HaskellExpImpl(EXP)
            PsiElement(HaskellTokenType.case)('case')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('pragma')
            PsiElement(HaskellTokenType.of)('of')
            HaskellAltImpl(ALT)
              HaskellPatImpl(PAT)
                HaskellPstringtokenImpl(PSTRINGTOKEN)
                  PsiElement(HaskellTokenType.")('"')
                  PsiElement(HaskellTokenType.STRINGTOKEN)('line')
                  PsiElement(HaskellTokenType.")('"')
              PsiElement(HaskellTokenType.->)('->')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('True')
            HaskellAltImpl(ALT)
              HaskellPatImpl(PAT)
                PsiElement(HaskellTokenType._)('_')
              PsiElement(HaskellTokenType.->)('->')
              HaskellExpImpl(EXP)
                HaskellQconImpl(QCON)
                  HaskellQconidImpl(QCONID)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('False')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            PsiElement(HaskellTokenType.()('(')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Int')
            PsiElement(HaskellTokenType.,)(',')
            HaskellCtypeImpl(CTYPE)
              HaskellTypeeImpl(TYPEE)
                HaskellAtypeImpl(ATYPE)
                  HaskellOqtyconImpl(OQTYCON)
                    HaskellQtyconImpl(QTYCON)
                      HaskellTyconImpl(TYCON)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.))(')')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('discard')
              PsiElement(HaskellTokenType.integertoken)('3')
            PsiComment(HaskellTokenType.comment)('-- {-#\n')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('discard')
              PsiElement(HaskellTokenType.integertoken)('4')
            PsiComment(HaskellTokenType.comment)('-- LINE\n')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('i')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isDigit')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('when')
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('null')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('i')
              PsiElement(HaskellTokenType.))(')')
              HaskellQopImpl(QOP)
                HaskellQvaropImpl(QVAROP)
                  HaskellQvarsymImpl(QVARSYM)
                    HaskellVarsymImpl(VARSYM)
                      PsiElement(HaskellTokenType.$)('$')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('fail')
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                PsiElement(HaskellTokenType.")('"')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('matchChar')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                PsiElement(HaskellTokenType.")('"')
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('fn')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
              PsiElement(HaskellTokenType.()('(')
              HaskellQopImpl(QOP)
                HaskellQvaropImpl(QVAROP)
                  HaskellQvarsymImpl(QVARSYM)
                    HaskellVarsymImpl(VARSYM)
                      PsiElement(HaskellTokenType.Varsym)('/=')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              PsiElement(HaskellTokenType.))(')')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('matchChar')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Impossible - lexLinePragma')
                PsiElement(HaskellTokenType.")('"')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('mapM_')
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('flip')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
                HaskellPstringtokenImpl(PSTRINGTOKEN)
                  PsiElement(HaskellTokenType.")('"')
                  PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                  PsiElement(HaskellTokenType.")('"')
              PsiElement(HaskellTokenType.))(')')
              HaskellPstringtokenImpl(PSTRINGTOKEN)
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('#-}')
                PsiElement(HaskellTokenType.")('"')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              PsiElement(HaskellTokenType.()('(')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('read')
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('i')
              PsiElement(HaskellTokenType.,)(',')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('fn')
              PsiElement(HaskellTokenType.))(')')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          HaskellTypeeImpl(TYPEE)
            HaskellAtypeImpl(ATYPE)
              HaskellOqtyconImpl(OQTYCON)
                HaskellQtyconImpl(QTYCON)
                  HaskellTyconImpl(TYCON)
                    HaskellConidImpl(CONID)
                      PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.->)('->')
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              HaskellAtypeImpl(ATYPE)
                HaskellTyvarImpl(TYVAR)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              HaskellAtypeImpl(ATYPE)
                PsiElement(HaskellTokenType.()('(')
                HaskellCtypeImpl(CTYPE)
                  HaskellTypeeImpl(TYPEE)
                    HaskellAtypeImpl(ATYPE)
                      HaskellOqtyconImpl(OQTYCON)
                        HaskellQtyconImpl(QTYCON)
                          HaskellTyconImpl(TYCON)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('Bool')
                PsiElement(HaskellTokenType.,)(',')
                HaskellCtypeImpl(CTYPE)
                  HaskellTypeeImpl(TYPEE)
                    HaskellAtypeImpl(ATYPE)
                      HaskellOqtyconImpl(OQTYCON)
                        HaskellQtyconImpl(QTYCON)
                          HaskellTyconImpl(TYCON)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('String')
                PsiElement(HaskellTokenType.))(')')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('str')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''}'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellPstringtokenImpl(PSTRINGTOKEN)
                          PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.STRINGTOKEN)('-{')
                          PsiElement(HaskellTokenType.")('"')
                        HaskellQopImpl(QOP)
                          HaskellQvaropImpl(QVAROP)
                            HaskellQvarsymImpl(QVARSYM)
                              HaskellVarsymImpl(VARSYM)
                                PsiElement(HaskellTokenType.Varsym)('++')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiComment(HaskellTokenType.comment)('-- rest of the subcomment\n')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellPstringtokenImpl(PSTRINGTOKEN)
                          PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.STRINGTOKEN)('}-')
                          PsiElement(HaskellTokenType.")('"')
                        HaskellQopImpl(QOP)
                          HaskellQvaropImpl(QVAROP)
                            HaskellQvarsymImpl(QVARSYM)
                              HaskellVarsymImpl(VARSYM)
                                PsiElement(HaskellTokenType.Varsym)('++')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                  PsiComment(HaskellTokenType.comment)('-- rest of this comment\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''\t'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexTab')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    PsiElement(HaskellTokenType.chartoken)(''\t'')
                    HaskellQopImpl(QOP)
                      HaskellQvaropImpl(QVAROP)
                        HaskellQvarsymImpl(QVARSYM)
                          HaskellVarsymImpl(VARSYM)
                            PsiElement(HaskellTokenType.:)(':')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''\n'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('True')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    PsiElement(HaskellTokenType.chartoken)(''\n'')
                    HaskellQopImpl(QOP)
                      HaskellQvaropImpl(QVAROP)
                        HaskellQvarsymImpl(QVARSYM)
                          HaskellVarsymImpl(VARSYM)
                            PsiElement(HaskellTokenType.:)(':')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQopImpl(QOP)
                      HaskellQvaropImpl(QVAROP)
                        HaskellQvarsymImpl(QVARSYM)
                          HaskellVarsymImpl(VARSYM)
                            PsiElement(HaskellTokenType.:)(':')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('fail')
                  HaskellPstringtokenImpl(PSTRINGTOKEN)
                    PsiElement(HaskellTokenType.")('"')
                    PsiElement(HaskellTokenType.STRINGTOKEN)('Unterminated nested comment')
                    PsiElement(HaskellTokenType.")('"')
              PsiComment(HaskellTokenType.comment)('-- When we are lexing the first token of a line, check whether we need to\n')
              PsiComment(HaskellTokenType.comment)('-- insert virtual semicolons or close braces due to layout.\n')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('pos')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getOffside')
            PsiComment(HaskellTokenType.comment)('-- trace ("Off: " ++ (show pos)) $ do\n')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('pos')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('LT')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  PsiComment(HaskellTokenType.comment)('-- trace "layout: inserting '}'\n" $\n')
                  PsiComment(HaskellTokenType.comment)('-- Set col to 0, indicating that we're still at the\n')
                  PsiComment(HaskellTokenType.comment)('-- beginning of the line, in case we need a semi-colon too.\n')
                  PsiComment(HaskellTokenType.comment)('-- Also pop the context here, so that we don't insert\n')
                  PsiComment(HaskellTokenType.comment)('-- another close brace before the parser can pop it.\n')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('setBOL')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexBOL')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('EQ')
                PsiElement(HaskellTokenType.->)('->')
                PsiComment(HaskellTokenType.comment)('-- trace "layout: inserting ';'\n" $\n')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('GT')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexToken')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexToken')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('ec')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getExtContext')
            PsiComment(HaskellTokenType.comment)('-- we don't bother to check XmlSyntax since we couldn't\n')
            PsiComment(HaskellTokenType.comment)('-- have ended up in a non-Nothing context if it wasn't\n')
            PsiComment(HaskellTokenType.comment)('-- enabled.\n')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('ec')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('HarpCtxt')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('CloseTagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''>'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''/'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexChildCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('CloseTagCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''['')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('HarpCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('EOF')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.case)('case')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('s')
                  PsiElement(HaskellTokenType.of)('of')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''\n'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.do)('do')
                      HaskellStmtsImpl(STMTS)
                        HaskellPatImpl(PAT)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('x')
                        PsiElement(HaskellTokenType.<-)('<-')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.Varsym)('>>')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.case)('case')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('x')
                          PsiElement(HaskellTokenType.of)('of')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('p')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              PsiElement(HaskellTokenType.chartoken)(''\n'')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.:)(':')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('p')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('fail')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellPstringtokenImpl(PSTRINGTOKEN)
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexPCDATA: unexpected token: ')
                                PsiElement(HaskellTokenType.")('"')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('show')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('x')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''<'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.")('"')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.do)('do')
                      HaskellStmtsImpl(STMTS)
                        PsiElement(HaskellTokenType.let)('let')
                        HaskellFunorpatdeclImpl(FUNORPATDECL)
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('pcd')
                          HaskellRhsImpl(RHS)
                            PsiElement(HaskellTokenType.=)('=')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                              PsiElement(HaskellTokenType.()('(')
                              HaskellExpImpl(EXP)
                                PsiElement(HaskellTokenType.\)('\')
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                                PsiElement(HaskellTokenType.->)('->')
                                HaskellExpImpl(EXP)
                                  HaskellQvarImpl(QVAR)
                                    HaskellQvaridImpl(QVARID)
                                      HaskellVaridImpl(VARID)
                                        PsiElement(HaskellTokenType.varidRegexp)('c')
                                  HaskellQopImpl(QOP)
                                    HaskellQvaropImpl(QVAROP)
                                      PsiElement(HaskellTokenType.`)('`')
                                      HaskellQvaridImpl(QVARID)
                                        HaskellVaridImpl(VARID)
                                          PsiElement(HaskellTokenType.varidRegexp)('notElem')
                                      PsiElement(HaskellTokenType.`)('`')
                                  HaskellPstringtokenImpl(PSTRINGTOKEN)
                                    PsiElement(HaskellTokenType.")('"')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('<')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('n')
                                    PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.))(')')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('s')
                        HaskellFunorpatdeclImpl(FUNORPATDECL)
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('l')
                          HaskellRhsImpl(RHS)
                            PsiElement(HaskellTokenType.=)('=')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('length')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('l')
                        HaskellPatImpl(PAT)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('x')
                        PsiElement(HaskellTokenType.<-)('<-')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.case)('case')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('x')
                          PsiElement(HaskellTokenType.of)('of')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('pcd'')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd'')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('fail')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellPstringtokenImpl(PSTRINGTOKEN)
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexPCDATA: unexpected token: ')
                                PsiElement(HaskellTokenType.")('"')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('show')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('x')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCodeTagContext')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCloseTagCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''>'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCloseTagCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''/'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexTagCtxt: Empty tag')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''>'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexTagCtxt: Standard tag')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then RegularPatterns must be on.\n')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)('']'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      HaskellPstringtokenImpl(PSTRINGTOKEN)
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexHarpToken')
                        PsiElement(HaskellTokenType.")('"')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    HaskellGendeclImpl(GENDECL)
      HaskellVarsImpl(VARS)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
      PsiElement(HaskellTokenType.::)('::')
      HaskellCtypeImpl(CTYPE)
        HaskellTypeeImpl(TYPEE)
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          HaskellAtypeImpl(ATYPE)
            HaskellTyvarImpl(TYVAR)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('a')
          HaskellAtypeImpl(ATYPE)
            HaskellOqtyconImpl(OQTYCON)
              HaskellQtyconImpl(QTYCON)
                HaskellTyconImpl(TYCON)
                  HaskellConidImpl(CONID)
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    HaskellFunorpatdeclImpl(FUNORPATDECL)
      HaskellPatImpl(PAT)
        HaskellVaridImpl(VARID)
          PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
      HaskellRhsImpl(RHS)
        PsiElement(HaskellTokenType.=)('=')
        HaskellExpImpl(EXP)
          PsiElement(HaskellTokenType.do)('do')
          HaskellStmtsImpl(STMTS)
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            HaskellPatImpl(PAT)
              HaskellVaridImpl(VARID)
                PsiElement(HaskellTokenType.varidRegexp)('exts')
            PsiElement(HaskellTokenType.<-)('<-')
            HaskellExpImpl(EXP)
              HaskellQvarImpl(QVAR)
                HaskellQvaridImpl(QVARID)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
            PsiElement(HaskellTokenType.let)('let')
            HaskellFunorpatdeclImpl(FUNORPATDECL)
              HaskellPatImpl(PAT)
                HaskellVaridImpl(VARID)
                  PsiElement(HaskellTokenType.varidRegexp)('intHash')
              HaskellRhsImpl(RHS)
                PsiElement(HaskellTokenType.=)('=')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexHash')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('Right')
                    HaskellQconImpl(QCON)
                      HaskellQconidImpl(QCONID)
                        HaskellConidImpl(CONID)
                          PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
                  PsiElement(HaskellTokenType.))(')')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.case)('case')
              HaskellExpImpl(EXP)
                HaskellQvarImpl(QVAR)
                  HaskellQvaridImpl(QVARID)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('EOF')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''0'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''o'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''b'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('BinaryLiterals')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''x'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.()('(')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                  PsiComment(HaskellTokenType.comment)('-- implicit parameters\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''?'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ImplicitParams')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('id')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ImplicitParams')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('id')
                  PsiComment(HaskellTokenType.comment)('-- end implicit parameters\n')
                  PsiComment(HaskellTokenType.comment)('-- harp\n')
                  PsiComment(HaskellTokenType.comment)('--        '(':'|':c:_  | isHSymbol c -> discard 1 >> return LeftParen\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''|'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''|'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)('')'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
                  PsiComment(HaskellTokenType.{-)('{-')
                  PsiComment(HaskellTokenType.commenttext)(' This is handled by the reserved_ops above.\n        '@':':':_ | RegularPatterns `elem` exts ')
                  PsiComment(HaskellTokenType.commenttext)('-')
                  PsiComment(HaskellTokenType.commenttext)('>\n                     do discard 2\n                        return RPCAt ')
                  PsiComment(HaskellTokenType.-})('-}')
                  PsiComment(HaskellTokenType.comment)('-- template haskell\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''|'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''|'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''e'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''p'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''d'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''t'')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''$'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('s'')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  PsiElement(HaskellTokenType.case)('case')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('s'')
                  PsiElement(HaskellTokenType.of)('of')
                  PsiElement(HaskellTokenType.{)('{')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''|'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                  PsiElement(HaskellTokenType.;)(';')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.})('}')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isUpper')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''|'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)('']'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''$'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('id')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
                  PsiComment(HaskellTokenType.comment)('-- end template haskell\n')
                  PsiComment(HaskellTokenType.comment)('-- hsx\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.case)('case')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.of)('of')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''>'')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.do)('do')
                      HaskellStmtsImpl(STMTS)
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('3')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.do)('do')
                      HaskellStmtsImpl(STMTS)
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('2')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    HaskellVaridImpl(VARID)
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
                  PsiComment(HaskellTokenType.comment)('-- end hsx\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''#'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('UnboxedTuples')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  PsiElement(HaskellTokenType.()('(')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''#'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)('')'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('UnboxedTuples')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
              PsiComment(HaskellTokenType.comment)('-- pragmas\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''#'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('saveExtensionsL')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('3')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''#'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''}'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('restoreExtensionsL')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('3')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
              PsiComment(HaskellTokenType.comment)('-- Parallel arrays\n')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)('':'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  PsiElement(HaskellTokenType.chartoken)('':'')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType.chartoken)('']'')
                    HaskellQconopImpl(QCONOP)
                      HaskellGconsymImpl(GCONSYM)
                        PsiElement(HaskellTokenType.:)(':')
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      PsiElement(HaskellTokenType.`)('`')
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  HaskellQconImpl(QCON)
                    HaskellQconidImpl(QCONID)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
              HaskellAltImpl(ALT)
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQconopImpl(QCONOP)
                    HaskellGconsymImpl(GCONSYM)
                      PsiElement(HaskellTokenType.:)(':')
                  HaskellPatImpl(PAT)
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isUpper')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
                  HaskellPstringtokenImpl(PSTRINGTOKEN)
                    PsiElement(HaskellTokenType.")('"')
                    PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('||')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  HaskellQopImpl(QOP)
                    HaskellQvaropImpl(QVAROP)
                      HaskellQvarsymImpl(QVARSYM)
                        HaskellVarsymImpl(VARSYM)
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''_'')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('idents')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.case)('case')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('idents')
                      PsiElement(HaskellTokenType.of)('of')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.[)('[')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('ident')
                          PsiElement(HaskellTokenType.])(']')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.case)('case')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('lookup')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('ident')
                            PsiElement(HaskellTokenType.()('(')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('special_varids')
                            PsiElement(HaskellTokenType.))(')')
                          PsiElement(HaskellTokenType.of)('of')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('Just')
                              PsiElement(HaskellTokenType.()('(')
                              HaskellPatImpl(PAT)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('keyword')
                              PsiElement(HaskellTokenType.,)(',')
                              HaskellPatImpl(PAT)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('scheme')
                              PsiElement(HaskellTokenType.))(')')
                            PsiElement(HaskellTokenType.->)('->')
                            PsiComment(HaskellTokenType.comment)('-- check if an extension keyword is enabled\n')
                            HaskellExpImpl(EXP)
                              PsiElement(HaskellTokenType.if)('if')
                              HaskellExpImpl(EXP)
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('scheme')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('exts')
                              PsiElement(HaskellTokenType.then)('then')
                              HaskellExpImpl(EXP)
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('flagKW')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('keyword')
                                HaskellQopImpl(QOP)
                                  HaskellQvaropImpl(QVAROP)
                                    HaskellQvarsymImpl(QVARSYM)
                                      HaskellVarsymImpl(VARSYM)
                                        PsiElement(HaskellTokenType.Varsym)('>>')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('return')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('keyword')
                              PsiElement(HaskellTokenType.else)('else')
                              HaskellExpImpl(EXP)
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('return')
                                HaskellQopImpl(QOP)
                                  HaskellQvaropImpl(QVAROP)
                                    HaskellQvarsymImpl(QVARSYM)
                                      HaskellVarsymImpl(VARSYM)
                                        PsiElement(HaskellTokenType.$)('$')
                                HaskellQconImpl(QCON)
                                  HaskellQconidImpl(QCONID)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('VarId')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('ident')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQopImpl(QOP)
                                HaskellQvaropImpl(QVAROP)
                                  HaskellQvarsymImpl(QVARSYM)
                                    HaskellVarsymImpl(VARSYM)
                                      PsiElement(HaskellTokenType.$)('$')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('VarId')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('ident')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.$)('$')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('DVarId')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('idents')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellPatImpl(PAT)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('sym')
                    PsiElement(HaskellTokenType.<-)('<-')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.$)('$')
                      PsiElement(HaskellTokenType.case)('case')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('lookup')
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('sym')
                        PsiElement(HaskellTokenType.()('(')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.Varsym)('++')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('special_varops')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.of)('of')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Just')
                          PsiElement(HaskellTokenType.()('(')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.,)(',')
                          HaskellPatImpl(PAT)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('scheme')
                          PsiElement(HaskellTokenType.))(')')
                        PsiElement(HaskellTokenType.->)('->')
                        PsiComment(HaskellTokenType.comment)('-- check if an extension op is enabled\n')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.if)('if')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('scheme')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('exts')
                          PsiElement(HaskellTokenType.then)('then')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.else)('else')
                          HaskellExpImpl(EXP)
                            PsiElement(HaskellTokenType.case)('case')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('c')
                            PsiElement(HaskellTokenType.of)('of')
                            HaskellAltImpl(ALT)
                              HaskellPatImpl(PAT)
                                PsiElement(HaskellTokenType.chartoken)('':'')
                              PsiElement(HaskellTokenType.->)('->')
                              HaskellExpImpl(EXP)
                                HaskellQconImpl(QCON)
                                  HaskellQconidImpl(QCONID)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('ConSym')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('sym')
                            HaskellAltImpl(ALT)
                              HaskellPatImpl(PAT)
                                PsiElement(HaskellTokenType._)('_')
                              PsiElement(HaskellTokenType.->)('->')
                              HaskellExpImpl(EXP)
                                HaskellQconImpl(QCON)
                                  HaskellQconidImpl(QCONID)
                                    HaskellConidImpl(CONID)
                                      PsiElement(HaskellTokenType.conidRegexp)('VarSym')
                                HaskellQvarImpl(QVAR)
                                  HaskellQvaridImpl(QVARID)
                                    HaskellVaridImpl(VARID)
                                      PsiElement(HaskellTokenType.varidRegexp)('sym')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Nothing')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.case)('case')
                          HaskellExpImpl(EXP)
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                          PsiElement(HaskellTokenType.of)('of')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              PsiElement(HaskellTokenType.chartoken)('':'')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('ConSym')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('sym')
                          HaskellAltImpl(ALT)
                            HaskellPatImpl(PAT)
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            HaskellExpImpl(EXP)
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('VarSym')
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('sym')
                PsiElement(HaskellTokenType.|)('|')
                HaskellGuardImpl(GUARD)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
                PsiElement(HaskellTokenType.->)('->')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.do)('do')
                  HaskellStmtsImpl(STMTS)
                    HaskellExpImpl(EXP)
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.case)('case')
                      HaskellExpImpl(EXP)
                        HaskellQvarImpl(QVAR)
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.of)('of')
                      PsiComment(HaskellTokenType.comment)('-- First the special symbols\n')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''('')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)('')'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('RightParen')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)('','')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('Comma')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)('';'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''['')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)('']'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''`'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQconImpl(QCON)
                            HaskellQconidImpl(QCONID)
                              HaskellConidImpl(CONID)
                                PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''{'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.do)('do')
                          HaskellStmtsImpl(STMTS)
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('pushContextL')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('NoLayout')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''}'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.do)('do')
                          HaskellStmtsImpl(STMTS)
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('popContextL')
                              HaskellPstringtokenImpl(PSTRINGTOKEN)
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexStdToken')
                                PsiElement(HaskellTokenType.")('"')
                            HaskellExpImpl(EXP)
                              HaskellQvarImpl(QVAR)
                                HaskellQvaridImpl(QVARID)
                                  HaskellVaridImpl(VARID)
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              HaskellQconImpl(QCON)
                                HaskellQconidImpl(QCONID)
                                  HaskellConidImpl(CONID)
                                    PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''\''')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType.chartoken)(''"'')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexString')
                      HaskellAltImpl(ALT)
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('fail')
                          PsiElement(HaskellTokenType.()('(')
                          HaskellExpImpl(EXP)
                            HaskellPstringtokenImpl(PSTRINGTOKEN)
                              PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal character ')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)(''')
                              PsiElement(HaskellTokenType.")('"')
                            HaskellQopImpl(QOP)
                              HaskellQvaropImpl(QVAROP)
                                HaskellQvarsymImpl(QVARSYM)
                                  HaskellVarsymImpl(VARSYM)
                                    PsiElement(HaskellTokenType.Varsym)('++')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('show')
                            HaskellQvarImpl(QVAR)
                              HaskellQvaridImpl(QVARID)
                                HaskellVaridImpl(VARID)
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                            HaskellQopImpl(QOP)
                              HaskellQvaropImpl(QVAROP)
                                HaskellQvarsymImpl(QVARSYM)
                                  HaskellVarsymImpl(VARSYM)
                                    PsiElement(HaskellTokenType.Varsym)('++')
                            HaskellPstringtokenImpl(PSTRINGTOKEN)
                              PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)(''')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('n')
                              PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.where)('where')
        HaskellGendeclImpl(GENDECL)
          HaskellVarsImpl(VARS)
            HaskellVaridImpl(VARID)
              PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
          PsiElement(HaskellTokenType.::)('::')
          HaskellCtypeImpl(CTYPE)
            HaskellTypeeImpl(TYPEE)
              HaskellAtypeImpl(ATYPE)
                HaskellOqtyconImpl(OQTYCON)
                  HaskellQtyconImpl(QTYCON)
                    HaskellTyconImpl(TYCON)
                      HaskellConidImpl(CONID)
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              HaskellAtypeImpl(ATYPE)
                HaskellTyvarImpl(TYVAR)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              HaskellAtypeImpl(ATYPE)
                PsiElement(HaskellTokenType.[)('[')
                HaskellCtypeImpl(CTYPE)
                  HaskellTypeeImpl(TYPEE)
                    HaskellAtypeImpl(ATYPE)
                      HaskellOqtyconImpl(OQTYCON)
                        HaskellQtyconImpl(QTYCON)
                          HaskellTyconImpl(TYCON)
                            HaskellConidImpl(CONID)
                              PsiElement(HaskellTokenType.conidRegexp)('String')
                PsiElement(HaskellTokenType.])(']')
        HaskellFunorpatdeclImpl(FUNORPATDECL)
          HaskellPatImpl(PAT)
            HaskellVaridImpl(VARID)
              PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
          HaskellRhsImpl(RHS)
            PsiElement(HaskellTokenType.=)('=')
            HaskellExpImpl(EXP)
              PsiElement(HaskellTokenType.do)('do')
              HaskellStmtsImpl(STMTS)
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('ident')
                PsiElement(HaskellTokenType.<-)('<-')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('s')
                PsiElement(HaskellTokenType.<-)('<-')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('getInput')
                HaskellPatImpl(PAT)
                  HaskellVaridImpl(VARID)
                    PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.<-)('<-')
                HaskellExpImpl(EXP)
                  HaskellQvarImpl(QVAR)
                    HaskellQvaridImpl(QVARID)
                      HaskellVaridImpl(VARID)
                        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
                HaskellExpImpl(EXP)
                  PsiElement(HaskellTokenType.case)('case')
                  HaskellExpImpl(EXP)
                    HaskellQvarImpl(QVAR)
                      HaskellQvaridImpl(QVARID)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('s')
                  PsiElement(HaskellTokenType.of)('of')
                  PsiComment(HaskellTokenType.comment)('-- This is the only way we can get more than one ident in the list\n')
                  PsiComment(HaskellTokenType.comment)('-- and it requires XmlSyntax to be on.\n')
                  HaskellAltImpl(ALT)
                    HaskellPatImpl(PAT)
                      PsiElement(HaskellTokenType.chartoken)(''-'')
                      HaskellQconopImpl(QCONOP)
                        HaskellGconsymImpl(GCONSYM)
                          PsiElement(HaskellTokenType.:)(':')
                      HaskellPatImpl(PAT)
                        HaskellVaridImpl(VARID)
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                        HaskellQconopImpl(QCONOP)
                          HaskellGconsymImpl(GCONSYM)
                            PsiElement(HaskellTokenType.:)(':')
                        HaskellPatImpl(PAT)
                          PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.|)('|')
                    HaskellGuardImpl(GUARD)
                      HaskellQconImpl(QCON)
                        HaskellQconidImpl(QCONID)
                          HaskellConidImpl(CONID)
                            PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          PsiElement(HaskellTokenType.`)('`')
                          HaskellQvaridImpl(QVARID)
                            HaskellVaridImpl(VARID)
                              PsiElement(HaskellTokenType.varidRegexp)('elem')
                          PsiElement(HaskellTokenType.`)('`')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('exts')
                      HaskellQopImpl(QOP)
                        HaskellQvaropImpl(QVAROP)
                          HaskellQvarsymImpl(QVARSYM)
                            HaskellVarsymImpl(VARSYM)
                              PsiElement(HaskellTokenType.Varsym)('&&')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
                      HaskellQvarImpl(QVAR)
                        HaskellQvaridImpl(QVARID)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('c')
                    PsiElement(HaskellTokenType.->)('->')
                    HaskellExpImpl(EXP)
                      PsiElement(HaskellTokenType.do)('do')
                      HaskellStmtsImpl(STMTS)
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('1')
                        HaskellPatImpl(PAT)
                          HaskellVaridImpl(VARID)
                            PsiElement(HaskellTokenType.varidRegexp)('idents')
                        PsiElement(HaskellTokenType.<-)('<-')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
                        HaskellExpImpl(EXP)
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.$)('$')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('ident')
                          HaskellQopImpl(QOP)
                            HaskellQvaropImpl(QVAROP)
                              HaskellQvarsymImpl(QVARSYM)
                                HaskellVarsymImpl(VARSYM)
                                  PsiElement(HaskellTokenType.:)(':')
                          HaskellQvarImpl(QVAR)
                            HaskellQvaridImpl(QVARID)
                              HaskellVaridImpl(VARID)
                                PsiElement(HaskellTokenType.varidRegexp)('idents')
                        HaskellExpImpl(EXP)
                          PsiElement(HaskellTokenType.chartoken)(''#'')
  PsiElement(HaskellTokenType.:)(':')
  PsiElement(HaskellTokenType._)('_')
  PsiElement(HaskellTokenType.|)('|')
  PsiErrorElement:'MagicHash' unexpected
    PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.`)('`')
    PsiElement(HaskellTokenType.varidRegexp)('elem')
    PsiElement(HaskellTokenType.`)('`')
    PsiElement(HaskellTokenType.varidRegexp)('exts')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('1')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Char')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiComment(HaskellTokenType.comment)('-- We've seen and dropped [$ already\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuoter')
        PsiElement(HaskellTokenType.varidRegexp)('matchChar')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed quasi-quote quoter')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('body')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ident')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('body')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.where)('where')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuoter')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isLower')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.|)('|')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('qualThing')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('qualThing')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('s1')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('s1')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('s1')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('s1')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed quasi-quote quoter')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.::)('::')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)('']'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''|'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''|'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)('']'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''\\'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''\n'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Unexpected end of input while lexing quasi-quoter')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('not')
          PsiElement(HaskellTokenType..)('.')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.`)('`')
            PsiElement(HaskellTokenType.varidRegexp)('elem')
            PsiElement(HaskellTokenType.`)('`')
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('|')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('n')
            PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.Varsym)('++')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- Underscores are used in some pragmas. Options pragmas are a special case\n')
    PsiComment(HaskellTokenType.comment)('-- with our representation: the thing after the underscore is a parameter.\n')
    PsiComment(HaskellTokenType.comment)('-- Strip off the parameters to option pragmas by hand here, everything else\n')
    PsiComment(HaskellTokenType.comment)('-- sits in the pragmas map.\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Maybe')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
        PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('options_')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('isPrefixOf')
        PsiElement(HaskellTokenType.`)('`')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Just')
          PsiElement(HaskellTokenType.$)('$')
          PsiElement(HaskellTokenType.varidRegexp)('drop')
          PsiElement(HaskellTokenType.integertoken)('8')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('undefined')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('options')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.Varsym)('==')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Nothing')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('undefined')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('lookup')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.varidRegexp)('pragmas')
        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
        PsiElement(HaskellTokenType.::)('::')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('pr')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.varidRegexp)('pr')
        PsiElement(HaskellTokenType.of)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('INLINE')
          PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)('' '')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''c'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''k'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('8')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('6')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('8')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('False')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''t'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('9')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('False')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
          PsiElement(HaskellTokenType.varidRegexp)('opt')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiComment(HaskellTokenType.comment)('-- see, I promised we'd mask out the 'undefined'\n')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('fst')
        PsiElement(HaskellTokenType.varidRegexp)('opt')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.varidRegexp)('opt'')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Just')
          PsiElement(HaskellTokenType.varidRegexp)('opt'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Nothing')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('x')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Nothing')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed Options pragma')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.conidRegexp)('RULES')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiComment(HaskellTokenType.comment)('-- Rules enable ScopedTypeVariables locally.\n')
        PsiElement(HaskellTokenType.varidRegexp)('addExtensionL')
        PsiElement(HaskellTokenType.conidRegexp)('ScopedTypeVariables')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('RULES')
        PsiComment(HaskellTokenType.{-)('{-')
        PsiComment(HaskellTokenType.commenttext)('     Just (CFILES _) ')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)('> do\n            rest <')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)(' lexRawPragma\n            return $ CFILES rest\n     Just (INCLUDE _) ')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)('> do\n            rest <')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)(' lexRawPragma\n            return $ INCLUDE rest ')
        PsiComment(HaskellTokenType.-})('-}')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.varidRegexp)('p')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('p')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Internal error: Unrecognised recognised pragma')
        PsiElement(HaskellTokenType.")('"')
        PsiComment(HaskellTokenType.comment)('-- do rawStr <- lexRawPragma\n')
        PsiComment(HaskellTokenType.comment)('-- return $ PragmaUnknown (pr, rawStr) -- no support for unrecognized pragmas, treat as comment\n')
        PsiComment(HaskellTokenType.comment)('-- discard 3 -- #-}\n')
        PsiComment(HaskellTokenType.comment)('-- topLexer -- we just discard it as a comment for now and restart -}\n')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragmaAux')
        PsiElement(HaskellTokenType.where)('where')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragmaAux')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.Varsym)('/=')
          PsiElement(HaskellTokenType.chartoken)(''#'')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''-'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''}'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('End-of-file inside pragma')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('rpr'')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''#'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('rpr'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.of)('of')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''.'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('d')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.varidRegexp)('d')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('frac')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.let)('let')
        PsiElement(HaskellTokenType.varidRegexp)('num')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.integertoken)('10')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.Varsym)('++')
          PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('decimals')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('toInteger')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('length')
          PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        <empty list>
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('estr')
        PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('rest2')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('getInput')
    PsiElement(HaskellTokenType.case)('case')
    PsiElement(HaskellTokenType.varidRegexp)('rest2')
    PsiElement(HaskellTokenType.of)('of')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''e'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.integertoken)('0')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Right')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('num')
          PsiElement(HaskellTokenType.%)('%')
          PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.*)('*')
        PsiElement(HaskellTokenType.integertoken)('10')
        PsiElement(HaskellTokenType.Varsym)('^^')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
          PsiElement(HaskellTokenType.-)('-')
          PsiElement(HaskellTokenType.varidRegexp)('decimals')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('e')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('toLower')
      PsiElement(HaskellTokenType.varidRegexp)('e')
      PsiElement(HaskellTokenType.Varsym)('==')
      PsiElement(HaskellTokenType.chartoken)(''e'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('exponent')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Right')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.%)('%')
          PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.*)('*')
        PsiElement(HaskellTokenType.integertoken)('10')
        PsiElement(HaskellTokenType.Varsym)('^^')
        PsiElement(HaskellTokenType.varidRegexp)('exponent')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.where)('where')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiComment(HaskellTokenType.comment)('-- 'e' or 'E'\n')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''+'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''+'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''-'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('negate')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''-'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('>>=')
      PsiElement(HaskellTokenType.\)('\')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Float with missing exponent')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.::)('::')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('Either')
      PsiElement(HaskellTokenType.conidRegexp)('String')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''#'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.conidRegexp)('Right')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('c'')
      PsiElement(HaskellTokenType.conidRegexp)('Left')
      PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      PsiElement(HaskellTokenType.let)('let')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('qual'')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.=)('=')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.chartoken)(''.'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('alternative')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('rest')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('rest')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''.'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isLower')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('||')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('==')
      PsiElement(HaskellTokenType.chartoken)(''_'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified varid?\n')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('ident')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.varidRegexp)('ident'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('ident')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('lookup')
      PsiElement(HaskellTokenType.varidRegexp)('ident'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- cannot qualify a reserved word\n')
      PsiElement(HaskellTokenType.conidRegexp)('Just')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
      PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('qual'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ident'')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isUpper')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified conid?\n')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.varidRegexp)('qual'')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified symbol?\n')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(HaskellTokenType.varidRegexp)('sym')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
    PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
    PsiElement(HaskellTokenType.varidRegexp)('exts'')
    PsiElement(HaskellTokenType.<-)('<-')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('lookup')
      PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- cannot qualify a reserved operator\n')
      PsiElement(HaskellTokenType.conidRegexp)('Just')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
      PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)('':'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('QConSym')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('cs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('||')
      PsiElement(HaskellTokenType.varidRegexp)('not')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('head')
        PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('&&')
      PsiElement(HaskellTokenType.varidRegexp)('not')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('head')
        PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('&&')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('#')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con'')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('lexConIdOrQual: unexpected token: ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('show')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiComment(HaskellTokenType.comment)('-- not a qualified thing\n')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiComment(HaskellTokenType.comment)('-- We need to keep track of not only character constants but also TH 'x and ''T\n')
    PsiComment(HaskellTokenType.comment)('-- We've seen ' so far\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.varidRegexp)('matchQuote')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Left')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Double hash not available for character literals')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.chartoken)(''\\'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Left')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Double hash not available for character literals')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('any')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('elem')
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.[)('[')
      PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
      PsiElement(HaskellTokenType.,)(',')
      PsiElement(HaskellTokenType.conidRegexp)('DataKinds')
      PsiElement(HaskellTokenType.])(']')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improper character constant or misplaced ')
      PsiElement(HaskellTokenType.STRINGTOKEN)('\')
      PsiElement(HaskellTokenType.STRINGTOKEN)(''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.where)('where')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('matchQuote')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly terminated character constant')
      PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexString')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexString')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.where)('where')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''&'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''&'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(HaskellTokenType.varidRegexp)('c')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal character in string gap')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('reverse')
        PsiElement(HaskellTokenType.varidRegexp)('wcs')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ce')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ce')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('reverse')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('StringHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('StringTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('/=')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly terminated string')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.chartoken)(''\t'')
      PsiElement(HaskellTokenType.:)(':')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType._)('_')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('lexTab')
    PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.chartoken)(''\t'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- Production charesc from section B.2 (Note: \& is handled by caller)\n')
      PsiElement(HaskellTokenType.chartoken)(''a'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\a'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('a')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''b'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\b'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('b')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''f'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\f'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('f')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\n'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('n')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''r'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\r'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('r')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''t'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\t'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('t')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''v'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\v'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('v')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\"'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- Production ascii from section B.2\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''^'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('cntrl')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('NUL'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('NUL')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''H'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SOH'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SOH')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''X'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('STX'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('STX')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''X'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ETX'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ETX')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('EOT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('EOT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''Q'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ENQ'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ENQ')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''K'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ACK'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ACK')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('BEL'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('BEL')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('BS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('BS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''H'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('HT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('HT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('LF'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('LF')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''V'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('VT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('VT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('FF'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('FF')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''R'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('CR'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('CR')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SO'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SO')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''I'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SI'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SI')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DLE'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DLE')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''1'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC1'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC1')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''2'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC2'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC2')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''3'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC3'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC3')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''4'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC4'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC4')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''K'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('NAK'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('NAK')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''Y'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SYN'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SYN')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ETB'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ETB')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('CAN'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('CAN')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''M'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('EM'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('EM')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SUB'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SUB')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ESC'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ESC')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('FS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('FS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''G'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('GS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('GS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''R'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('RS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('RS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('US'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('US')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.chartoken)(''S'')
    PsiElement(HaskellTokenType.:)(':')
    PsiElement(HaskellTokenType.chartoken)(''P'')
    PsiElement(HaskellTokenType.:)(':')
    PsiElement(HaskellTokenType._)('_')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('2')
    PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SP'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SP')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DEL'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DEL')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- Escaped numbers\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''o'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
      PsiElement(HaskellTokenType.varidRegexp)('n'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('checkChar')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''x'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
      PsiElement(HaskellTokenType.varidRegexp)('c')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
      PsiElement(HaskellTokenType.varidRegexp)('n'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('checkChar')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''x'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      <empty list>
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
      PsiElement(HaskellTokenType.varidRegexp)('n'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('checkChar')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal escape sequence')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.where)('where')
      PsiElement(HaskellTokenType.varidRegexp)('checkChar')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.Varsym)('<=')
      PsiElement(HaskellTokenType.integertoken)('0x10FFFF')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('chr')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('fromInteger')
          PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('checkChar')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Character constant out of range')
      PsiElement(HaskellTokenType.")('"')
      PsiComment(HaskellTokenType.comment)('-- Production cntrl from section B.2\n')
      PsiElement(HaskellTokenType.varidRegexp)('cntrl')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Char')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('cntrl')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('>=')
      PsiElement(HaskellTokenType.chartoken)(''@'')
      PsiElement(HaskellTokenType.Varsym)('&&')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('<=')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''_'')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('chr')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ord')
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.-)('-')
          PsiElement(HaskellTokenType.varidRegexp)('ord')
          PsiElement(HaskellTokenType.chartoken)(''@'')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''^'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.])(']')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('cntrl')
    PsiElement(HaskellTokenType._)('_')
    PsiElement(HaskellTokenType.=)('=')
    PsiElement(HaskellTokenType.varidRegexp)('fail')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal control character')
    PsiElement(HaskellTokenType.")('"')
    PsiComment(HaskellTokenType.comment)('-- assumes at least one octal digit\n')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('8')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- assumes at least one binary digit\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('2')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- assumes at least one hexadecimal digit\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('16')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- assumes at least one decimal digit\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- Stolen from Hugs's Prelude\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.varidRegexp)('radix')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('foldl1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.\)('\')
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.varidRegexp)('d')
          PsiElement(HaskellTokenType.->)('->')
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.*)('*')
          PsiElement(HaskellTokenType.varidRegexp)('radix')
          PsiElement(HaskellTokenType.+)('+')
          PsiElement(HaskellTokenType.varidRegexp)('d')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.varidRegexp)('toInteger')
            PsiElement(HaskellTokenType..)('.')
            PsiElement(HaskellTokenType.varidRegexp)('digitToInt')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('flagKW')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('()')
        PsiElement(HaskellTokenType.varidRegexp)('flagKW')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('t')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('elem')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
        PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('NondecreasingIndentation')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('elem')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('flagDo')
        PsiComment(HaskellTokenType.comment)('-- | Selects ASCII binary digits, i.e. @\'0\'@..@\'1\'@.\n')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Bool')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('>=')
        PsiElement(HaskellTokenType.chartoken)(''0'')
        PsiElement(HaskellTokenType.Varsym)('&&')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('<=')
        PsiElement(HaskellTokenType.chartoken)(''1'')
        PsiComment(HaskellTokenType.comment)('------------------------------------------------------------------\n')
        PsiComment(HaskellTokenType.comment)('-- "Pretty" printing for tokens\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('showToken')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('showToken')
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.case)('case')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('VarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''?'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''%'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('ConId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QConId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('DVarId')
        PsiElement(HaskellTokenType.varidRegexp)('ss')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('intercalate')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('-')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.varidRegexp)('ss')
        PsiElement(HaskellTokenType.conidRegexp)('VarSym')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('ConSym')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QConSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('StringTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''"'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('##')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('##')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('StringHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''"'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('(')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(')')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('(#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('#)')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(';')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('{')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('}')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('virtual }')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('[')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(']')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('[:')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(':]')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Comma')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Underscore')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('_')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('`')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('QuoteColon')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('':')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Dot')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('.')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('DotDot')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('..')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Colon')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)(':')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('::')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Equals')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('=')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Backslash')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Bar')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('<-')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('At')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('@')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Tilde')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('~')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('=>')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Minus')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('-')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('!')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('Star')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('*')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('>-')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('-<')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('>>-')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('-<<')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('[|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('[p|')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('[d|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('[t|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('|]')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''$'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('$(')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('''')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('[$')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('|')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(']')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('(|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('|)')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('@:')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('<%')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('%>')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('<')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('>')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('</')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('/>')
        PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('PCDATA ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('<[')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(']>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('#-}')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RULES')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# RULES')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INLINE')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('NOINLINE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE CONLIKE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SPECIALISE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
      PsiElement(HaskellTokenType.varidRegexp)('b')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SPECIALISE ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('NOINLINE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SOURCE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# DEPRECATED')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('WARNING')
      PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# WARNING')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SCC')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SCC')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# GENERATED')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('CORE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# CORE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# UNPACK')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('mt')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# OPTIONS')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('maybe')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)('':'')
        PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('mt')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(' ...')
      PsiElement(HaskellTokenType.")('"')
      PsiComment(HaskellTokenType.comment)('--  CFILES  s         -> "{-# CFILES ..."\n')
      PsiComment(HaskellTokenType.comment)('--  INCLUDE s         -> "{-# INCLUDE ..."\n')
      PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# LANGUAGE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('ANN')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ANN')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# MINIMAL')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# NO_OVERLAP')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# OVERLAP')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# INCOHERENT')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_As')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('as')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_By')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('by')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('case')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('class')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('data')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('default')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('deriving')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('do')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('mdo')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('else')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('family')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('forall')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('group')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('hiding')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_If')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('if')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('import')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_In')
      PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('in')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infix')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infixl')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infixr')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('instance')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('let')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('module')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('newtype')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('proc')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('rec')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('then')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('type')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('using')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('where')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('qualified')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('foreign')
      PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('export')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('safe')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('unsafe')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('threadsafe')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('interruptible')
    PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('stdcall')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('ccall')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('<%>')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('cplusplus')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('dotnet')
    PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('jvm')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('js')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('capi')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('EOF')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(HaskellTokenType.")('"')
  PsiElement(HaskellTokenType.STRINGTOKEN)('EOF')
  PsiElement(HaskellTokenType.")('"')