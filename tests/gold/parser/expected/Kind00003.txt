Haskell File
  HaskellPpragmaImpl(PPRAGMA)
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)(' LANGUAGE DataKinds ')
    PsiElement(HaskellTokenType.#-})('#-}')
  HaskellPpragmaImpl(PPRAGMA)
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)(' LANGUAGE KindSignatures ')
    PsiElement(HaskellTokenType.#-})('#-}')
  HaskellPpragmaImpl(PPRAGMA)
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)(' LANGUAGE GADTs ')
    PsiElement(HaskellTokenType.#-})('#-}')
  HaskellPpragmaImpl(PPRAGMA)
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)(' LANGUAGE TypeOperators ')
    PsiElement(HaskellTokenType.#-})('#-}')
  PsiElement(HaskellTokenType.module)('module')
  HaskellQconidImpl(QCONID)
    PsiElement(HaskellTokenType.conid)('Kind00003')
  PsiElement(HaskellTokenType.where)('where')
  HaskellBodyImpl(BODY)
    HaskellNcommentImpl(NCOMMENT)
      PsiElement(HaskellTokenType.{-)('{-')
      PsiElement(HaskellTokenType.commenttext)('\n')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)(' FIXME: Waiting on https://github.com/haskell')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('suite/haskell')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('src')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('exts/issues/125\ndata HList :: [*] ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> * where\n  HNil  :: HList '[]\n  HCons :: a ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> HList t ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> HList (a ': t)\n\n')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)(' FIXME: Waiting on https://github.com/haskell')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('suite/haskell')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('src')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('exts/issues/124\ndata Tuple :: (*,*) ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> * where\n  Tuple :: a ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> b ')
      PsiElement(HaskellTokenType.commenttext)('-')
      PsiElement(HaskellTokenType.commenttext)('> Tuple '(a,b)\n')
      PsiElement(HaskellTokenType.-})('-}')
    PsiElement(HaskellTokenType.class)('class')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('C1')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('Bool')
    HaskellNcommentImpl(NCOMMENT)
      PsiElement(HaskellTokenType.{-)('{-')
      PsiElement(HaskellTokenType.commenttext)(' 1 ')
      PsiElement(HaskellTokenType.-})('-}')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.where)('where')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('c')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('proxy')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.->)('->')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('Int')
    PsiElement(HaskellTokenType.class)('class')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('C2')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.[)('[')
    HaskellQvarsymImpl(QVARSYM)
      HaskellVarsymImpl(VARSYM)
        HaskellSymbolImpl(SYMBOL)
          PsiElement(HaskellTokenType.*)('*')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.])(']')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.class)('class')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('C3')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.[)('[')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('Int')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.,)(',')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('Double')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.])(']')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.class)('class')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('C4')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvarsymImpl(QVARSYM)
      HaskellVarsymImpl(VARSYM)
        HaskellSymbolImpl(SYMBOL)
          PsiElement(HaskellTokenType.*)('*')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.data)('data')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('X')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.()('(')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('a')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.[)('[')
    HaskellQvarsymImpl(QVARSYM)
      HaskellVarsymImpl(VARSYM)
        HaskellSymbolImpl(SYMBOL)
          PsiElement(HaskellTokenType.*)('*')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.])(']')
    HaskellSpecialImpl(SPECIAL)
      PsiElement(HaskellTokenType.))(')')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('x1')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.=)('=')
    HaskellQvaridImpl(QVARID)
      HaskellVaridImpl(VARID)
        PsiElement(HaskellTokenType.varidRegexp)('undefined')
    HaskellReservedopImpl(RESERVEDOP)
      PsiElement(HaskellTokenType.::)('::')
    HaskellQconidImpl(QCONID)
      PsiElement(HaskellTokenType.conid)('X')
  PsiErrorElement:<cpp>, <qconsym>, <qvarid>, <qvarsym>, <reservedop>, <special>, <whitechar>, HaskellTokenType.", HaskellTokenType.., HaskellTokenType.`, HaskellTokenType.as, HaskellTokenType.case, HaskellTokenType.chartoken, HaskellTokenType.class, HaskellTokenType.comment, HaskellTokenType.conid, HaskellTokenType.data, HaskellTokenType.default, HaskellTokenType.deriving, HaskellTokenType.do, HaskellTokenType.else, HaskellTokenType.export, HaskellTokenType.floattoken, HaskellTokenType.foreign, HaskellTokenType.haddock, HaskellTokenType.if, HaskellTokenType.import, HaskellTokenType.in, HaskellTokenType.infix, HaskellTokenType.infixl, HaskellTokenType.infixr, HaskellTokenType.instance, HaskellTokenType.integertoken, HaskellTokenType.let, HaskellTokenType.newtype, HaskellTokenType.of, HaskellTokenType.then, HaskellTokenType.type, HaskellTokenType.where, HaskellTokenType.{-, HaskellTokenType.{-# or _ expected, got '''
    PsiElement(HaskellTokenType.')(''')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.[)('[')
    PsiElement(HaskellTokenType.conid)('Int')
    PsiElement(HaskellTokenType.])(']')
    PsiElement(HaskellTokenType.varidRegexp)('x2')
    PsiElement(HaskellTokenType.=)('=')
    PsiElement(HaskellTokenType.varidRegexp)('undefined')
    PsiElement(HaskellTokenType.::)('::')
    PsiElement(HaskellTokenType.conid)('X')
    PsiElement(HaskellTokenType.')(''')
    PsiElement(HaskellTokenType.[)('[')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conid)('Int')
    PsiElement(HaskellTokenType.,)(',')
    PsiElement(HaskellTokenType.conid)('Double')
    PsiElement(HaskellTokenType.])(']')
    PsiElement(HaskellTokenType.data)('data')
    PsiElement(HaskellTokenType.conid)('Y')
    PsiElement(HaskellTokenType.()('(')
    PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(HaskellTokenType.::)('::')
    PsiElement(HaskellTokenType.()('(')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.*)('*')
    PsiElement(HaskellTokenType.,)(',')
    PsiElement(HaskellTokenType.conid)('Bool')
    PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.varidRegexp)('y1')
    PsiElement(HaskellTokenType.=)('=')
    PsiElement(HaskellTokenType.varidRegexp)('undefined')
    PsiElement(HaskellTokenType.::)('::')
    PsiElement(HaskellTokenType.conid)('Y')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.')(''')
    PsiElement(HaskellTokenType.()('(')
    PsiElement(HaskellTokenType.conid)('Double')
    PsiElement(HaskellTokenType.,)(',')
    PsiElement(HaskellTokenType.conid)('True')
    PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.varidRegexp)('y2')
    PsiElement(HaskellTokenType.=)('=')
    PsiElement(HaskellTokenType.varidRegexp)('undefined')
    PsiElement(HaskellTokenType.::)('::')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conid)('Y')
    PsiElement(HaskellTokenType.')(''')
    PsiElement(HaskellTokenType.()('(')
    PsiElement(HaskellTokenType.conid)('Double')
    PsiElement(HaskellTokenType.,)(',')
    PsiElement(HaskellTokenType.')(''')
    PsiElement(HaskellTokenType.conid)('False')
    PsiElement(HaskellTokenType.{-)('{-')
    PsiElement(HaskellTokenType.commenttext)('comment')
    PsiElement(HaskellTokenType.-})('-}')
  PsiElement(HaskellTokenType.))(')')